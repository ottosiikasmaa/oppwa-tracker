(function () {
/**
 * @license almond 0.3.0 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/almond for details
 */
//Going sloppy to avoid 'use strict' string cost, but strict practices should
//be followed.
/*jslint sloppy: true */
/*global setTimeout: false */

var requirejs, require, define, forceUtf8 = "☠";
(function (undef) {
    var main, req, makeMap, handlers,
        defined = {},
        waiting = {},
        config = {},
        defining = {},
        hasOwn = Object.prototype.hasOwnProperty,
        aps = [].slice,
        jsSuffixRegExp = /\.js$/;

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */
    function normalize(name, baseName) {
        var nameParts, nameSegment, mapValue, foundMap, lastIndex,
            foundI, foundStarMap, starI, i, j, part,
            baseParts = baseName && baseName.split("/"),
            map = config.map,
            starMap = (map && map['*']) || {};

        //Adjust any relative paths.
        if (name && name.charAt(0) === ".") {
            //If have a base name, try to normalize against it,
            //otherwise, assume it is a top-level require that will
            //be relative to baseUrl in the end.
            if (baseName) {
                //Convert baseName to array, and lop off the last part,
                //so that . matches that "directory" and not name of the baseName's
                //module. For instance, baseName of "one/two/three", maps to
                //"one/two/three.js", but we want the directory, "one/two" for
                //this normalization.
                baseParts = baseParts.slice(0, baseParts.length - 1);
                name = name.split('/');
                lastIndex = name.length - 1;

                // Node .js allowance:
                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
                }

                name = baseParts.concat(name);

                //start trimDots
                for (i = 0; i < name.length; i += 1) {
                    part = name[i];
                    if (part === ".") {
                        name.splice(i, 1);
                        i -= 1;
                    } else if (part === "..") {
                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {
                            //End of the line. Keep at least one non-dot
                            //path segment at the front so it can be mapped
                            //correctly to disk. Otherwise, there is likely
                            //no path mapping for a path starting with '..'.
                            //This can still fail, but catches the most reasonable
                            //uses of ..
                            break;
                        } else if (i > 0) {
                            name.splice(i - 1, 2);
                            i -= 2;
                        }
                    }
                }
                //end trimDots

                name = name.join("/");
            } else if (name.indexOf('./') === 0) {
                // No baseName, so this is ID is resolved relative
                // to baseUrl, pull off the leading dot.
                name = name.substring(2);
            }
        }

        //Apply map config if available.
        if ((baseParts || starMap) && map) {
            nameParts = name.split('/');

            for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                    //Find the longest baseName segment match in the config.
                    //So, do joins on the biggest to smallest lengths of baseParts.
                    for (j = baseParts.length; j > 0; j -= 1) {
                        mapValue = map[baseParts.slice(0, j).join('/')];

                        //baseName segment has  config, find if it has one for
                        //this name.
                        if (mapValue) {
                            mapValue = mapValue[nameSegment];
                            if (mapValue) {
                                //Match, update name to the new value.
                                foundMap = mapValue;
                                foundI = i;
                                break;
                            }
                        }
                    }
                }

                if (foundMap) {
                    break;
                }

                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                    foundStarMap = starMap[nameSegment];
                    starI = i;
                }
            }

            if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
            }

            if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
            }
        }

        return name;
    }

    function makeRequire(relName, forceSync) {
        return function () {
            //A version of a require function that passes a moduleName
            //value for items that may need to
            //look up paths relative to the moduleName
            var args = aps.call(arguments, 0);

            //If first arg is not require('string'), and there is only
            //one arg, it is the array form without a callback. Insert
            //a null so that the following concat is correct.
            if (typeof args[0] !== 'string' && args.length === 1) {
                args.push(null);
            }
            return req.apply(undef, args.concat([relName, forceSync]));
        };
    }

    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(depName) {
        return function (value) {
            defined[depName] = value;
        };
    }

    function callDep(name) {
        if (hasProp(waiting, name)) {
            var args = waiting[name];
            delete waiting[name];
            defining[name] = true;
            main.apply(undef, args);
        }

        if (!hasProp(defined, name) && !hasProp(defining, name)) {
            throw new Error('No ' + name);
        }
        return defined[name];
    }

    //Turns a plugin!resource to [plugin, resource]
    //with the plugin being undefined if the name
    //did not have a plugin prefix.
    function splitPrefix(name) {
        var prefix,
            index = name ? name.indexOf('!') : -1;
        if (index > -1) {
            prefix = name.substring(0, index);
            name = name.substring(index + 1, name.length);
        }
        return [prefix, name];
    }

    /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */
    makeMap = function (name, relName) {
        var plugin,
            parts = splitPrefix(name),
            prefix = parts[0];

        name = parts[1];

        if (prefix) {
            prefix = normalize(prefix, relName);
            plugin = callDep(prefix);
        }

        //Normalize according
        if (prefix) {
            if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relName));
            } else {
                name = normalize(name, relName);
            }
        } else {
            name = normalize(name, relName);
            parts = splitPrefix(name);
            prefix = parts[0];
            name = parts[1];
            if (prefix) {
                plugin = callDep(prefix);
            }
        }

        //Using ridiculous property names for space reasons
        return {
            f: prefix ? prefix + '!' + name : name, //fullName
            n: name,
            pr: prefix,
            p: plugin
        };
    };

    function makeConfig(name) {
        return function () {
            return (config && config.config && config.config[name]) || {};
        };
    }

    handlers = {
        require: function (name) {
            return makeRequire(name);
        },
        exports: function (name) {
            var e = defined[name];
            if (typeof e !== 'undefined') {
                return e;
            } else {
                return (defined[name] = {});
            }
        },
        module: function (name) {
            return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
            };
        }
    };

    main = function (name, deps, callback, relName) {
        var cjsModule, depName, ret, map, i,
            args = [],
            callbackType = typeof callback,
            usingExports;

        //Use name if no relName
        relName = relName || name;

        //Call the callback to define the module, if necessary.
        if (callbackType === 'undefined' || callbackType === 'function') {
            //Pull out the defined dependencies and pass the ordered
            //values to the callback.
            //Default to [require, exports, module] if no deps
            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
            for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relName);
                depName = map.f;

                //Fast path CommonJS standard dependencies.
                if (depName === "require") {
                    args[i] = handlers.require(name);
                } else if (depName === "exports") {
                    //CommonJS module spec 1.1
                    args[i] = handlers.exports(name);
                    usingExports = true;
                } else if (depName === "module") {
                    //CommonJS module spec 1.1
                    cjsModule = args[i] = handlers.module(name);
                } else if (hasProp(defined, depName) ||
                           hasProp(waiting, depName) ||
                           hasProp(defining, depName)) {
                    args[i] = callDep(depName);
                } else if (map.p) {
                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                    args[i] = defined[depName];
                } else {
                    throw new Error(name + ' missing ' + depName);
                }
            }

            ret = callback ? callback.apply(defined[name], args) : undefined;

            if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef &&
                        cjsModule.exports !== defined[name]) {
                    defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                    //Use the return value from the function.
                    defined[name] = ret;
                }
            }
        } else if (name) {
            //May just be an object definition for the module. Only
            //worry about defining if have a module name.
            defined[name] = callback;
        }
    };

    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
        if (typeof deps === "string") {
            if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
            }
            //Just return the module wanted. In this scenario, the
            //deps arg is the module name, and second arg (if passed)
            //is just the relName.
            //Normalize module name, if it contains . or ..
            return callDep(makeMap(deps, callback).f);
        } else if (!deps.splice) {
            //deps is a config object, not an array.
            config = deps;
            if (config.deps) {
                req(config.deps, config.callback);
            }
            if (!callback) {
                return;
            }

            if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
            } else {
                deps = undef;
            }
        }

        //Support require(['a'])
        callback = callback || function () {};

        //If relName is a function, it is an errback handler,
        //so remove it.
        if (typeof relName === 'function') {
            relName = forceSync;
            forceSync = alt;
        }

        //Simulate async callback;
        if (forceSync) {
            main(undef, deps, callback, relName);
        } else {
            //Using a non-zero value because of concern for what old browsers
            //do, and latest browsers "upgrade" to 4 if lower value is used:
            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
            //If want a value immediately, use require('id') instead -- something
            //that works in almond on the global level, but not guaranteed and
            //unlikely to work in other AMD implementations.
            setTimeout(function () {
                main(undef, deps, callback, relName);
            }, 4);
        }

        return req;
    };

    /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */
    req.config = function (cfg) {
        return req(cfg);
    };

    /**
     * Expose module registry for debugging and tooling
     */
    requirejs._defined = defined;

    define = function (name, deps, callback) {

        //This module may not have dependencies
        if (!deps.splice) {
            //deps is not an array, so probably means
            //an object literal or factory function for
            //the value. Adjust args.
            callback = deps;
            deps = [];
        }

        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
            waiting[name] = [name, deps, callback];
        }
    };

    define.amd = {
        jQuery: true
    };
}());
/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
	"use strict";

	var arr = [];

	var document = window.document;

	var getProto = Object.getPrototypeOf;

	var slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var fnToString = hasOwn.toString;

	var ObjectFunctionString = fnToString.call( Object );

	var support = {};

	var isFunction = function isFunction( obj ) {

		// Support: Chrome <=57, Firefox <=52
		// In some browsers, typeof returns "function" for HTML <object> elements
		// (i.e., `typeof document.createElement( "object" ) === "function"`).
		// We don't want to classify *any* DOM node as a function.
		return typeof obj === "function" && typeof obj.nodeType !== "number";
	};


	var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};




	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval( code, node, doc ) {
		doc = doc || document;

		var i, val,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[ i ] || node.getAttribute && node.getAttribute( i );
				if ( val ) {
					script.setAttribute( i, val );
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


	function toType( obj ) {
		if ( obj == null ) {
			return obj + "";
		}

		// Support: Android <=2.3 only (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	}
	/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



	var
		version = "3.4.1",

		// Define a local copy of jQuery
		jQuery = function( selector, context ) {

			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},

		// Support: Android <=4.0 only
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

	jQuery.fn = jQuery.prototype = {

		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function() {
			return slice.call( this );
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {

			// Return all the elements in a clean array
			if ( num == null ) {
				return slice.call( this );
			}

			// Return just the one element from the set
			return num < 0 ? this[ num + this.length ] : this[ num ];
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},

		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},

		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},

		first: function() {
			return this.eq( 0 );
		},

		last: function() {
			return this.eq( -1 );
		},

		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},

		end: function() {
			return this.prevObject || this.constructor();
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;

		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;

			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !isFunction( target ) ) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}

		for ( ; i < length; i++ ) {

			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {

				// Extend the base object
				for ( name in options ) {
					copy = options[ name ];

					// Prevent Object.prototype pollution
					// Prevent never-ending loop
					if ( name === "__proto__" || target === copy ) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = Array.isArray( copy ) ) ) ) {
						src = target[ name ];

						// Ensure proper type for the source value
						if ( copyIsArray && !Array.isArray( src ) ) {
							clone = [];
						} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
							clone = {};
						} else {
							clone = src;
						}
						copyIsArray = false;

						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );

						// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend( {

		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function( msg ) {
			throw new Error( msg );
		},

		noop: function() {},

		isPlainObject: function( obj ) {
			var proto, Ctor;

			// Detect obvious negatives
			// Use toString instead of jQuery.type to catch host objects
			if ( !obj || toString.call( obj ) !== "[object Object]" ) {
				return false;
			}

			proto = getProto( obj );

			// Objects with no prototype (e.g., `Object.create( null )`) are plain
			if ( !proto ) {
				return true;
			}

			// Objects with prototype are plain iff they were constructed by a global Object function
			Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
			return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
		},

		isEmptyObject: function( obj ) {
			var name;

			for ( name in obj ) {
				return false;
			}
			return true;
		},

		// Evaluates a script in a global context
		globalEval: function( code, options ) {
			DOMEval( code, { nonce: options && options.nonce } );
		},

		each: function( obj, callback ) {
			var length, i = 0;

			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}

			return obj;
		},

		// Support: Android <=4.0 only
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];

			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
							[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}

			return ret;
		},

		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},

		// Support: Android <=4.0 only, PhantomJS 1 only
		// push.apply(_, arraylike) throws on ancient WebKit
		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;

			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}

			first.length = i;

			return first;
		},

		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];

			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}

				// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply( [], ret );
		},

		// A global GUID counter for objects
		guid: 1,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );

	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}

// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
		function( i, name ) {
			class2type[ "[object " + name + "]" ] = name.toLowerCase();
		} );

	function isArrayLike( obj ) {

		// Support: real iOS 8.2 only (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = toType( obj );

		if ( isFunction( obj ) || isWindow( obj ) ) {
			return false;
		}

		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
		/*!
 * Sizzle CSS Selector Engine v2.3.4
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2019-04-08
 */
		(function( window ) {

			var i,
				support,
				Expr,
				getText,
				isXML,
				tokenize,
				compile,
				select,
				outermostContext,
				sortInput,
				hasDuplicate,

				// Local document vars
				setDocument,
				document,
				docElem,
				documentIsHTML,
				rbuggyQSA,
				rbuggyMatches,
				matches,
				contains,

				// Instance-specific data
				expando = "sizzle" + 1 * new Date(),
				preferredDoc = window.document,
				dirruns = 0,
				done = 0,
				classCache = createCache(),
				tokenCache = createCache(),
				compilerCache = createCache(),
				nonnativeSelectorCache = createCache(),
				sortOrder = function( a, b ) {
					if ( a === b ) {
						hasDuplicate = true;
					}
					return 0;
				},

				// Instance methods
				hasOwn = ({}).hasOwnProperty,
				arr = [],
				pop = arr.pop,
				push_native = arr.push,
				push = arr.push,
				slice = arr.slice,
				// Use a stripped-down indexOf as it's faster than native
				// https://jsperf.com/thor-indexof-vs-for/5
				indexOf = function( list, elem ) {
					var i = 0,
						len = list.length;
					for ( ; i < len; i++ ) {
						if ( list[i] === elem ) {
							return i;
						}
					}
					return -1;
				},

				booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

				// Regular expressions

				// http://www.w3.org/TR/css3-selectors/#whitespace
				whitespace = "[\\x20\\t\\r\\n\\f]",

				// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
				identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

				// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
				attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
					// Operator (capture 2)
					"*([*^$|!~]?=)" + whitespace +
					// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
					"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
					"*\\]",

				pseudos = ":(" + identifier + ")(?:\\((" +
					// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
					// 1. quoted (capture 3; capture 4 or capture 5)
					"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
					// 2. simple (capture 6)
					"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
					// 3. anything else (capture 2)
					".*" +
					")\\)|)",

				// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
				rwhitespace = new RegExp( whitespace + "+", "g" ),
				rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

				rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
				rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),
				rdescend = new RegExp( whitespace + "|>" ),

				rpseudo = new RegExp( pseudos ),
				ridentifier = new RegExp( "^" + identifier + "$" ),

				matchExpr = {
					"ID": new RegExp( "^#(" + identifier + ")" ),
					"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
					"TAG": new RegExp( "^(" + identifier + "|[*])" ),
					"ATTR": new RegExp( "^" + attributes ),
					"PSEUDO": new RegExp( "^" + pseudos ),
					"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
						"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
						"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
					"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
					// For use in libraries implementing .is()
					// We use this for POS matching in `select`
					"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
						whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
				},

				rhtml = /HTML$/i,
				rinputs = /^(?:input|select|textarea|button)$/i,
				rheader = /^h\d$/i,

				rnative = /^[^{]+\{\s*\[native \w/,

				// Easily-parseable/retrievable ID or TAG or CLASS selectors
				rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

				rsibling = /[+~]/,

				// CSS escapes
				// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
				runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
				funescape = function( _, escaped, escapedWhitespace ) {
					var high = "0x" + escaped - 0x10000;
					// NaN means non-codepoint
					// Support: Firefox<24
					// Workaround erroneous numeric interpretation of +"0x"
					return high !== high || escapedWhitespace ?
						escaped :
						high < 0 ?
							// BMP codepoint
							String.fromCharCode( high + 0x10000 ) :
							// Supplemental Plane codepoint (surrogate pair)
							String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
				},

				// CSS string/identifier serialization
				// https://drafts.csswg.org/cssom/#common-serializing-idioms
				rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
				fcssescape = function( ch, asCodePoint ) {
					if ( asCodePoint ) {

						// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
						if ( ch === "\0" ) {
							return "\uFFFD";
						}

						// Control characters and (dependent upon position) numbers get escaped as code points
						return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
					}

					// Other potentially-special ASCII characters get backslash-escaped
					return "\\" + ch;
				},

				// Used for iframes
				// See setDocument()
				// Removing the function wrapper causes a "Permission Denied"
				// error in IE
				unloadHandler = function() {
					setDocument();
				},

				inDisabledFieldset = addCombinator(
					function( elem ) {
						return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
					},
					{ dir: "parentNode", next: "legend" }
				);

// Optimize for push.apply( _, NodeList )
			try {
				push.apply(
					(arr = slice.call( preferredDoc.childNodes )),
					preferredDoc.childNodes
				);
				// Support: Android<4.0
				// Detect silently failing push.apply
				arr[ preferredDoc.childNodes.length ].nodeType;
			} catch ( e ) {
				push = { apply: arr.length ?

						// Leverage slice if possible
						function( target, els ) {
							push_native.apply( target, slice.call(els) );
						} :

						// Support: IE<9
						// Otherwise append directly
						function( target, els ) {
							var j = target.length,
								i = 0;
							// Can't trust NodeList.length
							while ( (target[j++] = els[i++]) ) {}
							target.length = j - 1;
						}
				};
			}

			function Sizzle( selector, context, results, seed ) {
				var m, i, elem, nid, match, groups, newSelector,
					newContext = context && context.ownerDocument,

					// nodeType defaults to 9, since context defaults to document
					nodeType = context ? context.nodeType : 9;

				results = results || [];

				// Return early from calls with invalid selector or context
				if ( typeof selector !== "string" || !selector ||
					nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

					return results;
				}

				// Try to shortcut find operations (as opposed to filters) in HTML documents
				if ( !seed ) {

					if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
						setDocument( context );
					}
					context = context || document;

					if ( documentIsHTML ) {

						// If the selector is sufficiently simple, try using a "get*By*" DOM method
						// (excepting DocumentFragment context, where the methods don't exist)
						if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

							// ID selector
							if ( (m = match[1]) ) {

								// Document context
								if ( nodeType === 9 ) {
									if ( (elem = context.getElementById( m )) ) {

										// Support: IE, Opera, Webkit
										// TODO: identify versions
										// getElementById can match elements by name instead of ID
										if ( elem.id === m ) {
											results.push( elem );
											return results;
										}
									} else {
										return results;
									}

									// Element context
								} else {

									// Support: IE, Opera, Webkit
									// TODO: identify versions
									// getElementById can match elements by name instead of ID
									if ( newContext && (elem = newContext.getElementById( m )) &&
										contains( context, elem ) &&
										elem.id === m ) {

										results.push( elem );
										return results;
									}
								}

								// Type selector
							} else if ( match[2] ) {
								push.apply( results, context.getElementsByTagName( selector ) );
								return results;

								// Class selector
							} else if ( (m = match[3]) && support.getElementsByClassName &&
								context.getElementsByClassName ) {

								push.apply( results, context.getElementsByClassName( m ) );
								return results;
							}
						}

						// Take advantage of querySelectorAll
						if ( support.qsa &&
							!nonnativeSelectorCache[ selector + " " ] &&
							(!rbuggyQSA || !rbuggyQSA.test( selector )) &&

							// Support: IE 8 only
							// Exclude object elements
							(nodeType !== 1 || context.nodeName.toLowerCase() !== "object") ) {

							newSelector = selector;
							newContext = context;

							// qSA considers elements outside a scoping root when evaluating child or
							// descendant combinators, which is not what we want.
							// In such cases, we work around the behavior by prefixing every selector in the
							// list with an ID selector referencing the scope context.
							// Thanks to Andrew Dupont for this technique.
							if ( nodeType === 1 && rdescend.test( selector ) ) {

								// Capture the context ID, setting it first if necessary
								if ( (nid = context.getAttribute( "id" )) ) {
									nid = nid.replace( rcssescape, fcssescape );
								} else {
									context.setAttribute( "id", (nid = expando) );
								}

								// Prefix every selector in the list
								groups = tokenize( selector );
								i = groups.length;
								while ( i-- ) {
									groups[i] = "#" + nid + " " + toSelector( groups[i] );
								}
								newSelector = groups.join( "," );

								// Expand context for sibling selectors
								newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
									context;
							}

							try {
								push.apply( results,
									newContext.querySelectorAll( newSelector )
								);
								return results;
							} catch ( qsaError ) {
								nonnativeSelectorCache( selector, true );
							} finally {
								if ( nid === expando ) {
									context.removeAttribute( "id" );
								}
							}
						}
					}
				}

				// All others
				return select( selector.replace( rtrim, "$1" ), context, results, seed );
			}

			/**
			 * Create key-value caches of limited size
			 * @returns {function(string, object)} Returns the Object data after storing it on itself with
			 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
			 *	deleting the oldest entry
			 */
			function createCache() {
				var keys = [];

				function cache( key, value ) {
					// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
					if ( keys.push( key + " " ) > Expr.cacheLength ) {
						// Only keep the most recent entries
						delete cache[ keys.shift() ];
					}
					return (cache[ key + " " ] = value);
				}
				return cache;
			}

			/**
			 * Mark a function for special use by Sizzle
			 * @param {Function} fn The function to mark
			 */
			function markFunction( fn ) {
				fn[ expando ] = true;
				return fn;
			}

			/**
			 * Support testing using an element
			 * @param {Function} fn Passed the created element and returns a boolean result
			 */
			function assert( fn ) {
				var el = document.createElement("fieldset");

				try {
					return !!fn( el );
				} catch (e) {
					return false;
				} finally {
					// Remove from its parent by default
					if ( el.parentNode ) {
						el.parentNode.removeChild( el );
					}
					// release memory in IE
					el = null;
				}
			}

			/**
			 * Adds the same handler for all of the specified attrs
			 * @param {String} attrs Pipe-separated list of attributes
			 * @param {Function} handler The method that will be applied
			 */
			function addHandle( attrs, handler ) {
				var arr = attrs.split("|"),
					i = arr.length;

				while ( i-- ) {
					Expr.attrHandle[ arr[i] ] = handler;
				}
			}

			/**
			 * Checks document order of two siblings
			 * @param {Element} a
			 * @param {Element} b
			 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
			 */
			function siblingCheck( a, b ) {
				var cur = b && a,
					diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
						a.sourceIndex - b.sourceIndex;

				// Use IE sourceIndex if available on both nodes
				if ( diff ) {
					return diff;
				}

				// Check if b follows a
				if ( cur ) {
					while ( (cur = cur.nextSibling) ) {
						if ( cur === b ) {
							return -1;
						}
					}
				}

				return a ? 1 : -1;
			}

			/**
			 * Returns a function to use in pseudos for input types
			 * @param {String} type
			 */
			function createInputPseudo( type ) {
				return function( elem ) {
					var name = elem.nodeName.toLowerCase();
					return name === "input" && elem.type === type;
				};
			}

			/**
			 * Returns a function to use in pseudos for buttons
			 * @param {String} type
			 */
			function createButtonPseudo( type ) {
				return function( elem ) {
					var name = elem.nodeName.toLowerCase();
					return (name === "input" || name === "button") && elem.type === type;
				};
			}

			/**
			 * Returns a function to use in pseudos for :enabled/:disabled
			 * @param {Boolean} disabled true for :disabled; false for :enabled
			 */
			function createDisabledPseudo( disabled ) {

				// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
				return function( elem ) {

					// Only certain elements can match :enabled or :disabled
					// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
					// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
					if ( "form" in elem ) {

						// Check for inherited disabledness on relevant non-disabled elements:
						// * listed form-associated elements in a disabled fieldset
						//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
						//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
						// * option elements in a disabled optgroup
						//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
						// All such elements have a "form" property.
						if ( elem.parentNode && elem.disabled === false ) {

							// Option elements defer to a parent optgroup if present
							if ( "label" in elem ) {
								if ( "label" in elem.parentNode ) {
									return elem.parentNode.disabled === disabled;
								} else {
									return elem.disabled === disabled;
								}
							}

							// Support: IE 6 - 11
							// Use the isDisabled shortcut property to check for disabled fieldset ancestors
							return elem.isDisabled === disabled ||

								// Where there is no isDisabled, check manually
								/* jshint -W018 */
								elem.isDisabled !== !disabled &&
								inDisabledFieldset( elem ) === disabled;
						}

						return elem.disabled === disabled;

						// Try to winnow out elements that can't be disabled before trusting the disabled property.
						// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
						// even exist on them, let alone have a boolean value.
					} else if ( "label" in elem ) {
						return elem.disabled === disabled;
					}

					// Remaining elements are neither :enabled nor :disabled
					return false;
				};
			}

			/**
			 * Returns a function to use in pseudos for positionals
			 * @param {Function} fn
			 */
			function createPositionalPseudo( fn ) {
				return markFunction(function( argument ) {
					argument = +argument;
					return markFunction(function( seed, matches ) {
						var j,
							matchIndexes = fn( [], seed.length, argument ),
							i = matchIndexes.length;

						// Match elements found at the specified indexes
						while ( i-- ) {
							if ( seed[ (j = matchIndexes[i]) ] ) {
								seed[j] = !(matches[j] = seed[j]);
							}
						}
					});
				});
			}

			/**
			 * Checks a node for validity as a Sizzle context
			 * @param {Element|Object=} context
			 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
			 */
			function testContext( context ) {
				return context && typeof context.getElementsByTagName !== "undefined" && context;
			}

// Expose support vars for convenience
			support = Sizzle.support = {};

			/**
			 * Detects XML nodes
			 * @param {Element|Object} elem An element or a document
			 * @returns {Boolean} True iff elem is a non-HTML XML node
			 */
			isXML = Sizzle.isXML = function( elem ) {
				var namespace = elem.namespaceURI,
					docElem = (elem.ownerDocument || elem).documentElement;

				// Support: IE <=8
				// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
				// https://bugs.jquery.com/ticket/4833
				return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
			};

			/**
			 * Sets document-related variables once based on the current document
			 * @param {Element|Object} [doc] An element or document object to use to set the document
			 * @returns {Object} Returns the current document
			 */
			setDocument = Sizzle.setDocument = function( node ) {
				var hasCompare, subWindow,
					doc = node ? node.ownerDocument || node : preferredDoc;

				// Return early if doc is invalid or already selected
				if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
					return document;
				}

				// Update global variables
				document = doc;
				docElem = document.documentElement;
				documentIsHTML = !isXML( document );

				// Support: IE 9-11, Edge
				// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
				if ( preferredDoc !== document &&
					(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

					// Support: IE 11, Edge
					if ( subWindow.addEventListener ) {
						subWindow.addEventListener( "unload", unloadHandler, false );

						// Support: IE 9 - 10 only
					} else if ( subWindow.attachEvent ) {
						subWindow.attachEvent( "onunload", unloadHandler );
					}
				}

				/* Attributes
	---------------------------------------------------------------------- */

				// Support: IE<8
				// Verify that getAttribute really returns attributes and not properties
				// (excepting IE8 booleans)
				support.attributes = assert(function( el ) {
					el.className = "i";
					return !el.getAttribute("className");
				});

				/* getElement(s)By*
	---------------------------------------------------------------------- */

				// Check if getElementsByTagName("*") returns only elements
				support.getElementsByTagName = assert(function( el ) {
					el.appendChild( document.createComment("") );
					return !el.getElementsByTagName("*").length;
				});

				// Support: IE<9
				support.getElementsByClassName = rnative.test( document.getElementsByClassName );

				// Support: IE<10
				// Check if getElementById returns elements by name
				// The broken getElementById methods don't pick up programmatically-set names,
				// so use a roundabout getElementsByName test
				support.getById = assert(function( el ) {
					docElem.appendChild( el ).id = expando;
					return !document.getElementsByName || !document.getElementsByName( expando ).length;
				});

				// ID filter and find
				if ( support.getById ) {
					Expr.filter["ID"] = function( id ) {
						var attrId = id.replace( runescape, funescape );
						return function( elem ) {
							return elem.getAttribute("id") === attrId;
						};
					};
					Expr.find["ID"] = function( id, context ) {
						if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
							var elem = context.getElementById( id );
							return elem ? [ elem ] : [];
						}
					};
				} else {
					Expr.filter["ID"] =  function( id ) {
						var attrId = id.replace( runescape, funescape );
						return function( elem ) {
							var node = typeof elem.getAttributeNode !== "undefined" &&
								elem.getAttributeNode("id");
							return node && node.value === attrId;
						};
					};

					// Support: IE 6 - 7 only
					// getElementById is not reliable as a find shortcut
					Expr.find["ID"] = function( id, context ) {
						if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
							var node, i, elems,
								elem = context.getElementById( id );

							if ( elem ) {

								// Verify the id attribute
								node = elem.getAttributeNode("id");
								if ( node && node.value === id ) {
									return [ elem ];
								}

								// Fall back on getElementsByName
								elems = context.getElementsByName( id );
								i = 0;
								while ( (elem = elems[i++]) ) {
									node = elem.getAttributeNode("id");
									if ( node && node.value === id ) {
										return [ elem ];
									}
								}
							}

							return [];
						}
					};
				}

				// Tag
				Expr.find["TAG"] = support.getElementsByTagName ?
					function( tag, context ) {
						if ( typeof context.getElementsByTagName !== "undefined" ) {
							return context.getElementsByTagName( tag );

							// DocumentFragment nodes don't have gEBTN
						} else if ( support.qsa ) {
							return context.querySelectorAll( tag );
						}
					} :

					function( tag, context ) {
						var elem,
							tmp = [],
							i = 0,
							// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
							results = context.getElementsByTagName( tag );

						// Filter out possible comments
						if ( tag === "*" ) {
							while ( (elem = results[i++]) ) {
								if ( elem.nodeType === 1 ) {
									tmp.push( elem );
								}
							}

							return tmp;
						}
						return results;
					};

				// Class
				Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
					if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
						return context.getElementsByClassName( className );
					}
				};

				/* QSA/matchesSelector
	---------------------------------------------------------------------- */

				// QSA and matchesSelector support

				// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
				rbuggyMatches = [];

				// qSa(:focus) reports false when true (Chrome 21)
				// We allow this because of a bug in IE8/9 that throws an error
				// whenever `document.activeElement` is accessed on an iframe
				// So, we allow :focus to pass through QSA all the time to avoid the IE error
				// See https://bugs.jquery.com/ticket/13378
				rbuggyQSA = [];

				if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
					// Build QSA regex
					// Regex strategy adopted from Diego Perini
					assert(function( el ) {
						// Select is set to empty string on purpose
						// This is to test IE's treatment of not explicitly
						// setting a boolean content attribute,
						// since its presence should be enough
						// https://bugs.jquery.com/ticket/12359
						docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
							"<select id='" + expando + "-\r\\' msallowcapture=''>" +
							"<option selected=''></option></select>";

						// Support: IE8, Opera 11-12.16
						// Nothing should be selected when empty strings follow ^= or $= or *=
						// The test attribute must be unknown in Opera but "safe" for WinRT
						// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
						if ( el.querySelectorAll("[msallowcapture^='']").length ) {
							rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
						}

						// Support: IE8
						// Boolean attributes and "value" are not treated correctly
						if ( !el.querySelectorAll("[selected]").length ) {
							rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
						}

						// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
						if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
							rbuggyQSA.push("~=");
						}

						// Webkit/Opera - :checked should return selected option elements
						// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
						// IE8 throws error here and will not see later tests
						if ( !el.querySelectorAll(":checked").length ) {
							rbuggyQSA.push(":checked");
						}

						// Support: Safari 8+, iOS 8+
						// https://bugs.webkit.org/show_bug.cgi?id=136851
						// In-page `selector#id sibling-combinator selector` fails
						if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
							rbuggyQSA.push(".#.+[+~]");
						}
					});

					assert(function( el ) {
						el.innerHTML = "<a href='' disabled='disabled'></a>" +
							"<select disabled='disabled'><option/></select>";

						// Support: Windows 8 Native Apps
						// The type and name attributes are restricted during .innerHTML assignment
						var input = document.createElement("input");
						input.setAttribute( "type", "hidden" );
						el.appendChild( input ).setAttribute( "name", "D" );

						// Support: IE8
						// Enforce case-sensitivity of name attribute
						if ( el.querySelectorAll("[name=d]").length ) {
							rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
						}

						// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
						// IE8 throws error here and will not see later tests
						if ( el.querySelectorAll(":enabled").length !== 2 ) {
							rbuggyQSA.push( ":enabled", ":disabled" );
						}

						// Support: IE9-11+
						// IE's :disabled selector does not pick up the children of disabled fieldsets
						docElem.appendChild( el ).disabled = true;
						if ( el.querySelectorAll(":disabled").length !== 2 ) {
							rbuggyQSA.push( ":enabled", ":disabled" );
						}

						// Opera 10-11 does not throw on post-comma invalid pseudos
						el.querySelectorAll("*,:x");
						rbuggyQSA.push(",.*:");
					});
				}

				if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
					docElem.webkitMatchesSelector ||
					docElem.mozMatchesSelector ||
					docElem.oMatchesSelector ||
					docElem.msMatchesSelector) )) ) {

					assert(function( el ) {
						// Check to see if it's possible to do matchesSelector
						// on a disconnected node (IE 9)
						support.disconnectedMatch = matches.call( el, "*" );

						// This should fail with an exception
						// Gecko does not error, returns false instead
						matches.call( el, "[s!='']:x" );
						rbuggyMatches.push( "!=", pseudos );
					});
				}

				rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
				rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

				/* Contains
	---------------------------------------------------------------------- */
				hasCompare = rnative.test( docElem.compareDocumentPosition );

				// Element contains another
				// Purposefully self-exclusive
				// As in, an element does not contain itself
				contains = hasCompare || rnative.test( docElem.contains ) ?
					function( a, b ) {
						var adown = a.nodeType === 9 ? a.documentElement : a,
							bup = b && b.parentNode;
						return a === bup || !!( bup && bup.nodeType === 1 && (
							adown.contains ?
								adown.contains( bup ) :
								a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
						));
					} :
					function( a, b ) {
						if ( b ) {
							while ( (b = b.parentNode) ) {
								if ( b === a ) {
									return true;
								}
							}
						}
						return false;
					};

				/* Sorting
	---------------------------------------------------------------------- */

				// Document order sorting
				sortOrder = hasCompare ?
					function( a, b ) {

						// Flag for duplicate removal
						if ( a === b ) {
							hasDuplicate = true;
							return 0;
						}

						// Sort on method existence if only one input has compareDocumentPosition
						var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
						if ( compare ) {
							return compare;
						}

						// Calculate position if both inputs belong to the same document
						compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
							a.compareDocumentPosition( b ) :

							// Otherwise we know they are disconnected
							1;

						// Disconnected nodes
						if ( compare & 1 ||
							(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

							// Choose the first element that is related to our preferred document
							if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
								return -1;
							}
							if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
								return 1;
							}

							// Maintain original order
							return sortInput ?
								( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
								0;
						}

						return compare & 4 ? -1 : 1;
					} :
					function( a, b ) {
						// Exit early if the nodes are identical
						if ( a === b ) {
							hasDuplicate = true;
							return 0;
						}

						var cur,
							i = 0,
							aup = a.parentNode,
							bup = b.parentNode,
							ap = [ a ],
							bp = [ b ];

						// Parentless nodes are either documents or disconnected
						if ( !aup || !bup ) {
							return a === document ? -1 :
								b === document ? 1 :
									aup ? -1 :
										bup ? 1 :
											sortInput ?
												( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
												0;

							// If the nodes are siblings, we can do a quick check
						} else if ( aup === bup ) {
							return siblingCheck( a, b );
						}

						// Otherwise we need full lists of their ancestors for comparison
						cur = a;
						while ( (cur = cur.parentNode) ) {
							ap.unshift( cur );
						}
						cur = b;
						while ( (cur = cur.parentNode) ) {
							bp.unshift( cur );
						}

						// Walk down the tree looking for a discrepancy
						while ( ap[i] === bp[i] ) {
							i++;
						}

						return i ?
							// Do a sibling check if the nodes have a common ancestor
							siblingCheck( ap[i], bp[i] ) :

							// Otherwise nodes in our document sort first
							ap[i] === preferredDoc ? -1 :
								bp[i] === preferredDoc ? 1 :
									0;
					};

				return document;
			};

			Sizzle.matches = function( expr, elements ) {
				return Sizzle( expr, null, null, elements );
			};

			Sizzle.matchesSelector = function( elem, expr ) {
				// Set document vars if needed
				if ( ( elem.ownerDocument || elem ) !== document ) {
					setDocument( elem );
				}

				if ( support.matchesSelector && documentIsHTML &&
					!nonnativeSelectorCache[ expr + " " ] &&
					( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
					( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

					try {
						var ret = matches.call( elem, expr );

						// IE 9's matchesSelector returns false on disconnected nodes
						if ( ret || support.disconnectedMatch ||
							// As well, disconnected nodes are said to be in a document
							// fragment in IE 9
							elem.document && elem.document.nodeType !== 11 ) {
							return ret;
						}
					} catch (e) {
						nonnativeSelectorCache( expr, true );
					}
				}

				return Sizzle( expr, document, null, [ elem ] ).length > 0;
			};

			Sizzle.contains = function( context, elem ) {
				// Set document vars if needed
				if ( ( context.ownerDocument || context ) !== document ) {
					setDocument( context );
				}
				return contains( context, elem );
			};

			Sizzle.attr = function( elem, name ) {
				// Set document vars if needed
				if ( ( elem.ownerDocument || elem ) !== document ) {
					setDocument( elem );
				}

				var fn = Expr.attrHandle[ name.toLowerCase() ],
					// Don't get fooled by Object.prototype properties (jQuery #13807)
					val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
						fn( elem, name, !documentIsHTML ) :
						undefined;

				return val !== undefined ?
					val :
					support.attributes || !documentIsHTML ?
						elem.getAttribute( name ) :
						(val = elem.getAttributeNode(name)) && val.specified ?
							val.value :
							null;
			};

			Sizzle.escape = function( sel ) {
				return (sel + "").replace( rcssescape, fcssescape );
			};

			Sizzle.error = function( msg ) {
				throw new Error( "Syntax error, unrecognized expression: " + msg );
			};

			/**
			 * Document sorting and removing duplicates
			 * @param {ArrayLike} results
			 */
			Sizzle.uniqueSort = function( results ) {
				var elem,
					duplicates = [],
					j = 0,
					i = 0;

				// Unless we *know* we can detect duplicates, assume their presence
				hasDuplicate = !support.detectDuplicates;
				sortInput = !support.sortStable && results.slice( 0 );
				results.sort( sortOrder );

				if ( hasDuplicate ) {
					while ( (elem = results[i++]) ) {
						if ( elem === results[ i ] ) {
							j = duplicates.push( i );
						}
					}
					while ( j-- ) {
						results.splice( duplicates[ j ], 1 );
					}
				}

				// Clear input after sorting to release objects
				// See https://github.com/jquery/sizzle/pull/225
				sortInput = null;

				return results;
			};

			/**
			 * Utility function for retrieving the text value of an array of DOM nodes
			 * @param {Array|Element} elem
			 */
			getText = Sizzle.getText = function( elem ) {
				var node,
					ret = "",
					i = 0,
					nodeType = elem.nodeType;

				if ( !nodeType ) {
					// If no nodeType, this is expected to be an array
					while ( (node = elem[i++]) ) {
						// Do not traverse comment nodes
						ret += getText( node );
					}
				} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
					// Use textContent for elements
					// innerText usage removed for consistency of new lines (jQuery #11153)
					if ( typeof elem.textContent === "string" ) {
						return elem.textContent;
					} else {
						// Traverse its children
						for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
							ret += getText( elem );
						}
					}
				} else if ( nodeType === 3 || nodeType === 4 ) {
					return elem.nodeValue;
				}
				// Do not include comment or processing instruction nodes

				return ret;
			};

			Expr = Sizzle.selectors = {

				// Can be adjusted by the user
				cacheLength: 50,

				createPseudo: markFunction,

				match: matchExpr,

				attrHandle: {},

				find: {},

				relative: {
					">": { dir: "parentNode", first: true },
					" ": { dir: "parentNode" },
					"+": { dir: "previousSibling", first: true },
					"~": { dir: "previousSibling" }
				},

				preFilter: {
					"ATTR": function( match ) {
						match[1] = match[1].replace( runescape, funescape );

						// Move the given value to match[3] whether quoted or unquoted
						match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

						if ( match[2] === "~=" ) {
							match[3] = " " + match[3] + " ";
						}

						return match.slice( 0, 4 );
					},

					"CHILD": function( match ) {
						/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
						match[1] = match[1].toLowerCase();

						if ( match[1].slice( 0, 3 ) === "nth" ) {
							// nth-* requires argument
							if ( !match[3] ) {
								Sizzle.error( match[0] );
							}

							// numeric x and y parameters for Expr.filter.CHILD
							// remember that false/true cast respectively to 0/1
							match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
							match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

							// other types prohibit arguments
						} else if ( match[3] ) {
							Sizzle.error( match[0] );
						}

						return match;
					},

					"PSEUDO": function( match ) {
						var excess,
							unquoted = !match[6] && match[2];

						if ( matchExpr["CHILD"].test( match[0] ) ) {
							return null;
						}

						// Accept quoted arguments as-is
						if ( match[3] ) {
							match[2] = match[4] || match[5] || "";

							// Strip excess characters from unquoted arguments
						} else if ( unquoted && rpseudo.test( unquoted ) &&
							// Get excess from tokenize (recursively)
							(excess = tokenize( unquoted, true )) &&
							// advance to the next closing parenthesis
							(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

							// excess is a negative index
							match[0] = match[0].slice( 0, excess );
							match[2] = unquoted.slice( 0, excess );
						}

						// Return only captures needed by the pseudo filter method (type and argument)
						return match.slice( 0, 3 );
					}
				},

				filter: {

					"TAG": function( nodeNameSelector ) {
						var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
						return nodeNameSelector === "*" ?
							function() { return true; } :
							function( elem ) {
								return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
							};
					},

					"CLASS": function( className ) {
						var pattern = classCache[ className + " " ];

						return pattern ||
							(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
							classCache( className, function( elem ) {
								return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
							});
					},

					"ATTR": function( name, operator, check ) {
						return function( elem ) {
							var result = Sizzle.attr( elem, name );

							if ( result == null ) {
								return operator === "!=";
							}
							if ( !operator ) {
								return true;
							}

							result += "";

							return operator === "=" ? result === check :
								operator === "!=" ? result !== check :
									operator === "^=" ? check && result.indexOf( check ) === 0 :
										operator === "*=" ? check && result.indexOf( check ) > -1 :
											operator === "$=" ? check && result.slice( -check.length ) === check :
												operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
													operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
														false;
						};
					},

					"CHILD": function( type, what, argument, first, last ) {
						var simple = type.slice( 0, 3 ) !== "nth",
							forward = type.slice( -4 ) !== "last",
							ofType = what === "of-type";

						return first === 1 && last === 0 ?

							// Shortcut for :nth-*(n)
							function( elem ) {
								return !!elem.parentNode;
							} :

							function( elem, context, xml ) {
								var cache, uniqueCache, outerCache, node, nodeIndex, start,
									dir = simple !== forward ? "nextSibling" : "previousSibling",
									parent = elem.parentNode,
									name = ofType && elem.nodeName.toLowerCase(),
									useCache = !xml && !ofType,
									diff = false;

								if ( parent ) {

									// :(first|last|only)-(child|of-type)
									if ( simple ) {
										while ( dir ) {
											node = elem;
											while ( (node = node[ dir ]) ) {
												if ( ofType ?
													node.nodeName.toLowerCase() === name :
													node.nodeType === 1 ) {

													return false;
												}
											}
											// Reverse direction for :only-* (if we haven't yet done so)
											start = dir = type === "only" && !start && "nextSibling";
										}
										return true;
									}

									start = [ forward ? parent.firstChild : parent.lastChild ];

									// non-xml :nth-child(...) stores cache data on `parent`
									if ( forward && useCache ) {

										// Seek `elem` from a previously-cached index

										// ...in a gzip-friendly way
										node = parent;
										outerCache = node[ expando ] || (node[ expando ] = {});

										// Support: IE <9 only
										// Defend against cloned attroperties (jQuery gh-1709)
										uniqueCache = outerCache[ node.uniqueID ] ||
											(outerCache[ node.uniqueID ] = {});

										cache = uniqueCache[ type ] || [];
										nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
										diff = nodeIndex && cache[ 2 ];
										node = nodeIndex && parent.childNodes[ nodeIndex ];

										while ( (node = ++nodeIndex && node && node[ dir ] ||

											// Fallback to seeking `elem` from the start
											(diff = nodeIndex = 0) || start.pop()) ) {

											// When found, cache indexes on `parent` and break
											if ( node.nodeType === 1 && ++diff && node === elem ) {
												uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
												break;
											}
										}

									} else {
										// Use previously-cached element index if available
										if ( useCache ) {
											// ...in a gzip-friendly way
											node = elem;
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											cache = uniqueCache[ type ] || [];
											nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
											diff = nodeIndex;
										}

										// xml :nth-child(...)
										// or :nth-last-child(...) or :nth(-last)?-of-type(...)
										if ( diff === false ) {
											// Use the same loop as above to seek `elem` from the start
											while ( (node = ++nodeIndex && node && node[ dir ] ||
												(diff = nodeIndex = 0) || start.pop()) ) {

												if ( ( ofType ?
													node.nodeName.toLowerCase() === name :
													node.nodeType === 1 ) &&
													++diff ) {

													// Cache the index of each encountered element
													if ( useCache ) {
														outerCache = node[ expando ] || (node[ expando ] = {});

														// Support: IE <9 only
														// Defend against cloned attroperties (jQuery gh-1709)
														uniqueCache = outerCache[ node.uniqueID ] ||
															(outerCache[ node.uniqueID ] = {});

														uniqueCache[ type ] = [ dirruns, diff ];
													}

													if ( node === elem ) {
														break;
													}
												}
											}
										}
									}

									// Incorporate the offset, then check against cycle size
									diff -= last;
									return diff === first || ( diff % first === 0 && diff / first >= 0 );
								}
							};
					},

					"PSEUDO": function( pseudo, argument ) {
						// pseudo-class names are case-insensitive
						// http://www.w3.org/TR/selectors/#pseudo-classes
						// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
						// Remember that setFilters inherits from pseudos
						var args,
							fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
								Sizzle.error( "unsupported pseudo: " + pseudo );

						// The user may use createPseudo to indicate that
						// arguments are needed to create the filter function
						// just as Sizzle does
						if ( fn[ expando ] ) {
							return fn( argument );
						}

						// But maintain support for old signatures
						if ( fn.length > 1 ) {
							args = [ pseudo, pseudo, "", argument ];
							return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
								markFunction(function( seed, matches ) {
									var idx,
										matched = fn( seed, argument ),
										i = matched.length;
									while ( i-- ) {
										idx = indexOf( seed, matched[i] );
										seed[ idx ] = !( matches[ idx ] = matched[i] );
									}
								}) :
								function( elem ) {
									return fn( elem, 0, args );
								};
						}

						return fn;
					}
				},

				pseudos: {
					// Potentially complex pseudos
					"not": markFunction(function( selector ) {
						// Trim the selector passed to compile
						// to avoid treating leading and trailing
						// spaces as combinators
						var input = [],
							results = [],
							matcher = compile( selector.replace( rtrim, "$1" ) );

						return matcher[ expando ] ?
							markFunction(function( seed, matches, context, xml ) {
								var elem,
									unmatched = matcher( seed, null, xml, [] ),
									i = seed.length;

								// Match elements unmatched by `matcher`
								while ( i-- ) {
									if ( (elem = unmatched[i]) ) {
										seed[i] = !(matches[i] = elem);
									}
								}
							}) :
							function( elem, context, xml ) {
								input[0] = elem;
								matcher( input, null, xml, results );
								// Don't keep the element (issue #299)
								input[0] = null;
								return !results.pop();
							};
					}),

					"has": markFunction(function( selector ) {
						return function( elem ) {
							return Sizzle( selector, elem ).length > 0;
						};
					}),

					"contains": markFunction(function( text ) {
						text = text.replace( runescape, funescape );
						return function( elem ) {
							return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
						};
					}),

					// "Whether an element is represented by a :lang() selector
					// is based solely on the element's language value
					// being equal to the identifier C,
					// or beginning with the identifier C immediately followed by "-".
					// The matching of C against the element's language value is performed case-insensitively.
					// The identifier C does not have to be a valid language name."
					// http://www.w3.org/TR/selectors/#lang-pseudo
					"lang": markFunction( function( lang ) {
						// lang value must be a valid identifier
						if ( !ridentifier.test(lang || "") ) {
							Sizzle.error( "unsupported lang: " + lang );
						}
						lang = lang.replace( runescape, funescape ).toLowerCase();
						return function( elem ) {
							var elemLang;
							do {
								if ( (elemLang = documentIsHTML ?
									elem.lang :
									elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

									elemLang = elemLang.toLowerCase();
									return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
								}
							} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
							return false;
						};
					}),

					// Miscellaneous
					"target": function( elem ) {
						var hash = window.location && window.location.hash;
						return hash && hash.slice( 1 ) === elem.id;
					},

					"root": function( elem ) {
						return elem === docElem;
					},

					"focus": function( elem ) {
						return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
					},

					// Boolean properties
					"enabled": createDisabledPseudo( false ),
					"disabled": createDisabledPseudo( true ),

					"checked": function( elem ) {
						// In CSS3, :checked should return both checked and selected elements
						// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
						var nodeName = elem.nodeName.toLowerCase();
						return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
					},

					"selected": function( elem ) {
						// Accessing this property makes selected-by-default
						// options in Safari work properly
						if ( elem.parentNode ) {
							elem.parentNode.selectedIndex;
						}

						return elem.selected === true;
					},

					// Contents
					"empty": function( elem ) {
						// http://www.w3.org/TR/selectors/#empty-pseudo
						// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
						//   but not by others (comment: 8; processing instruction: 7; etc.)
						// nodeType < 6 works because attributes (2) do not appear as children
						for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
							if ( elem.nodeType < 6 ) {
								return false;
							}
						}
						return true;
					},

					"parent": function( elem ) {
						return !Expr.pseudos["empty"]( elem );
					},

					// Element/input types
					"header": function( elem ) {
						return rheader.test( elem.nodeName );
					},

					"input": function( elem ) {
						return rinputs.test( elem.nodeName );
					},

					"button": function( elem ) {
						var name = elem.nodeName.toLowerCase();
						return name === "input" && elem.type === "button" || name === "button";
					},

					"text": function( elem ) {
						var attr;
						return elem.nodeName.toLowerCase() === "input" &&
							elem.type === "text" &&

							// Support: IE<8
							// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
							( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
					},

					// Position-in-collection
					"first": createPositionalPseudo(function() {
						return [ 0 ];
					}),

					"last": createPositionalPseudo(function( matchIndexes, length ) {
						return [ length - 1 ];
					}),

					"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
						return [ argument < 0 ? argument + length : argument ];
					}),

					"even": createPositionalPseudo(function( matchIndexes, length ) {
						var i = 0;
						for ( ; i < length; i += 2 ) {
							matchIndexes.push( i );
						}
						return matchIndexes;
					}),

					"odd": createPositionalPseudo(function( matchIndexes, length ) {
						var i = 1;
						for ( ; i < length; i += 2 ) {
							matchIndexes.push( i );
						}
						return matchIndexes;
					}),

					"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
						var i = argument < 0 ?
							argument + length :
							argument > length ?
								length :
								argument;
						for ( ; --i >= 0; ) {
							matchIndexes.push( i );
						}
						return matchIndexes;
					}),

					"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
						var i = argument < 0 ? argument + length : argument;
						for ( ; ++i < length; ) {
							matchIndexes.push( i );
						}
						return matchIndexes;
					})
				}
			};

			Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
			for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
				Expr.pseudos[ i ] = createInputPseudo( i );
			}
			for ( i in { submit: true, reset: true } ) {
				Expr.pseudos[ i ] = createButtonPseudo( i );
			}

// Easy API for creating new setFilters
			function setFilters() {}
			setFilters.prototype = Expr.filters = Expr.pseudos;
			Expr.setFilters = new setFilters();

			tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
				var matched, match, tokens, type,
					soFar, groups, preFilters,
					cached = tokenCache[ selector + " " ];

				if ( cached ) {
					return parseOnly ? 0 : cached.slice( 0 );
				}

				soFar = selector;
				groups = [];
				preFilters = Expr.preFilter;

				while ( soFar ) {

					// Comma and first run
					if ( !matched || (match = rcomma.exec( soFar )) ) {
						if ( match ) {
							// Don't consume trailing commas as valid
							soFar = soFar.slice( match[0].length ) || soFar;
						}
						groups.push( (tokens = []) );
					}

					matched = false;

					// Combinators
					if ( (match = rcombinators.exec( soFar )) ) {
						matched = match.shift();
						tokens.push({
							value: matched,
							// Cast descendant combinators to space
							type: match[0].replace( rtrim, " " )
						});
						soFar = soFar.slice( matched.length );
					}

					// Filters
					for ( type in Expr.filter ) {
						if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
							(match = preFilters[ type ]( match ))) ) {
							matched = match.shift();
							tokens.push({
								value: matched,
								type: type,
								matches: match
							});
							soFar = soFar.slice( matched.length );
						}
					}

					if ( !matched ) {
						break;
					}
				}

				// Return the length of the invalid excess
				// if we're just parsing
				// Otherwise, throw an error or return tokens
				return parseOnly ?
					soFar.length :
					soFar ?
						Sizzle.error( selector ) :
						// Cache the tokens
						tokenCache( selector, groups ).slice( 0 );
			};

			function toSelector( tokens ) {
				var i = 0,
					len = tokens.length,
					selector = "";
				for ( ; i < len; i++ ) {
					selector += tokens[i].value;
				}
				return selector;
			}

			function addCombinator( matcher, combinator, base ) {
				var dir = combinator.dir,
					skip = combinator.next,
					key = skip || dir,
					checkNonElements = base && key === "parentNode",
					doneName = done++;

				return combinator.first ?
					// Check against closest ancestor/preceding element
					function( elem, context, xml ) {
						while ( (elem = elem[ dir ]) ) {
							if ( elem.nodeType === 1 || checkNonElements ) {
								return matcher( elem, context, xml );
							}
						}
						return false;
					} :

					// Check against all ancestor/preceding elements
					function( elem, context, xml ) {
						var oldCache, uniqueCache, outerCache,
							newCache = [ dirruns, doneName ];

						// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
						if ( xml ) {
							while ( (elem = elem[ dir ]) ) {
								if ( elem.nodeType === 1 || checkNonElements ) {
									if ( matcher( elem, context, xml ) ) {
										return true;
									}
								}
							}
						} else {
							while ( (elem = elem[ dir ]) ) {
								if ( elem.nodeType === 1 || checkNonElements ) {
									outerCache = elem[ expando ] || (elem[ expando ] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

									if ( skip && skip === elem.nodeName.toLowerCase() ) {
										elem = elem[ dir ] || elem;
									} else if ( (oldCache = uniqueCache[ key ]) &&
										oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

										// Assign to newCache so results back-propagate to previous elements
										return (newCache[ 2 ] = oldCache[ 2 ]);
									} else {
										// Reuse newcache so results back-propagate to previous elements
										uniqueCache[ key ] = newCache;

										// A match means we're done; a fail means we have to keep checking
										if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
											return true;
										}
									}
								}
							}
						}
						return false;
					};
			}

			function elementMatcher( matchers ) {
				return matchers.length > 1 ?
					function( elem, context, xml ) {
						var i = matchers.length;
						while ( i-- ) {
							if ( !matchers[i]( elem, context, xml ) ) {
								return false;
							}
						}
						return true;
					} :
					matchers[0];
			}

			function multipleContexts( selector, contexts, results ) {
				var i = 0,
					len = contexts.length;
				for ( ; i < len; i++ ) {
					Sizzle( selector, contexts[i], results );
				}
				return results;
			}

			function condense( unmatched, map, filter, context, xml ) {
				var elem,
					newUnmatched = [],
					i = 0,
					len = unmatched.length,
					mapped = map != null;

				for ( ; i < len; i++ ) {
					if ( (elem = unmatched[i]) ) {
						if ( !filter || filter( elem, context, xml ) ) {
							newUnmatched.push( elem );
							if ( mapped ) {
								map.push( i );
							}
						}
					}
				}

				return newUnmatched;
			}

			function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
				if ( postFilter && !postFilter[ expando ] ) {
					postFilter = setMatcher( postFilter );
				}
				if ( postFinder && !postFinder[ expando ] ) {
					postFinder = setMatcher( postFinder, postSelector );
				}
				return markFunction(function( seed, results, context, xml ) {
					var temp, i, elem,
						preMap = [],
						postMap = [],
						preexisting = results.length,

						// Get initial elements from seed or context
						elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

						// Prefilter to get matcher input, preserving a map for seed-results synchronization
						matcherIn = preFilter && ( seed || !selector ) ?
							condense( elems, preMap, preFilter, context, xml ) :
							elems,

						matcherOut = matcher ?
							// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
							postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

								// ...intermediate processing is necessary
								[] :

								// ...otherwise use results directly
								results :
							matcherIn;

					// Find primary matches
					if ( matcher ) {
						matcher( matcherIn, matcherOut, context, xml );
					}

					// Apply postFilter
					if ( postFilter ) {
						temp = condense( matcherOut, postMap );
						postFilter( temp, [], context, xml );

						// Un-match failing elements by moving them back to matcherIn
						i = temp.length;
						while ( i-- ) {
							if ( (elem = temp[i]) ) {
								matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
							}
						}
					}

					if ( seed ) {
						if ( postFinder || preFilter ) {
							if ( postFinder ) {
								// Get the final matcherOut by condensing this intermediate into postFinder contexts
								temp = [];
								i = matcherOut.length;
								while ( i-- ) {
									if ( (elem = matcherOut[i]) ) {
										// Restore matcherIn since elem is not yet a final match
										temp.push( (matcherIn[i] = elem) );
									}
								}
								postFinder( null, (matcherOut = []), temp, xml );
							}

							// Move matched elements from seed to results to keep them synchronized
							i = matcherOut.length;
							while ( i-- ) {
								if ( (elem = matcherOut[i]) &&
									(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

									seed[temp] = !(results[temp] = elem);
								}
							}
						}

						// Add elements to results, through postFinder if defined
					} else {
						matcherOut = condense(
							matcherOut === results ?
								matcherOut.splice( preexisting, matcherOut.length ) :
								matcherOut
						);
						if ( postFinder ) {
							postFinder( null, results, matcherOut, xml );
						} else {
							push.apply( results, matcherOut );
						}
					}
				});
			}

			function matcherFromTokens( tokens ) {
				var checkContext, matcher, j,
					len = tokens.length,
					leadingRelative = Expr.relative[ tokens[0].type ],
					implicitRelative = leadingRelative || Expr.relative[" "],
					i = leadingRelative ? 1 : 0,

					// The foundational matcher ensures that elements are reachable from top-level context(s)
					matchContext = addCombinator( function( elem ) {
						return elem === checkContext;
					}, implicitRelative, true ),
					matchAnyContext = addCombinator( function( elem ) {
						return indexOf( checkContext, elem ) > -1;
					}, implicitRelative, true ),
					matchers = [ function( elem, context, xml ) {
						var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
							(checkContext = context).nodeType ?
								matchContext( elem, context, xml ) :
								matchAnyContext( elem, context, xml ) );
						// Avoid hanging onto element (issue #299)
						checkContext = null;
						return ret;
					} ];

				for ( ; i < len; i++ ) {
					if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
						matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
					} else {
						matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

						// Return special upon seeing a positional matcher
						if ( matcher[ expando ] ) {
							// Find the next relative operator (if any) for proper handling
							j = ++i;
							for ( ; j < len; j++ ) {
								if ( Expr.relative[ tokens[j].type ] ) {
									break;
								}
							}
							return setMatcher(
								i > 1 && elementMatcher( matchers ),
								i > 1 && toSelector(
								// If the preceding token was a descendant combinator, insert an implicit any-element `*`
								tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
								).replace( rtrim, "$1" ),
								matcher,
								i < j && matcherFromTokens( tokens.slice( i, j ) ),
								j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
								j < len && toSelector( tokens )
							);
						}
						matchers.push( matcher );
					}
				}

				return elementMatcher( matchers );
			}

			function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
				var bySet = setMatchers.length > 0,
					byElement = elementMatchers.length > 0,
					superMatcher = function( seed, context, xml, results, outermost ) {
						var elem, j, matcher,
							matchedCount = 0,
							i = "0",
							unmatched = seed && [],
							setMatched = [],
							contextBackup = outermostContext,
							// We must always have either seed elements or outermost context
							elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
							// Use integer dirruns iff this is the outermost matcher
							dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
							len = elems.length;

						if ( outermost ) {
							outermostContext = context === document || context || outermost;
						}

						// Add elements passing elementMatchers directly to results
						// Support: IE<9, Safari
						// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
						for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
							if ( byElement && elem ) {
								j = 0;
								if ( !context && elem.ownerDocument !== document ) {
									setDocument( elem );
									xml = !documentIsHTML;
								}
								while ( (matcher = elementMatchers[j++]) ) {
									if ( matcher( elem, context || document, xml) ) {
										results.push( elem );
										break;
									}
								}
								if ( outermost ) {
									dirruns = dirrunsUnique;
								}
							}

							// Track unmatched elements for set filters
							if ( bySet ) {
								// They will have gone through all possible matchers
								if ( (elem = !matcher && elem) ) {
									matchedCount--;
								}

								// Lengthen the array for every element, matched or not
								if ( seed ) {
									unmatched.push( elem );
								}
							}
						}

						// `i` is now the count of elements visited above, and adding it to `matchedCount`
						// makes the latter nonnegative.
						matchedCount += i;

						// Apply set filters to unmatched elements
						// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
						// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
						// no element matchers and no seed.
						// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
						// case, which will result in a "00" `matchedCount` that differs from `i` but is also
						// numerically zero.
						if ( bySet && i !== matchedCount ) {
							j = 0;
							while ( (matcher = setMatchers[j++]) ) {
								matcher( unmatched, setMatched, context, xml );
							}

							if ( seed ) {
								// Reintegrate element matches to eliminate the need for sorting
								if ( matchedCount > 0 ) {
									while ( i-- ) {
										if ( !(unmatched[i] || setMatched[i]) ) {
											setMatched[i] = pop.call( results );
										}
									}
								}

								// Discard index placeholder values to get only actual matches
								setMatched = condense( setMatched );
							}

							// Add matches to results
							push.apply( results, setMatched );

							// Seedless set matches succeeding multiple successful matchers stipulate sorting
							if ( outermost && !seed && setMatched.length > 0 &&
								( matchedCount + setMatchers.length ) > 1 ) {

								Sizzle.uniqueSort( results );
							}
						}

						// Override manipulation of globals by nested matchers
						if ( outermost ) {
							dirruns = dirrunsUnique;
							outermostContext = contextBackup;
						}

						return unmatched;
					};

				return bySet ?
					markFunction( superMatcher ) :
					superMatcher;
			}

			compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
				var i,
					setMatchers = [],
					elementMatchers = [],
					cached = compilerCache[ selector + " " ];

				if ( !cached ) {
					// Generate a function of recursive functions that can be used to check each element
					if ( !match ) {
						match = tokenize( selector );
					}
					i = match.length;
					while ( i-- ) {
						cached = matcherFromTokens( match[i] );
						if ( cached[ expando ] ) {
							setMatchers.push( cached );
						} else {
							elementMatchers.push( cached );
						}
					}

					// Cache the compiled function
					cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

					// Save selector and tokenization
					cached.selector = selector;
				}
				return cached;
			};

			/**
			 * A low-level selection function that works with Sizzle's compiled
			 *  selector functions
			 * @param {String|Function} selector A selector or a pre-compiled
			 *  selector function built with Sizzle.compile
			 * @param {Element} context
			 * @param {Array} [results]
			 * @param {Array} [seed] A set of elements to match against
			 */
			select = Sizzle.select = function( selector, context, results, seed ) {
				var i, tokens, token, type, find,
					compiled = typeof selector === "function" && selector,
					match = !seed && tokenize( (selector = compiled.selector || selector) );

				results = results || [];

				// Try to minimize operations if there is only one selector in the list and no seed
				// (the latter of which guarantees us context)
				if ( match.length === 1 ) {

					// Reduce context if the leading compound selector is an ID
					tokens = match[0] = match[0].slice( 0 );
					if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
						context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

						context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
						if ( !context ) {
							return results;

							// Precompiled matchers will still verify ancestry, so step up a level
						} else if ( compiled ) {
							context = context.parentNode;
						}

						selector = selector.slice( tokens.shift().value.length );
					}

					// Fetch a seed set for right-to-left matching
					i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
					while ( i-- ) {
						token = tokens[i];

						// Abort if we hit a combinator
						if ( Expr.relative[ (type = token.type) ] ) {
							break;
						}
						if ( (find = Expr.find[ type ]) ) {
							// Search, expanding context for leading sibling combinators
							if ( (seed = find(
								token.matches[0].replace( runescape, funescape ),
								rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
							)) ) {

								// If seed is empty or no tokens remain, we can return early
								tokens.splice( i, 1 );
								selector = seed.length && toSelector( tokens );
								if ( !selector ) {
									push.apply( results, seed );
									return results;
								}

								break;
							}
						}
					}
				}

				// Compile and execute a filtering function if one is not provided
				// Provide `match` to avoid retokenization if we modified the selector above
				( compiled || compile( selector, match ) )(
					seed,
					context,
					!documentIsHTML,
					results,
					!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
				);
				return results;
			};

// One-time assignments

// Sort stability
			support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
			support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
			setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
			support.sortDetached = assert(function( el ) {
				// Should return 1, but returns 4 (following)
				return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
			});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
			if ( !assert(function( el ) {
				el.innerHTML = "<a href='#'></a>";
				return el.firstChild.getAttribute("href") === "#" ;
			}) ) {
				addHandle( "type|href|height|width", function( elem, name, isXML ) {
					if ( !isXML ) {
						return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
					}
				});
			}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
			if ( !support.attributes || !assert(function( el ) {
				el.innerHTML = "<input/>";
				el.firstChild.setAttribute( "value", "" );
				return el.firstChild.getAttribute( "value" ) === "";
			}) ) {
				addHandle( "value", function( elem, name, isXML ) {
					if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
						return elem.defaultValue;
					}
				});
			}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
			if ( !assert(function( el ) {
				return el.getAttribute("disabled") == null;
			}) ) {
				addHandle( booleans, function( elem, name, isXML ) {
					var val;
					if ( !isXML ) {
						return elem[ name ] === true ? name.toLowerCase() :
							(val = elem.getAttributeNode( name )) && val.specified ?
								val.value :
								null;
					}
				});
			}

			return Sizzle;

		})( window );



	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;

// Deprecated
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	jQuery.escapeSelector = Sizzle.escape;




	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};


	var siblings = function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	};


	var rneedsContext = jQuery.expr.match.needsContext;



	function nodeName( elem, name ) {

		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

	};
	var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				return !!qualifier.call( elem, i, elem ) !== not;
			} );
		}

		// Single element
		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );
		}

		// Arraylike of elements (jQuery, arguments, Array)
		if ( typeof qualifier !== "string" ) {
			return jQuery.grep( elements, function( elem ) {
				return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
			} );
		}

		// Filtered directly for both simple and complex selectors
		return jQuery.filter( qualifier, elements, not );
	}

	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		if ( elems.length === 1 && elem.nodeType === 1 ) {
			return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
		}

		return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		} ) );
	};

	jQuery.fn.extend( {
		find: function( selector ) {
			var i, ret,
				len = this.length,
				self = this;

			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}

			ret = this.pushStack( [] );

			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}

			return len > 1 ? jQuery.uniqueSort( ret ) : ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
	var rootjQuery,

		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		// Shortcut simple #id case for speed
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}

			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;

			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {

					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];

				} else {
					match = rquickExpr.exec( selector );
				}

				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {

					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;

						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );

						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {

								// Properties of context are called as methods if possible
								if ( isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );

									// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}

						return this;

						// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );

						if ( elem ) {

							// Inject the element directly into the jQuery object
							this[ 0 ] = elem;
							this.length = 1;
						}
						return this;
					}

					// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );

					// HANDLE: $(expr, context)
					// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}

				// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this[ 0 ] = selector;
				this.length = 1;
				return this;

				// HANDLE: $(function)
				// Shortcut for document ready
			} else if ( isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :

					// Execute immediately if ready is not present
					selector( jQuery );
			}

			return jQuery.makeArray( selector, this );
		};

// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

// Initialize central reference
	rootjQuery = jQuery( document );


	var rparentsprev = /^(?:parents|prev(?:Until|All))/,

		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;

			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},

		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				targets = typeof selectors !== "string" && jQuery( selectors );

			// Positional selectors never match, since there's no _selection_ context
			if ( !rneedsContext.test( selectors ) ) {
				for ( ; i < l; i++ ) {
					for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

						// Always skip document fragments
						if ( cur.nodeType < 11 && ( targets ?
							targets.index( cur ) > -1 :

							// Don't pass non-elements to Sizzle
							cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

							matched.push( cur );
							break;
						}
					}
				}
			}

			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},

		// Determine the position of an element within the set
		index: function( elem ) {

			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}

			// Locate the position of the desired element
			return indexOf.call( this,

				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},

		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},

		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );

	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}

	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
			if ( typeof elem.contentDocument !== "undefined" ) {
				return elem.contentDocument;
			}

			// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
			// Treat the template element as a regular one in browsers that
			// don't support it.
			if ( nodeName( elem, "template" ) ) {
				elem = elem.content || elem;
			}

			return jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );

			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}

			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}

			if ( this.length > 1 ) {

				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}

				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}

			return this.pushStack( matched );
		};
	} );
	var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}

	/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
	jQuery.Callbacks = function( options ) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );

		var // Flag to know if list is currently firing
			firing,

			// Last fire value for non-forgettable lists
			memory,

			// Flag to know if list was already fired
			fired,

			// Flag to prevent firing
			locked,

			// Actual callback list
			list = [],

			// Queue of execution data for repeatable lists
			queue = [],

			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,

			// Fire callbacks
			fire = function() {

				// Enforce single-firing
				locked = locked || options.once;

				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {

						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {

							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}

				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}

				firing = false;

				// Clean up if we're done firing for good
				if ( locked ) {

					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];

						// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},

			// Actual Callbacks object
			self = {

				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {

						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}

						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && toType( arg ) !== "string" ) {

									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );

						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},

				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );

							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},

				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},

				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},

				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},

				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory && !firing ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},

				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},

				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},

				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};

		return self;
	};


	function Identity( v ) {
		return v;
	}
	function Thrower( ex ) {
		throw ex;
	}

	function adoptValue( value, resolve, reject, noValue ) {
		var method;

		try {

			// Check for promise aspect first to privilege synchronous behavior
			if ( value && isFunction( ( method = value.promise ) ) ) {
				method.call( value ).done( resolve ).fail( reject );

				// Other thenables
			} else if ( value && isFunction( ( method = value.then ) ) ) {
				method.call( value, resolve, reject );

				// Other non-thenables
			} else {

				// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
				// * false: [ value ].slice( 0 ) => resolve( value )
				// * true: [ value ].slice( 1 ) => resolve()
				resolve.apply( undefined, [ value ].slice( noValue ) );
			}

			// For Promises/A+, convert exceptions into rejections
			// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
			// Deferred#then to conditionally suppress rejection.
		} catch ( value ) {

			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			reject.apply( undefined, [ value ] );
		}
	}

	jQuery.extend( {

		Deferred: function( func ) {
			var tuples = [

					// action, add listener, callbacks,
					// ... .then handlers, argument index, [final state]
					[ "notify", "progress", jQuery.Callbacks( "memory" ),
						jQuery.Callbacks( "memory" ), 2 ],
					[ "resolve", "done", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 0, "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 1, "rejected" ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					"catch": function( fn ) {
						return promise.then( null, fn );
					},

					// Keep pipe for back-compat
					pipe: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;

						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {

								// Map tuples (progress, done, fail) to arguments (done, fail, progress)
								var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

								// deferred.progress(function() { bind to newDefer or newDefer.notify })
								// deferred.done(function() { bind to newDefer or newDefer.resolve })
								// deferred.fail(function() { bind to newDefer or newDefer.reject })
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},
					then: function( onFulfilled, onRejected, onProgress ) {
						var maxDepth = 0;
						function resolve( depth, deferred, handler, special ) {
							return function() {
								var that = this,
									args = arguments,
									mightThrow = function() {
										var returned, then;

										// Support: Promises/A+ section 2.3.3.3.3
										// https://promisesaplus.com/#point-59
										// Ignore double-resolution attempts
										if ( depth < maxDepth ) {
											return;
										}

										returned = handler.apply( that, args );

										// Support: Promises/A+ section 2.3.1
										// https://promisesaplus.com/#point-48
										if ( returned === deferred.promise() ) {
											throw new TypeError( "Thenable self-resolution" );
										}

										// Support: Promises/A+ sections 2.3.3.1, 3.5
										// https://promisesaplus.com/#point-54
										// https://promisesaplus.com/#point-75
										// Retrieve `then` only once
										then = returned &&

											// Support: Promises/A+ section 2.3.4
											// https://promisesaplus.com/#point-64
											// Only check objects and functions for thenability
											( typeof returned === "object" ||
												typeof returned === "function" ) &&
											returned.then;

										// Handle a returned thenable
										if ( isFunction( then ) ) {

											// Special processors (notify) just wait for resolution
											if ( special ) {
												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special )
												);

												// Normal processors (resolve) also hook into progress
											} else {

												// ...and disregard older resolution values
												maxDepth++;

												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special ),
													resolve( maxDepth, deferred, Identity,
														deferred.notifyWith )
												);
											}

											// Handle all other returned values
										} else {

											// Only substitute handlers pass on context
											// and multiple values (non-spec behavior)
											if ( handler !== Identity ) {
												that = undefined;
												args = [ returned ];
											}

											// Process the value(s)
											// Default process is resolve
											( special || deferred.resolveWith )( that, args );
										}
									},

									// Only normal processors (resolve) catch and reject exceptions
									process = special ?
										mightThrow :
										function() {
											try {
												mightThrow();
											} catch ( e ) {

												if ( jQuery.Deferred.exceptionHook ) {
													jQuery.Deferred.exceptionHook( e,
														process.stackTrace );
												}

												// Support: Promises/A+ section 2.3.3.3.4.1
												// https://promisesaplus.com/#point-61
												// Ignore post-resolution exceptions
												if ( depth + 1 >= maxDepth ) {

													// Only substitute handlers pass on context
													// and multiple values (non-spec behavior)
													if ( handler !== Thrower ) {
														that = undefined;
														args = [ e ];
													}

													deferred.rejectWith( that, args );
												}
											}
										};

								// Support: Promises/A+ section 2.3.3.3.1
								// https://promisesaplus.com/#point-57
								// Re-resolve promises immediately to dodge false rejection from
								// subsequent errors
								if ( depth ) {
									process();
								} else {

									// Call an optional hook to record the stack, in case of exception
									// since it's otherwise lost when execution goes async
									if ( jQuery.Deferred.getStackHook ) {
										process.stackTrace = jQuery.Deferred.getStackHook();
									}
									window.setTimeout( process );
								}
							};
						}

						return jQuery.Deferred( function( newDefer ) {

							// progress_handlers.add( ... )
							tuples[ 0 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									isFunction( onProgress ) ?
										onProgress :
										Identity,
									newDefer.notifyWith
								)
							);

							// fulfilled_handlers.add( ... )
							tuples[ 1 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									isFunction( onFulfilled ) ?
										onFulfilled :
										Identity
								)
							);

							// rejected_handlers.add( ... )
							tuples[ 2 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									isFunction( onRejected ) ?
										onRejected :
										Thrower
								)
							);
						} ).promise();
					},

					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};

			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 5 ];

				// promise.progress = list.add
				// promise.done = list.add
				// promise.fail = list.add
				promise[ tuple[ 1 ] ] = list.add;

				// Handle state
				if ( stateString ) {
					list.add(
						function() {

							// state = "resolved" (i.e., fulfilled)
							// state = "rejected"
							state = stateString;
						},

						// rejected_callbacks.disable
						// fulfilled_callbacks.disable
						tuples[ 3 - i ][ 2 ].disable,

						// rejected_handlers.disable
						// fulfilled_handlers.disable
						tuples[ 3 - i ][ 3 ].disable,

						// progress_callbacks.lock
						tuples[ 0 ][ 2 ].lock,

						// progress_handlers.lock
						tuples[ 0 ][ 3 ].lock
					);
				}

				// progress_handlers.fire
				// fulfilled_handlers.fire
				// rejected_handlers.fire
				list.add( tuple[ 3 ].fire );

				// deferred.notify = function() { deferred.notifyWith(...) }
				// deferred.resolve = function() { deferred.resolveWith(...) }
				// deferred.reject = function() { deferred.rejectWith(...) }
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
					return this;
				};

				// deferred.notifyWith = list.fireWith
				// deferred.resolveWith = list.fireWith
				// deferred.rejectWith = list.fireWith
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );

			// Make the deferred a promise
			promise.promise( deferred );

			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function( singleValue ) {
			var

				// count of uncompleted subordinates
				remaining = arguments.length,

				// count of unprocessed arguments
				i = remaining,

				// subordinate fulfillment data
				resolveContexts = Array( i ),
				resolveValues = slice.call( arguments ),

				// the master Deferred
				master = jQuery.Deferred(),

				// subordinate callback factory
				updateFunc = function( i ) {
					return function( value ) {
						resolveContexts[ i ] = this;
						resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( !( --remaining ) ) {
							master.resolveWith( resolveContexts, resolveValues );
						}
					};
				};

			// Single- and empty arguments are adopted like Promise.resolve
			if ( remaining <= 1 ) {
				adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
					!remaining );

				// Use .then() to unwrap secondary thenables (cf. gh-3000)
				if ( master.state() === "pending" ||
					isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

					return master.then();
				}
			}

			// Multiple arguments are aggregated like Promise.all array elements
			while ( i-- ) {
				adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
			}

			return master.promise();
		}
	} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
	var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

	jQuery.Deferred.exceptionHook = function( error, stack ) {

		// Support: IE 8 - 9 only
		// Console exists when dev tools are open, which can happen at any time
		if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
			window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
		}
	};




	jQuery.readyException = function( error ) {
		window.setTimeout( function() {
			throw error;
		} );
	};




// The deferred used on DOM ready
	var readyList = jQuery.Deferred();

	jQuery.fn.ready = function( fn ) {

		readyList
			.then( fn )

			// Wrap jQuery.readyException in a function so that the lookup
			// happens at the time of error handling instead of callback
			// registration.
			.catch( function( error ) {
				jQuery.readyException( error );
			} );

		return this;
	};

	jQuery.extend( {

		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Handle when the DOM is ready
		ready: function( wait ) {

			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );
		}
	} );

	jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
	if ( document.readyState === "complete" ||
		( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

		// Handle it asynchronously to allow scripts the opportunity to delay ready
		window.setTimeout( jQuery.ready );

	} else {

		// Use the handy event callback
		document.addEventListener( "DOMContentLoaded", completed );

		// A fallback to window.onload, that will always work
		window.addEventListener( "load", completed );
	}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;

		// Sets many values
		if ( toType( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}

			// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {

				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

					// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
							value :
							value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}

		if ( chainable ) {
			return elems;
		}

		// Gets
		if ( bulk ) {
			return fn.call( elems );
		}

		return len ? fn( elems[ 0 ], key ) : emptyGet;
	};


// Matches dashed string for camelizing
	var rmsPrefix = /^-ms-/,
		rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
	function fcamelCase( all, letter ) {
		return letter.toUpperCase();
	}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
	function camelCase( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	}
	var acceptData = function( owner ) {

		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};




	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;

	Data.prototype = {

		cache: function( owner ) {

			// Check if the owner object already has a cache
			var value = owner[ this.expando ];

			// If not, create one
			if ( !value ) {
				value = {};

				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {

					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;

						// Otherwise secure it in a non-enumerable property
						// configurable must be true to allow the property to be
						// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}

			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );

			// Handle: [ owner, key, value ] args
			// Always use camelCase key (gh-2257)
			if ( typeof data === "string" ) {
				cache[ camelCase( data ) ] = value;

				// Handle: [ owner, { properties } ] args
			} else {

				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ camelCase( prop ) ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :

				// Always use camelCase key (gh-2257)
				owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
		},
		access: function( owner, key, value ) {

			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

				return this.get( owner, key );
			}

			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i,
				cache = owner[ this.expando ];

			if ( cache === undefined ) {
				return;
			}

			if ( key !== undefined ) {

				// Support array or space separated string of keys
				if ( Array.isArray( key ) ) {

					// If key is an array of keys...
					// We always set camelCase keys, so remove that.
					key = key.map( camelCase );
				} else {
					key = camelCase( key );

					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					key = key in cache ?
						[ key ] :
						( key.match( rnothtmlwhite ) || [] );
				}

				i = key.length;

				while ( i-- ) {
					delete cache[ key[ i ] ];
				}
			}

			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

				// Support: Chrome <=35 - 45
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();

	var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;

	function getData( data ) {
		if ( data === "true" ) {
			return true;
		}

		if ( data === "false" ) {
			return false;
		}

		if ( data === "null" ) {
			return null;
		}

		// Only convert to a number if it doesn't change the string
		if ( data === +data + "" ) {
			return +data;
		}

		if ( rbrace.test( data ) ) {
			return JSON.parse( data );
		}

		return data;
	}

	function dataAttr( elem, key, data ) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );

			if ( typeof data === "string" ) {
				try {
					data = getData( data );
				} catch ( e ) {}

				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},

		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},

		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},

		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );

	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;

			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );

					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {

							// Support: IE 11 only
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}

				return data;
			}

			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}

			return access( this, function( value ) {
				var data;

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {

					// Attempt to get data from the cache
					// The key will always be camelCased in Data
					data = dataUser.get( elem, key );
					if ( data !== undefined ) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, key );
					if ( data !== undefined ) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				this.each( function() {

					// We always store the camelCased key
					dataUser.set( this, key, value );
				} );
			}, null, value, arguments.length > 1, null, true );
		},

		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );


	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;

			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );

				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || Array.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},

		dequeue: function( elem, type ) {
			type = type || "fx";

			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};

			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}

			if ( fn ) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}

			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );

	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;

			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}

			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}

			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );

					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );

					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},

		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};

			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

	var documentElement = document.documentElement;



	var isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if ( documentElement.getRootNode ) {
		isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode( composed ) === elem.ownerDocument;
		};
	}
	var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			isAttached( elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	};




	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted, scale,
			maxIterations = 20,
			currentValue = tween ?
				function() {
					return tween.cur();
				} :
				function() {
					return jQuery.css( elem, prop, "" );
				},
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

			// Starting value computation is required for potential unit mismatches
			initialInUnit = elem.nodeType &&
				( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );

		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

			// Support: Firefox <=54
			// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
			initial = initial / 2;

			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];

			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;

			while ( maxIterations-- ) {

				// Evaluate and update our best guess (doubling guesses that zero out).
				// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
				jQuery.style( elem, prop, initialInUnit + unit );
				if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
					maxIterations = 0;
				}
				initialInUnit = initialInUnit / scale;

			}

			initialInUnit = initialInUnit * 2;
			jQuery.style( elem, prop, initialInUnit + unit );

			// Make sure we update the tween properties later on
			valueParts = valueParts || [];
		}

		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;

			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}


	var defaultDisplayMap = {};

	function getDefaultDisplay( elem ) {
		var temp,
			doc = elem.ownerDocument,
			nodeName = elem.nodeName,
			display = defaultDisplayMap[ nodeName ];

		if ( display ) {
			return display;
		}

		temp = doc.body.appendChild( doc.createElement( nodeName ) );
		display = jQuery.css( temp, "display" );

		temp.parentNode.removeChild( temp );

		if ( display === "none" ) {
			display = "block";
		}
		defaultDisplayMap[ nodeName ] = display;

		return display;
	}

	function showHide( elements, show ) {
		var display, elem,
			values = [],
			index = 0,
			length = elements.length;

		// Determine new display value for elements that need to change
		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}

			display = elem.style.display;
			if ( show ) {

				// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
				// check is required in this first loop unless we have a nonempty display value (either
				// inline or about-to-be-restored)
				if ( display === "none" ) {
					values[ index ] = dataPriv.get( elem, "display" ) || null;
					if ( !values[ index ] ) {
						elem.style.display = "";
					}
				}
				if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
					values[ index ] = getDefaultDisplay( elem );
				}
			} else {
				if ( display !== "none" ) {
					values[ index ] = "none";

					// Remember what we're overwriting
					dataPriv.set( elem, "display", display );
				}
			}
		}

		// Set the display of the elements in a second loop to avoid constant reflow
		for ( index = 0; index < length; index++ ) {
			if ( values[ index ] != null ) {
				elements[ index ].style.display = values[ index ];
			}
		}

		return elements;
	}

	jQuery.fn.extend( {
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}

			return this.each( function() {
				if ( isHiddenWithinTree( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );
	var rcheckableType = ( /^(?:checkbox|radio)$/i );

	var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

	var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
	var wrapMap = {

		// Support: IE <=9 only
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

// Support: IE <=9 only
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;


	function getAll( context, tag ) {

		// Support: IE <=9 - 11 only
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret;

		if ( typeof context.getElementsByTagName !== "undefined" ) {
			ret = context.getElementsByTagName( tag || "*" );

		} else if ( typeof context.querySelectorAll !== "undefined" ) {
			ret = context.querySelectorAll( tag || "*" );

		} else {
			ret = [];
		}

		if ( tag === undefined || tag && nodeName( context, tag ) ) {
			return jQuery.merge( [ context ], ret );
		}

		return ret;
	}


// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}


	var rhtml = /<|&#?\w+;/;

	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, attached, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( toType( elem ) === "object" ) {

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

					// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

					// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {

			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}

			attached = isAttached( elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( attached ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	}


	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );

		// Support: Android 4.0 - 4.3 only
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );

		div.appendChild( input );

		// Support: Android <=4.1 only
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

		// Support: IE <=11 only
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();


	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

// Support: IE <=9 - 11+
// focus() and blur() are asynchronous, except when they are no-op.
// So expect focus to be synchronous when the element is already active,
// and blur to be synchronous when the element is not already active.
// (focus and blur are always synchronous in other supported browsers,
// this just defines when we can count on it).
	function expectSync( elem, type ) {
		return ( elem === safeActiveElement() ) === ( type === "focus" );
	}

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}

	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {

			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {

				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}

		if ( data == null && fn == null ) {

			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {

				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {

				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {

				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};

			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}

	/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
	jQuery.event = {

		global: {},

		add: function( elem, types, handler, data, selector ) {

			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Ensure that invalid selectors throw exceptions at attach time
			// Evaluate against documentElement in case elem is a non-element node (e.g., document)
			if ( selector ) {
				jQuery.find.matchesSelector( documentElement, selector );
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {

					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );

				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}

				if ( special.add ) {
					special.add.call( elem, handleObj );

					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}

		},

		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {

			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}

				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];

					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );

						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

						jQuery.removeEvent( elem, type, elemData.handle );
					}

					delete events[ type ];
				}
			}

			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},

		dispatch: function( nativeEvent ) {

			// Make a writable jQuery.Event from the native event object
			var event = jQuery.event.fix( nativeEvent );

			var i, j, ret, matched, handleObj, handlerQueue,
				args = new Array( arguments.length ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;

			for ( i = 1; i < arguments.length; i++ ) {
				args[ i ] = arguments[ i ];
			}

			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;

				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

					// If the event is namespaced, then each handler is only invoked if it is
					// specially universal or its namespaces are a superset of the event's.
					if ( !event.rnamespace || handleObj.namespace === false ||
						event.rnamespace.test( handleObj.namespace ) ) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );

						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}

			return event.result;
		},

		handlers: function( event, handlers ) {
			var i, handleObj, sel, matchedHandlers, matchedSelectors,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;

			// Find delegate handlers
			if ( delegateCount &&

				// Support: IE <=9
				// Black-hole SVG <use> instance trees (trac-13180)
				cur.nodeType &&

				// Support: Firefox <=42
				// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
				// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
				// Support: IE 11 only
				// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
				!( event.type === "click" && event.button >= 1 ) ) {

				for ( ; cur !== this; cur = cur.parentNode || this ) {

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
						matchedHandlers = [];
						matchedSelectors = {};
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if ( matchedSelectors[ sel ] === undefined ) {
								matchedSelectors[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matchedSelectors[ sel ] ) {
								matchedHandlers.push( handleObj );
							}
						}
						if ( matchedHandlers.length ) {
							handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			cur = this;
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
			}

			return handlerQueue;
		},

		addProp: function( name, hook ) {
			Object.defineProperty( jQuery.Event.prototype, name, {
				enumerable: true,
				configurable: true,

				get: isFunction( hook ) ?
					function() {
						if ( this.originalEvent ) {
							return hook( this.originalEvent );
						}
					} :
					function() {
						if ( this.originalEvent ) {
							return this.originalEvent[ name ];
						}
					},

				set: function( value ) {
					Object.defineProperty( this, name, {
						enumerable: true,
						configurable: true,
						writable: true,
						value: value
					} );
				}
			} );
		},

		fix: function( originalEvent ) {
			return originalEvent[ jQuery.expando ] ?
				originalEvent :
				new jQuery.Event( originalEvent );
		},

		special: {
			load: {

				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			click: {

				// Utilize native event to ensure correct state for checkable inputs
				setup: function( data ) {

					// For mutual compressibility with _default, replace `this` access with a local var.
					// `|| data` is dead code meant only to preserve the variable through minification.
					var el = this || data;

					// Claim the first handler
					if ( rcheckableType.test( el.type ) &&
						el.click && nodeName( el, "input" ) ) {

						// dataPriv.set( el, "click", ... )
						leverageNative( el, "click", returnTrue );
					}

					// Return false to allow normal processing in the caller
					return false;
				},
				trigger: function( data ) {

					// For mutual compressibility with _default, replace `this` access with a local var.
					// `|| data` is dead code meant only to preserve the variable through minification.
					var el = this || data;

					// Force setup before triggering a click
					if ( rcheckableType.test( el.type ) &&
						el.click && nodeName( el, "input" ) ) {

						leverageNative( el, "click" );
					}

					// Return non-false to allow normal event-path propagation
					return true;
				},

				// For cross-browser consistency, suppress native .click() on links
				// Also prevent it if we're currently inside a leveraged native-event stack
				_default: function( event ) {
					var target = event.target;
					return rcheckableType.test( target.type ) &&
						target.click && nodeName( target, "input" ) &&
						dataPriv.get( target, "click" ) ||
						nodeName( target, "a" );
				}
			},

			beforeunload: {
				postDispatch: function( event ) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
	function leverageNative( el, type, expectSync ) {

		// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
		if ( !expectSync ) {
			if ( dataPriv.get( el, type ) === undefined ) {
				jQuery.event.add( el, type, returnTrue );
			}
			return;
		}

		// Register the controller as a special universal handler for all event namespaces
		dataPriv.set( el, type, false );
		jQuery.event.add( el, type, {
			namespace: false,
			handler: function( event ) {
				var notAsync, result,
					saved = dataPriv.get( this, type );

				if ( ( event.isTrigger & 1 ) && this[ type ] ) {

					// Interrupt processing of the outer synthetic .trigger()ed event
					// Saved data should be false in such cases, but might be a leftover capture object
					// from an async native handler (gh-4350)
					if ( !saved.length ) {

						// Store arguments for use when handling the inner native event
						// There will always be at least one argument (an event object), so this array
						// will not be confused with a leftover capture object.
						saved = slice.call( arguments );
						dataPriv.set( this, type, saved );

						// Trigger the native event and capture its result
						// Support: IE <=9 - 11+
						// focus() and blur() are asynchronous
						notAsync = expectSync( this, type );
						this[ type ]();
						result = dataPriv.get( this, type );
						if ( saved !== result || notAsync ) {
							dataPriv.set( this, type, false );
						} else {
							result = {};
						}
						if ( saved !== result ) {

							// Cancel the outer synthetic event
							event.stopImmediatePropagation();
							event.preventDefault();
							return result.value;
						}

						// If this is an inner synthetic event for an event with a bubbling surrogate
						// (focus or blur), assume that the surrogate already propagated from triggering the
						// native event and prevent that from happening again here.
						// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
						// bubbling surrogate propagates *after* the non-bubbling base), but that seems
						// less bad than duplication.
					} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
						event.stopPropagation();
					}

					// If this is a native event triggered above, everything is now in order
					// Fire an inner synthetic event with the original arguments
				} else if ( saved.length ) {

					// ...and capture the result
					dataPriv.set( this, type, {
						value: jQuery.event.trigger(

							// Support: IE <=9 - 11+
							// Extend with the prototype to reset the above stopImmediatePropagation()
							jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
							saved.slice( 1 ),
							this
						)
					} );

					// Abort handling of the native event
					event.stopImmediatePropagation();
				}
			}
		} );
	}

	jQuery.removeEvent = function( elem, type, handle ) {

		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};

	jQuery.Event = function( src, props ) {

		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}

		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
			src.defaultPrevented === undefined &&

			// Support: Android <=2.3 only
			src.returnValue === false ?
				returnTrue :
				returnFalse;

			// Create target properties
			// Support: Safari <=6 - 7 only
			// Target should not be a text node (#504, #13143)
			this.target = ( src.target && src.target.nodeType === 3 ) ?
				src.target.parentNode :
				src.target;

			this.currentTarget = src.currentTarget;
			this.relatedTarget = src.relatedTarget;

			// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || Date.now();

		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
		isSimulated: false,

		preventDefault: function() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if ( e && !this.isSimulated ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if ( e && !this.isSimulated ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if ( e && !this.isSimulated ) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

// Includes all common event props including KeyEvent and MouseEvent specific props
	jQuery.each( {
		altKey: true,
		bubbles: true,
		cancelable: true,
		changedTouches: true,
		ctrlKey: true,
		detail: true,
		eventPhase: true,
		metaKey: true,
		pageX: true,
		pageY: true,
		shiftKey: true,
		view: true,
		"char": true,
		code: true,
		charCode: true,
		key: true,
		keyCode: true,
		button: true,
		buttons: true,
		clientX: true,
		clientY: true,
		offsetX: true,
		offsetY: true,
		pointerId: true,
		pointerType: true,
		screenX: true,
		screenY: true,
		targetTouches: true,
		toElement: true,
		touches: true,

		which: function( event ) {
			var button = event.button;

			// Add which for key events
			if ( event.which == null && rkeyEvent.test( event.type ) ) {
				return event.charCode != null ? event.charCode : event.keyCode;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
				if ( button & 1 ) {
					return 1;
				}

				if ( button & 2 ) {
					return 3;
				}

				if ( button & 4 ) {
					return 2;
				}

				return 0;
			}

			return event.which;
		}
	}, jQuery.event.addProp );

	jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
		jQuery.event.special[ type ] = {

			// Utilize native event if possible so blur/focus sequence is correct
			setup: function() {

				// Claim the first handler
				// dataPriv.set( this, "focus", ... )
				// dataPriv.set( this, "blur", ... )
				leverageNative( this, type, expectSync );

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function() {

				// Force setup before trigger
				leverageNative( this, type );

				// Return non-false to allow normal event-path propagation
				return true;
			},

			delegateType: delegateType
		};
	} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,

			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;

				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );

	jQuery.fn.extend( {

		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {

				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {

				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {

				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );


	var

		/* eslint-disable max-len */

		// See https://github.com/eslint/eslint/issues/3229
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

		/* eslint-enable */

		// Support: IE <=10 - 11, Edge 12 - 13 only
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,

		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
	function manipulationTarget( elem, content ) {
		if ( nodeName( elem, "table" ) &&
			nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

			return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
		}

		return elem;
	}

// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
			elem.type = elem.type.slice( 5 );
		} else {
			elem.removeAttribute( "type" );
		}

		return elem;
	}

	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if ( dest.nodeType !== 1 ) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;

			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}

		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );

			dataUser.set( dest, udataCur );
		}
	}

// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;

			// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}

	function domManip( collection, args, callback, ignored ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			valueIsFunction = isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( valueIsFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}

		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {

							// Support: Android <=4.0 only, PhantomJS 1 only
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( collection[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {

							if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl && !node.noModule ) {
									jQuery._evalUrl( node.src, {
										nonce: node.nonce || node.getAttribute( "nonce" )
									} );
								}
							} else {
								DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
							}
						}
					}
				}
			}
		}

		return collection;
	}

	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;

		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}

			if ( node.parentNode ) {
				if ( keepData && isAttached( node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}

		return elem;
	}

	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},

		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = isAttached( elem );

			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

				// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}

			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );

					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}

			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}

			// Return the cloned set
			return clone;
		},

		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;

			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );

									// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );

	jQuery.fn.extend( {
		detach: function( selector ) {
			return remove( this, selector, true );
		},

		remove: function( selector ) {
			return remove( this, selector );
		},

		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},

		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},

		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},

		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},

		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},

		empty: function() {
			var elem,
				i = 0;

			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {

					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},

		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;

				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

					value = jQuery.htmlPrefilter( value );

					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};

							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}

						elem = 0;

						// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}

				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},

		replaceWith: function() {
			var ignored = [];

			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;

				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}

				// Force callback invocation
			}, ignored );
		}
	} );

	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;

			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );

				// Support: Android <=4.0 only, PhantomJS 1 only
				// .get() because push.apply(_, arraylike) throws on ancient WebKit
				push.apply( ret, elems.get() );
			}

			return this.pushStack( ret );
		};
	} );
	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

	var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

	var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



	( function() {

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {

			// This is a singleton, we need to execute it only once
			if ( !div ) {
				return;
			}

			container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
				"margin-top:1px;padding:0;border:0";
			div.style.cssText =
				"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
				"margin:auto;border:1px;padding:1px;" +
				"width:60%;top:1%";
			documentElement.appendChild( container ).appendChild( div );

			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";

			// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
			reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

			// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
			// Some styles come back with percentage values, even though they shouldn't
			div.style.right = "60%";
			pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

			// Support: IE 9 - 11 only
			// Detect misreporting of content dimensions for box-sizing:border-box elements
			boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

			// Support: IE 9 only
			// Detect overflow:scroll screwiness (gh-3699)
			// Support: Chrome <=64
			// Don't get tricked when zoom affects offsetWidth (gh-4029)
			div.style.position = "absolute";
			scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

			documentElement.removeChild( container );

			// Nullify the div so it wouldn't be stored in the memory and
			// it will also be a sign that checks already performed
			div = null;
		}

		function roundPixelMeasures( measure ) {
			return Math.round( parseFloat( measure ) );
		}

		var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
			reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );

		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}

		// Support: IE <=9 - 11 only
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		jQuery.extend( support, {
			boxSizingReliable: function() {
				computeStyleTests();
				return boxSizingReliableVal;
			},
			pixelBoxStyles: function() {
				computeStyleTests();
				return pixelBoxStylesVal;
			},
			pixelPosition: function() {
				computeStyleTests();
				return pixelPositionVal;
			},
			reliableMarginLeft: function() {
				computeStyleTests();
				return reliableMarginLeftVal;
			},
			scrollboxSize: function() {
				computeStyleTests();
				return scrollboxSizeVal;
			}
		} );
	} )();


	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,

			// Support: Firefox 51+
			// Retrieving style before computed somehow
			// fixes an issue with getting wrong values
			// on detached elements
			style = elem.style;

		computed = computed || getStyles( elem );

		// getPropertyValue is needed for:
		//   .css('filter') (IE 9 only, #12537)
		//   .css('--customProperty) (#3144)
		if ( computed ) {
			ret = computed.getPropertyValue( name ) || computed[ name ];

			if ( ret === "" && !isAttached( elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// https://drafts.csswg.org/cssom/#resolved-values
			if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?

			// Support: IE <=9 - 11 only
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}


	function addGetHookIf( conditionFn, hookFn ) {

		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {

					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}


	var cssPrefixes = [ "Webkit", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style,
		vendorProps = {};

// Return a vendor-prefixed property or undefined
	function vendorPropName( name ) {

		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;

		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
	function finalPropName( name ) {
		var f = jQuery.cssProps[ name ] || vendorProps[ name ];

		if ( f ) {
			return f;
		}
		if ( name in emptyStyle ) {
			return name;
		}
		return vendorProps[ name ] = vendorPropName( name ) || name;
	}


	var

		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		rcustomProp = /^--/,
		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		};

	function setPositiveNumber( elem, value, subtract ) {

		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?

			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}

	function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
		var i = dimension === "width" ? 1 : 0,
			extra = 0,
			delta = 0;

		// Adjustment may not be necessary
		if ( box === ( isBorderBox ? "border" : "content" ) ) {
			return 0;
		}

		for ( ; i < 4; i += 2 ) {

			// Both box models exclude margin
			if ( box === "margin" ) {
				delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
			}

			// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
			if ( !isBorderBox ) {

				// Add padding
				delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

				// For "border" or "margin", add border
				if ( box !== "padding" ) {
					delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

					// But still keep track of it otherwise
				} else {
					extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}

				// If we get here with a border-box (content + padding + border), we're seeking "content" or
				// "padding" or "margin"
			} else {

				// For "content", subtract padding
				if ( box === "content" ) {
					delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}

				// For "content" or "padding", subtract border
				if ( box !== "margin" ) {
					delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}

		// Account for positive content-box scroll gutter when requested by providing computedVal
		if ( !isBorderBox && computedVal >= 0 ) {

			// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
			// Assuming integer scroll gutter, subtract the rest and round down
			delta += Math.max( 0, Math.ceil(
				elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
				computedVal -
				delta -
				extra -
				0.5

				// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
				// Use an explicit zero to avoid NaN (gh-3964)
			) ) || 0;
		}

		return delta;
	}

	function getWidthOrHeight( elem, dimension, extra ) {

		// Start with computed style
		var styles = getStyles( elem ),

			// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
			// Fake content-box until we know it's needed to know the true value.
			boxSizingNeeded = !support.boxSizingReliable() || extra,
			isBorderBox = boxSizingNeeded &&
				jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
			valueIsBorderBox = isBorderBox,

			val = curCSS( elem, dimension, styles ),
			offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

		// Support: Firefox <=54
		// Return a confounding non-pixel value or feign ignorance, as appropriate.
		if ( rnumnonpx.test( val ) ) {
			if ( !extra ) {
				return val;
			}
			val = "auto";
		}


		// Fall back to offsetWidth/offsetHeight when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		// Support: Android <=4.1 - 4.3 only
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
		// Support: IE 9-11 only
		// Also use offsetWidth/offsetHeight for when box sizing is unreliable
		// We use getClientRects() to check for hidden/disconnected.
		// In those cases, the computed value can be trusted to be border-box
		if ( ( !support.boxSizingReliable() && isBorderBox ||
			val === "auto" ||
			!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&
			elem.getClientRects().length ) {

			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

			// Where available, offsetWidth/offsetHeight approximate border box dimensions.
			// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
			// retrieved value as a content box dimension.
			valueIsBorderBox = offsetProp in elem;
			if ( valueIsBorderBox ) {
				val = elem[ offsetProp ];
			}
		}

		// Normalize "" and auto
		val = parseFloat( val ) || 0;

		// Adjust for the element's box model
		return ( val +
			boxModelAdjustment(
				elem,
				dimension,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles,

				// Provide the current computed size to request scroll gutter calculation (gh-3589)
				val
			)
		) + "px";
	}

	jQuery.extend( {

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {

						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"gridArea": true,
			"gridColumn": true,
			"gridColumnEnd": true,
			"gridColumnStart": true,
			"gridRow": true,
			"gridRowEnd": true,
			"gridRowStart": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {},

		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {

			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}

			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = camelCase( name ),
				isCustomProp = rcustomProp.test( name ),
				style = elem.style;

			// Make sure that we're working with the right name. We don't
			// want to query the value if it is a CSS custom property
			// since they are user-defined.
			if ( !isCustomProp ) {
				name = finalPropName( origName );
			}

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;

				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );

					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}

				// If a number was passed in, add the unit (except for certain CSS properties)
				// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
				// "px" to a few hardcoded values.
				if ( type === "number" && !isCustomProp ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}

				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {

					if ( isCustomProp ) {
						style.setProperty( name, value );
					} else {
						style[ name ] = value;
					}
				}

			} else {

				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

					return ret;
				}

				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},

		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = camelCase( name ),
				isCustomProp = rcustomProp.test( name );

			// Make sure that we're working with the right name. We don't
			// want to modify the value if it is a CSS custom property
			// since they are user-defined.
			if ( !isCustomProp ) {
				name = finalPropName( origName );
			}

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}

			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}

			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}

			return val;
		}
	} );

	jQuery.each( [ "height", "width" ], function( i, dimension ) {
		jQuery.cssHooks[ dimension ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
				}
			},

			set: function( elem, value, extra ) {
				var matches,
					styles = getStyles( elem ),

					// Only read styles.position if the test has a chance to fail
					// to avoid forcing a reflow.
					scrollboxSizeBuggy = !support.scrollboxSize() &&
						styles.position === "absolute",

					// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
					boxSizingNeeded = scrollboxSizeBuggy || extra,
					isBorderBox = boxSizingNeeded &&
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					subtract = extra ?
						boxModelAdjustment(
							elem,
							dimension,
							extra,
							isBorderBox,
							styles
						) :
						0;

				// Account for unreliable border-box dimensions by comparing offset* to computed and
				// faking a content-box to get border and padding (gh-3699)
				if ( isBorderBox && scrollboxSizeBuggy ) {
					subtract -= Math.ceil(
						elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
						parseFloat( styles[ dimension ] ) -
						boxModelAdjustment( elem, dimension, "border", false, styles ) -
						0.5
					);
				}

				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {

					elem.style[ dimension ] = value;
					value = jQuery.css( elem, dimension );
				}

				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );

	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
			}
		}
	);

// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},

					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];

				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}

				return expanded;
			}
		};

		if ( prefix !== "margin" ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );

	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;

				if ( Array.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;

					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}

					return map;
				}

				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		}
	} );


	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];

			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];

			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;

			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}

			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;

				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );

				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {

				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 && (
					jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
	jQuery.fx.step = {};




	var
		fxNow, inProgress,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;

	function schedule() {
		if ( inProgress ) {
			if ( document.hidden === false && window.requestAnimationFrame ) {
				window.requestAnimationFrame( schedule );
			} else {
				window.setTimeout( schedule, jQuery.fx.interval );
			}

			jQuery.fx.tick();
		}
	}

// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = Date.now() );
	}

// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}

		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter( elem, props, opts ) {
		var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
			isBox = "width" in props || "height" in props,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHiddenWithinTree( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );

		// Queue-skipping animations hijack the fx hooks
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always( function() {

				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}

		// Detect show/hide animations
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.test( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {

					// Pretend to be hidden if this is a "show" and
					// there is still data from a stopped show/hide
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;

						// Ignore all other no-op show/hide data
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
			}
		}

		// Bail out if this is a no-op like .hide().hide()
		propTween = !jQuery.isEmptyObject( props );
		if ( !propTween && jQuery.isEmptyObject( orig ) ) {
			return;
		}

		// Restrict "overflow" and "display" styles during box animations
		if ( isBox && elem.nodeType === 1 ) {

			// Support: IE <=9 - 11, Edge 12 - 15
			// Record all 3 overflow attributes because IE does not infer the shorthand
			// from identically-valued overflowX and overflowY and Edge just mirrors
			// the overflowX value there.
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

			// Identify a display type, preferring old show/hide data over the CSS cascade
			restoreDisplay = dataShow && dataShow.display;
			if ( restoreDisplay == null ) {
				restoreDisplay = dataPriv.get( elem, "display" );
			}
			display = jQuery.css( elem, "display" );
			if ( display === "none" ) {
				if ( restoreDisplay ) {
					display = restoreDisplay;
				} else {

					// Get nonempty value(s) by temporarily forcing visibility
					showHide( [ elem ], true );
					restoreDisplay = elem.style.display || restoreDisplay;
					display = jQuery.css( elem, "display" );
					showHide( [ elem ] );
				}
			}

			// Animate inline elements as inline-block
			if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
				if ( jQuery.css( elem, "float" ) === "none" ) {

					// Restore the original display value at the end of pure show/hide animations
					if ( !propTween ) {
						anim.done( function() {
							style.display = restoreDisplay;
						} );
						if ( restoreDisplay == null ) {
							display = style.display;
							restoreDisplay = display === "none" ? "" : display;
						}
					}
					style.display = "inline-block";
				}
			}
		}

		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}

		// Implement show/hide animations
		propTween = false;
		for ( prop in orig ) {

			// General show/hide setup for this element animation
			if ( !propTween ) {
				if ( dataShow ) {
					if ( "hidden" in dataShow ) {
						hidden = dataShow.hidden;
					}
				} else {
					dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
				}

				// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
				if ( toggle ) {
					dataShow.hidden = !hidden;
				}

				// Show elements before animating them
				if ( hidden ) {
					showHide( [ elem ], true );
				}

				/* eslint-disable no-loop-func */

				anim.done( function() {

					/* eslint-enable no-loop-func */

					// The final step of a "hide" animation is actually hiding the element
					if ( !hidden ) {
						showHide( [ elem ] );
					}
					dataPriv.remove( elem, "fxshow" );
					for ( prop in orig ) {
						jQuery.style( elem, prop, orig[ prop ] );
					}
				} );
			}

			// Per-property setup
			propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = propTween.start;
				if ( hidden ) {
					propTween.end = propTween.start;
					propTween.start = 0;
				}
			}
		}
	}

	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( Array.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}

			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}

			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}

	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {

				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

					// Support: Android 2.3 only
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;

				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( percent );
				}

				deferred.notifyWith( elem, [ animation, percent, remaining ] );

				// If there's more to do, yield
				if ( percent < 1 && length ) {
					return remaining;
				}

				// If this was an empty animation, synthesize a final progress notification
				if ( !length ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
				}

				// Resolve the animation and report its conclusion
				deferred.resolveWith( elem, [ animation ] );
				return false;
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,

						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length; index++ ) {
						animation.tweens[ index ].run( 1 );
					}

					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;

		propFilter( props, animation.opts.specialEasing );

		for ( ; index < length; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						result.stop.bind( result );
				}
				return result;
			}
		}

		jQuery.map( props, createTween, animation );

		if ( isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}

		// Attach callbacks from options
		animation
			.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );

		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);

		return animation;
	}

	jQuery.Animation = jQuery.extend( Animation, {

		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},

		tweener: function( props, callback ) {
			if ( isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnothtmlwhite );
			}

			var prop,
				index = 0,
				length = props.length;

			for ( ; index < length; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},

		prefilters: [ defaultPrefilter ],

		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );

	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !isFunction( easing ) && easing
		};

		// Go to the end state if fx are off
		if ( jQuery.fx.off ) {
			opt.duration = 0;

		} else {
			if ( typeof opt.duration !== "number" ) {
				if ( opt.duration in jQuery.fx.speeds ) {
					opt.duration = jQuery.fx.speeds[ opt.duration ];

				} else {
					opt.duration = jQuery.fx.speeds._default;
				}
			}
		}

		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function() {
			if ( isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};

		return opt;
	};

	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {

			// Show any hidden elements after setting opacity to 0
			return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {

					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );

					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
			doAnimation.finish = doAnimation;

			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};

			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}

			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );

				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}

				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {

						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue( this, type, [] );

				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}

				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}

				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}

				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );

	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );

// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );

	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;

		fxNow = Date.now();

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];

			// Run the timer and safely remove it when done (allowing for external removal)
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		jQuery.fx.start();
	};

	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( inProgress ) {
			return;
		}

		inProgress = true;
		schedule();
	};

	jQuery.fx.stop = function() {
		inProgress = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		// Default speed
		_default: 400
	};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};


	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );

		input.type = "checkbox";

		// Support: Android <=4.3 only
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE <=11 only
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: IE <=11 only
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();


	var boolHook,
		attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},

		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );

	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}

			// Attribute hooks are determined by the lowercase version
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}

			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}

				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				elem.setAttribute( name, value + "" );
				return value;
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},

		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},

		removeAttr: function( elem, value ) {
			var name,
				i = 0,

				// Attribute names can contain non-HTML whitespace characters
				// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
				attrNames = value && value.match( rnothtmlwhite );

			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					elem.removeAttribute( name );
				}
			}
		}
	} );

// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {

				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};

	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;

		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle,
				lowercaseName = name.toLowerCase();

			if ( !isXML ) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ lowercaseName ];
				attrHandle[ lowercaseName ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					lowercaseName :
					null;
				attrHandle[ lowercaseName ] = handle;
			}
			return ret;
		};
	} );




	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},

		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );

	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}

			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				return ( elem[ name ] = value );
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			return elem[ name ];
		},

		propHooks: {
			tabIndex: {
				get: function( elem ) {

					// Support: IE <=9 - 11 only
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );

					if ( tabindex ) {
						return parseInt( tabindex, 10 );
					}

					if (
						rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) &&
						elem.href
					) {
						return 0;
					}

					return -1;
				}
			}
		},

		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function( elem ) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if ( parent ) {
					parent.selectedIndex;

					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}

	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}

	function classesToArray( value ) {
		if ( Array.isArray( value ) ) {
			return value;
		}
		if ( typeof value === "string" ) {
			return value.match( rnothtmlwhite ) || [];
		}
		return [];
	}

	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			classes = classesToArray( value );

			if ( classes.length ) {
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}

			classes = classesToArray( value );

			if ( classes.length ) {
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );

					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {

							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		toggleClass: function( value, stateVal ) {
			var type = typeof value,
				isValidValue = type === "string" || Array.isArray( value );

			if ( typeof stateVal === "boolean" && isValidValue ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}

			if ( isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}

			return this.each( function() {
				var className, i, self, classNames;

				if ( isValidValue ) {

					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = classesToArray( value );

					while ( ( className = classNames[ i++ ] ) ) {

						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}

					// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {

						// Store className if set
						dataPriv.set( this, "__className__", className );
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
								"" :
								dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},

		hasClass: function( selector ) {
			var className, elem,
				i = 0;

			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
				}
			}

			return false;
		}
	} );




	var rreturn = /\r/g;

	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, valueIsFunction,
				elem = this[ 0 ];

			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];

					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}

					ret = elem.value;

					// Handle most common string cases
					if ( typeof ret === "string" ) {
						return ret.replace( rreturn, "" );
					}

					// Handle cases where value is null/undef or number
					return ret == null ? "" : ret;
				}

				return;
			}

			valueIsFunction = isFunction( value );

			return this.each( function( i ) {
				var val;

				if ( this.nodeType !== 1 ) {
					return;
				}

				if ( valueIsFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";

				} else if ( typeof val === "number" ) {
					val += "";

				} else if ( Array.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}

				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );

	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {

					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :

						// Support: IE <=10 - 11 only
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						stripAndCollapse( jQuery.text( elem ) );
				}
			},
			select: {
				get: function( elem ) {
					var value, option, i,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one",
						values = one ? null : [],
						max = one ? index + 1 : options.length;

					if ( index < 0 ) {
						i = max;

					} else {
						i = one ? index : 0;
					}

					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];

						// Support: IE <=9 only
						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

							// Get the specific value for the option
							value = jQuery( option ).val();

							// We don't need an array for one selects
							if ( one ) {
								return value;
							}

							// Multi-Selects return an array
							values.push( value );
						}
					}

					return values;
				},

				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;

					while ( i-- ) {
						option = options[ i ];

						/* eslint-disable no-cond-assign */

						if ( option.selected =
							jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}

						/* eslint-enable no-cond-assign */
					}

					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );

// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( Array.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );




// Return jQuery for attributes-only inclusion


	support.focusin = "onfocusin" in window;


	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
		stopPropagationCallback = function( e ) {
			e.stopPropagation();
		};

	jQuery.extend( jQuery.event, {

		trigger: function( event, data, elem, onlyHandlers ) {

			var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

			cur = lastElement = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}

			if ( type.indexOf( "." ) > -1 ) {

				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );

			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
				lastElement = cur;
				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;

				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}

				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {

				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {

					// Call a native DOM method on the target with the same name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];

						if ( tmp ) {
							elem[ ontype ] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;

						if ( event.isPropagationStopped() ) {
							lastElement.addEventListener( type, stopPropagationCallback );
						}

						elem[ type ]();

						if ( event.isPropagationStopped() ) {
							lastElement.removeEventListener( type, stopPropagationCallback );
						}

						jQuery.event.triggered = undefined;

						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		// Piggyback on a donor event to simulate a different one
		// Used only for `focus(in | out)` events
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true
				}
			);

			jQuery.event.trigger( e, null, elem );
		}

	} );

	jQuery.fn.extend( {

		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};

			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );

					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;

					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );

					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;

	var nonce = Date.now();

	var rquery = ( /\?/ );



// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}

		// Support: IE 9 - 11 only
		// IE throws on parseFromString with invalid input.
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}

		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};


	var
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams( prefix, obj, traditional, add ) {
		var name;

		if ( Array.isArray( obj ) ) {

			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {

					// Treat each array item as a scalar.
					add( prefix, v );

				} else {

					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );

		} else if ( !traditional && toType( obj ) === "object" ) {

			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}

		} else {

			// Serialize scalar item.
			add( prefix, obj );
		}
	}

// Serialize an array of form elements or a set of
// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, valueOrFunction ) {

				// If value is a function, invoke it and use its return value
				var value = isFunction( valueOrFunction ) ?
					valueOrFunction() :
					valueOrFunction;

				s[ s.length ] = encodeURIComponent( key ) + "=" +
					encodeURIComponent( value == null ? "" : value );
			};

		if ( a == null ) {
			return "";
		}

		// If an array was passed in, assume that it is an array of form elements.
		if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );

		} else {

			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" );
	};

	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {

				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
				.filter( function() {
					var type = this.type;

					// Use .is( ":disabled" ) so that fieldset[disabled] works
					return this.name && !jQuery( this ).is( ":disabled" ) &&
						rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
						( this.checked || !rcheckableType.test( type ) );
				} )
				.map( function( i, elem ) {
					var val = jQuery( this ).val();

					if ( val == null ) {
						return null;
					}

					if ( Array.isArray( val ) ) {
						return jQuery.map( val, function( val ) {
							return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
						} );
					}

					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} ).get();
		}
	} );


	var
		r20 = /%20/g,
		rhash = /#.*$/,
		rantiCache = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,

		/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
		prefilters = {},

		/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
		transports = {},

		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),

		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {

		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {

			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

			if ( isFunction( func ) ) {

				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {

					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

						// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}

// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

		var inspected = {},
			seekingTransport = ( structure === transports );

		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}

		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}

		return target;
	}

	/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
	function ajaxHandleResponses( s, jqXHR, responses ) {

		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}

		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {

			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}

			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}

	/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},

			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while ( current ) {

			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}

			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}

			prev = current;
			current = dataTypes.shift();

			if ( current ) {

				// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {

					current = prev;

					// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {

					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];

					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {

							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {

								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {

									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];

										// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if ( conv !== true ) {

						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend( {

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",

			/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": JSON.parse,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?

				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},

		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),

		// Main method
		ajax: function( url, options ) {

			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,

				// URL without anti-cache param
				cacheURL,

				// Response headers
				responseHeadersString,
				responseHeaders,

				// timeout handle
				timeoutTimer,

				// Url cleanup var
				urlAnchor,

				// Request state (becomes false upon send and true upon completion)
				completed,

				// To know if global events are to be dispatched
				fireGlobals,

				// Loop variable
				i,

				// uncached part of the url
				uncached,

				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),

				// Callbacks context
				callbackContext = s.context || s,

				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),

				// Status-dependent callbacks
				statusCode = s.statusCode || {},

				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},

				// Default abort message
				strAbort = "canceled",

				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( completed ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
										( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
											.concat( match[ 2 ] );
								}
							}
							match = responseHeaders[ key.toLowerCase() + " " ];
						}
						return match == null ? null : match.join( ", " );
					},

					// Raw string
					getAllResponseHeaders: function() {
						return completed ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function( name, value ) {
						if ( completed == null ) {
							name = requestHeadersNames[ name.toLowerCase() ] =
								requestHeadersNames[ name.toLowerCase() ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( completed == null ) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( completed ) {

								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							} else {

								// Lazy-add the new callbacks in a way that preserves old ones
								for ( code in map ) {
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							}
						}
						return this;
					},

					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};

			// Attach deferreds
			deferred.promise( jqXHR );

			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" )
				.replace( rprotocol, location.protocol + "//" );

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );

				// Support: IE <=8 - 11, Edge 12 - 15
				// IE throws exception on accessing the href property if url is malformed,
				// e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;

					// Support: IE <=8 - 11 only
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {

					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}

			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}

			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

			// If request was aborted inside a prefilter, stop there
			if ( completed ) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			// Remove hash to simplify url manipulation
			cacheURL = s.url.replace( rhash, "" );

			// More options handling for requests with no content
			if ( !s.hasContent ) {

				// Remember the hash so we can put it back
				uncached = s.url.slice( cacheURL.length );

				// If data is available and should be processed, append data to url
				if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
					cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add or update anti-cache param if needed
				if ( s.cache === false ) {
					cacheURL = cacheURL.replace( rantiCache, "$1" );
					uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
				}

				// Put hash and anti-cache on the URL that will be requested (gh-1732)
				s.url = cacheURL + uncached;

				// Change '%20' to '+' if this is encoded form body content (gh-2658)
			} else if ( s.data && s.processData &&
				( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
				s.data = s.data.replace( r20, "+" );
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}

			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);

			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}

			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			completeDeferred.add( s.complete );
			jqXHR.done( s.success );
			jqXHR.fail( s.error );

			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}

				// If request was aborted inside ajaxSend, stop there
				if ( completed ) {
					return jqXHR;
				}

				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}

				try {
					completed = false;
					transport.send( requestHeaders, done );
				} catch ( e ) {

					// Rethrow post-completion exceptions
					if ( completed ) {
						throw e;
					}

					// Propagate others as results
					done( -1, e );
				}
			}

			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;

				// Ignore repeat invocations
				if ( completed ) {
					return;
				}

				completed = true;

				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );

				// If successful, handle type chaining
				if ( isSuccess ) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}

					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";

						// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";

						// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {

					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";

				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}

				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;

				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}

				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}

			return jqXHR;
		},

		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},

		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );

	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {

			// Shift arguments if data argument was omitted
			if ( isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );


	jQuery._evalUrl = function( url, options ) {
		return jQuery.ajax( {
			url: url,

			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			cache: true,
			async: false,
			global: false,

			// Only evaluate the response if it is successful (gh-4126)
			// dataFilter is not invoked for failure responses, so using it instead
			// of the default converter is kludgy but it works.
			converters: {
				"text script": function() {}
			},
			dataFilter: function( response ) {
				jQuery.globalEval( response, options );
			}
		} );
	};


	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;

			if ( this[ 0 ] ) {
				if ( isFunction( html ) ) {
					html = html.call( this[ 0 ] );
				}

				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}

				wrap.map( function() {
					var elem = this;

					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}

					return elem;
				} ).append( this );
			}

			return this;
		},

		wrapInner: function( html ) {
			if ( isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}

			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();

				if ( contents.length ) {
					contents.wrapAll( html );

				} else {
					self.append( html );
				}
			} );
		},

		wrap: function( html ) {
			var htmlIsFunction = isFunction( html );

			return this.each( function( i ) {
				jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
			} );
		},

		unwrap: function( selector ) {
			this.parent( selector ).not( "body" ).each( function() {
				jQuery( this ).replaceWith( this.childNodes );
			} );
			return this;
		}
	} );


	jQuery.expr.pseudos.hidden = function( elem ) {
		return !jQuery.expr.pseudos.visible( elem );
	};
	jQuery.expr.pseudos.visible = function( elem ) {
		return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
	};




	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};

	var xhrSuccessStatus = {

			// File protocol always yields status code 0, assume 200
			0: 200,

			// Support: IE <=9 only
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();

	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();

					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}

					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.ontimeout =
										xhr.onreadystatechange = null;

								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {

									// Support: IE <=9 only
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(

											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,

										// Support: IE <=9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};

					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

					// Support: IE 9 only
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {

							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {

								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}

					// Create the abort callback
					callback = callback( "abort" );

					try {

						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {

						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},

				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
	jQuery.ajaxPrefilter( function( s ) {
		if ( s.crossDomain ) {
			s.contents.script = false;
		}
	} );

// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );

// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );

// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {

		// This transport only deals with cross domain or forced-by-attrs requests
		if ( s.crossDomain || s.scriptAttrs ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" )
						.attr( s.scriptAttrs || {} )
						.prop( { charset: s.scriptCharset, src: s.url } )
						.on( "load error", callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						} );

					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );

// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
					"url" :
					typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;

			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};

			// Force json dataType
			s.dataTypes[ 0 ] = "json";

			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always( function() {

				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );

					// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}

				// Save back as free
				if ( s[ callbackName ] ) {

					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}

				// Call if it was a function and we have a response
				if ( responseContainer && isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}

				responseContainer = overwritten = undefined;
			} );

			// Delegate to script
			return "script";
		}
	} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
	support.createHTMLDocument = ( function() {
		var body = document.implementation.createHTMLDocument( "" ).body;
		body.innerHTML = "<form></form><form></form>";
		return body.childNodes.length === 2;
	} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( typeof data !== "string" ) {
			return [];
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}

		var base, parsed, scripts;

		if ( !context ) {

			// Stop scripts or inline event handlers from being executed immediately
			// by using document.implementation
			if ( support.createHTMLDocument ) {
				context = document.implementation.createHTMLDocument( "" );

				// Set the base href for the created document
				// so any parsed elements with URLs
				// are based on the document's URL (gh-2965)
				base = context.createElement( "base" );
				base.href = document.location.href;
				context.head.appendChild( base );
			} else {
				context = document;
			}
		}

		parsed = rsingleTag.exec( data );
		scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}

		parsed = buildFragment( [ data ], context, scripts );

		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}

		return jQuery.merge( [], parsed.childNodes );
	};


	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		var selector, type, response,
			self = this,
			off = url.indexOf( " " );

		if ( off > -1 ) {
			selector = stripAndCollapse( url.slice( off ) );
			url = url.slice( 0, off );
		}

		// If it's a function
		if ( isFunction( params ) ) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

			// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,

				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {

				// Save response for use in complete callback
				response = arguments;

				self.html( selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

					// Otherwise use the full result
					responseText );

				// If the request succeeds, this function gets "data", "status", "jqXHR"
				// but they are ignored because response was set above.
				// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}

		return this;
	};




// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );




	jQuery.expr.pseudos.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};




	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};

			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;

			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}

			if ( isFunction( options ) ) {

				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}

			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}

			if ( "using" in options ) {
				options.using.call( elem, props );

			} else {
				curElem.css( props );
			}
		}
	};

	jQuery.fn.extend( {

		// offset() relates an element's border box to the document origin
		offset: function( options ) {

			// Preserve chaining for setter
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}

			var rect, win,
				elem = this[ 0 ];

			if ( !elem ) {
				return;
			}

			// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
			// Support: IE <=11 only
			// Running getBoundingClientRect on a
			// disconnected node in IE throws an error
			if ( !elem.getClientRects().length ) {
				return { top: 0, left: 0 };
			}

			// Get document-relative position by adding viewport scroll to viewport-relative gBCR
			rect = elem.getBoundingClientRect();
			win = elem.ownerDocument.defaultView;
			return {
				top: rect.top + win.pageYOffset,
				left: rect.left + win.pageXOffset
			};
		},

		// position() relates an element's margin box to its offset parent's padding box
		// This corresponds to the behavior of CSS absolute positioning
		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}

			var offsetParent, offset, doc,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };

			// position:fixed elements are offset from the viewport, which itself always has zero offset
			if ( jQuery.css( elem, "position" ) === "fixed" ) {

				// Assume position:fixed implies availability of getBoundingClientRect
				offset = elem.getBoundingClientRect();

			} else {
				offset = this.offset();

				// Account for the *real* offset parent, which can be the document or its root element
				// when a statically positioned element is identified
				doc = elem.ownerDocument;
				offsetParent = elem.offsetParent || doc.documentElement;
				while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

					offsetParent = offsetParent.parentNode;
				}
				if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

					// Incorporate borders into its offset, since they are outside its content origin
					parentOffset = jQuery( offsetParent ).offset();
					parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
					parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
				}
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},

		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;

				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || documentElement;
			} );
		}
	} );

// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;

		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {

				// Coalesce documents and windows
				var win;
				if ( isWindow( elem ) ) {
					win = elem;
				} else if ( elem.nodeType === 9 ) {
					win = elem.defaultView;
				}

				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}

				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);

				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );

					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {

				// Margin is only for outerHeight, outerWidth
				jQuery.fn[ funcName ] = function( margin, value ) {
					var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
						extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

					return access( this, function( elem, type, value ) {
						var doc;

						if ( isWindow( elem ) ) {

							// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
							return funcName.indexOf( "outer" ) === 0 ?
								elem[ "inner" + name ] :
								elem.document.documentElement[ "client" + name ];
						}

						// Get document width or height
						if ( elem.nodeType === 9 ) {
							doc = elem.documentElement;

							// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
							// whichever is greatest
							return Math.max(
								elem.body[ "scroll" + name ], doc[ "scroll" + name ],
								elem.body[ "offset" + name ], doc[ "offset" + name ],
								doc[ "client" + name ]
							);
						}

						return value === undefined ?

							// Get width or height on the element, requesting but not forcing parseFloat
							jQuery.css( elem, type, extra ) :

							// Set width or height on the element
							jQuery.style( elem, type, value, extra );
					}, type, chainable ? margin : undefined, chainable );
				};
			} );
	} );


	jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup contextmenu" ).split( " " ),
		function( i, name ) {

			// Handle event binding
			jQuery.fn[ name ] = function( data, fn ) {
				return arguments.length > 0 ?
					this.on( name, null, data, fn ) :
					this.trigger( name );
			};
		} );

	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );




	jQuery.fn.extend( {

		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},

		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {

			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		}
	} );

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
	jQuery.proxy = function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	};

	jQuery.holdReady = function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	};
	jQuery.isArray = Array.isArray;
	jQuery.parseJSON = JSON.parse;
	jQuery.nodeName = nodeName;
	jQuery.isFunction = isFunction;
	jQuery.isWindow = isWindow;
	jQuery.camelCase = camelCase;
	jQuery.type = toType;

	jQuery.now = Date.now;

	jQuery.isNumeric = function( obj ) {

		// As of jQuery 3.0, isNumeric is limited to
		// strings and numbers (primitives or objects)
		// that can be coerced to finite numbers (gh-2662)
		var type = jQuery.type( obj );
		return ( type === "number" || type === "string" ) &&

			// parseFloat NaNs numeric-cast false positives ("")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			!isNaN( obj - parseFloat( obj ) );
	};




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if ( typeof define === "function" && define.amd ) {
		define( "jquery", [], function() {
			return jQuery;
		} );
	}




	var

		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,

		// Map over the $ in case of overwrite
		_$ = window.$;

	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}




	return jQuery;
} );

define('lib/jquery-private',['jquery'], function (jQ) {
	// use jQuery in no conflict mode and remove all refenreces to jQuery
	return jQ.noConflict(true);
});
define('shim/ObjectCreate',[],function(){
	var ObjectCreate;
	
	if (typeof Object.create === 'function') {
		ObjectCreate = Object.create;
	} else {
		ObjectCreate = (function() {
			var Temp = function() {};
			return function(prototype) {
				if (arguments.length > 1) {
					throw Error('Second argument not supported');
				}
				if (typeof prototype !== 'object') {
					throw TypeError('Argument must be an object');
				}
				Temp.prototype = prototype;
				var result = new Temp();
				Temp.prototype = null;
				return result;
			};
		})();
	}
	
	return ObjectCreate;
});
/**
 * Simple error we can inject in merchant callbacks.
 * Merchant can check based on error name if he wants to react to something.
 * We could have for every error an own class but I thing setting the name of the error is more
 * flexible and needs less code.
 * Bonus: stack is created in constructor and could be reported back to server.
 */

define('module/error/OppError',['require','shim/ObjectCreate'],function(require) {

    var ObjectCreate = require('shim/ObjectCreate');

    var OppError = function (message, name) {
        this.message = message || "An OPP error occurred.";
        this.name = name || "OppError";
        this.stack = (new Error()).stack;
    };

    var returnCodeToErrorName = {
        "200.300.404": "InvalidCheckoutIdError"
    };

    // extend the basic javascript Error object
    OppError.prototype = ObjectCreate(Error.prototype);
    OppError.prototype.constructor = OppError;

    OppError.getErrorNameByReturnCode = function (returnCode) {
        return returnCodeToErrorName[returnCode];
    };

    return OppError;
});
define('module/Parameter',[],function(){
	var Parameter = {};
	
	Parameter.BANKACCOUNT_BANKCODE = "bankAccount.bankCode";
	Parameter.BANKACCOUNT_BANKNAME = "bankAccount.bankName";
	Parameter.BANKACCOUNT_BIC = "bankAccount.bic";
	Parameter.BANKACCOUNT_COUNTRY = "bankAccount.country";
	Parameter.BANKACCOUNT_HOLDER = "bankAccount.holder";
	Parameter.BANKACCOUNT_IBAN = "bankAccount.iban";
	Parameter.BANKACCOUNT_NUMBER = "bankAccount.number";
	
	Parameter.CARD_CVV = "card.cvv";
	Parameter.CARD_EXPIRY_MONTH = "card.expiryMonth";
	Parameter.CARD_EXPIRY_YEAR = "card.expiryYear";
	Parameter.CARD_HOLDER = "card.holder";
	Parameter.CARD_NUMBER = "card.number";
	
	Parameter.CHECKOUT_ID = "checkoutId";
	Parameter.PAYMENT_BRAND = "paymentBrand";
	Parameter.SHOPPER_RESULT_URL = "shopperResultUrl";
	Parameter.SHOPPER_RESULT_TARGET = "shopperResultTarget";
	Parameter.SHOP_ORIGIN = "shopOrigin";

	Parameter.VIRTUALACCOUNT_ACCOUNTID = "virtualAccount.accountId";
	Parameter.VIRTUALACCOUNT_HOLDER = "virtualAccount.holder";
    Parameter.VIRTUALACCOUNT_PAYMENT_TOKEN = "virtualAccount.paymentToken";

    // A workaround for IE 8 and earlier versions (see http://stackoverflow.com/a/1367468 -
	// having a parameter with a UTF-8 character forces IE to use UTF-8).
    Parameter.FORCE_UTF8 = "forceUtf8"; 

    // Customer
    Parameter.SUR_NAME = 'customer.surname';
    Parameter.GIVEN_NAME = 'customer.givenName';
    Parameter.ID_DOC_TYPE = 'customer.identificationDocType';
    Parameter.ID_DOC_ID = 'customer.identificationDocId';
    Parameter.PHONE = 'customer.phone';
    Parameter.MOBILE_NUMBER = 'customer.mobile';
    Parameter.EMAIL = 'customer.email';

    Parameter.BIRTH_DATE = 'customer.birthDate';

    // Billing address
    Parameter.BILLING_COUNTRY = 'billing.country';
    Parameter.BILLING_STATE = 'billing.state';
    Parameter.BILLING_CITY = 'billing.city';
    Parameter.BILLING_STREET1 = 'billing.street1';
    Parameter.BILLING_STREET2 = 'billing.street2';
    Parameter.BILLING_HOUSE_NUMBER1 = 'billing.houseNumber1';
    Parameter.BILLING_POST_CODE = 'billing.postcode';

    Parameter.BROWSER_LANGUAGE = 'customer.browser.language';
    Parameter.BROWSER_SCREEN_HEIGHT = 'customer.browser.screenHeight';    
    Parameter.BROWSER_SCREEN_WIDTH = 'customer.browser.screenWidth';
    Parameter.BROWSER_TIMEZONE = 'customer.browser.timezone';
    Parameter.BROWSER_USERAGENT = 'customer.browser.userAgent';
    Parameter.BROWSER_JAVAENABLED = 'customer.browser.javaEnabled';
    Parameter.BROWSER_JAVASCRIPT_ENABLED = 'customer.browser.javascriptEnabled';
    Parameter.BROWSER_SCREEN_COLOR_DEPTH = 'customer.browser.screenColorDepth';
    Parameter.BROWSER_CHALLENGE_WINDOW = 'customer.browser.challengeWindow';

    Parameter.MOBILE_COUNTRY_CODE = 'customParameters[MOBILE_COUNTRY_CODE]';

    Parameter.IS_MOBILE = 'customParameters[SHOPPER_isMobile]';
    Parameter.SHOPPER_TOKEN = 'customParameters[SHOPPER_token]';
    Parameter.INLINE_FLOW = 'customParameters[inlineFlow]';
    Parameter.IS_SOURCE_BROWSER = 'isSourceBrowser';

    Parameter.GIFT_CARD_NUMBER = 'customParameters[GIFT_CARD_NUMBER]';
    Parameter.GIFT_CARD_EXPIRY_DATE = 'customParameters[GIFT_CARD_EXPIRY_DATE]';
    Parameter.GIFT_CARD_CODE = 'customParameters[GIFT_CARD_CODE]';

    Parameter.SHOPPER_PAYMENT_MODE = 'customParameters[SHOPPER_payment_mode]';
    Parameter.FORTER_COOKIE = 'customParameters[SHOPPER_FORTER_COOKIE]';
    Parameter.TOKEN_SOURCE = 'customParameters[tokenSource]';
    Parameter.SHOPPER_AD_UUID = 'customParameters[SHOPPER_submit_payment]';
    Parameter.APPEND_MERCHANT_TX_ID_TO_SHOPPER_RESULT_URL = 'customParameters[appendMerchantTxIdToShopperResultUrl]';
    Parameter.COPYANDPAY_LOCALE = 'customParameters[copyandpay_locale]';

	return Parameter;
});

define('module/forms/PaymentForm',['require','module/Parameter'],function(require){
	var Parameter = require('module/Parameter');
	
	var PaymentForm = function($form){
		this.$form = $form;
	};
	
	PaymentForm.prototype.getBrand = function(){
		return this.getBrandElement().val();
	};
	
	PaymentForm.prototype.getBrandElement = function(){
		return this.getElement(Parameter.PAYMENT_BRAND);
	};

	PaymentForm.prototype.getShopperResultUrl = function(){
		return this.getElement(Parameter.SHOPPER_RESULT_URL).val();
	};

	PaymentForm.prototype.getVirtualAccountId = function(){
		return this.getVirtualAccountIdElement().val();
	};

	PaymentForm.prototype.getVirtualAccountIdElement = function(){
		return this.getElement(Parameter.VIRTUALACCOUNT_ACCOUNTID);
	};

	PaymentForm.prototype.getBillingCountry = function() {
    	return this.getBillingCountryElement().val();
  	};

	PaymentForm.prototype.getBillingCountryElement = function() {
    	return this.getElement(Parameter.BILLING_COUNTRY);
	};
	  
	PaymentForm.prototype.getState = function() {
      	return this.getStateElement().val();
    };

    PaymentForm.prototype.getStateElement = function() {
      	return this.getElement(Parameter.BILLING_STATE);
    };

    PaymentForm.prototype.getCity = function() {
      	return this.getCityElement().val();
    };

    PaymentForm.prototype.getCityElement = function() {
      	return this.getElement(Parameter.BILLING_CITY);
    };

    PaymentForm.prototype.getStreet1 = function() {
      	return this.getStreet1Element().val();
    };

    PaymentForm.prototype.getStreet1Element = function() {
      	return this.getElement(Parameter.BILLING_STREET1);
    };

    PaymentForm.prototype.getStreet2 = function() {
      	return this.getStreet2Element().val();
    };

    PaymentForm.prototype.getStreet2Element = function() {
      	return this.getElement(Parameter.BILLING_STREET2);
    };

    PaymentForm.prototype.getPostCode = function() {
      	return this.getPostCodeElement().val();
    };

    PaymentForm.prototype.getPostCodeElement = function() {
      	return this.getElement(Parameter.BILLING_POST_CODE);
    };

	PaymentForm.prototype.getElement = function(param){
		return this.$form.find("[name='" + param + "']").first();
	};

	PaymentForm.prototype.getElementByCssClass = function(cssClass){
		return this.$form.find("." + cssClass);
	};

	PaymentForm.prototype.getSubmitButtonElement = function(){
		return this.$form.find("button[type=\"submit\"]").first();
	};

    PaymentForm.prototype.getIdentificationDocTypeElement = function(){
        return this.getElement(Parameter.ID_DOC_TYPE);
    };
	
    PaymentForm.prototype.getIdentificationDocIdElement = function(){
        return this.getElement(Parameter.ID_DOC_ID);
    };

	return PaymentForm;
});

define('module/forms/CardPaymentForm',['require','shim/ObjectCreate','module/forms/PaymentForm','module/Parameter'],function(require){
	var ObjectCreate = require('shim/ObjectCreate');
	var PaymentForm = require('module/forms/PaymentForm');
	var Parameter = require('module/Parameter');
	
	var CardPaymentForm = function($form){
		PaymentForm.call(this, $form);
	};
	
	// extend Form
	CardPaymentForm.prototype = ObjectCreate(PaymentForm.prototype);
	CardPaymentForm.prototype.constructor = CardPaymentForm;
	
	CardPaymentForm.prototype.getNumber = function(){
		return this.getNumberElement().val();
	};
	
	CardPaymentForm.prototype.getNumberElement = function(){
		return this.getElement(Parameter.CARD_NUMBER);
	};
	
	CardPaymentForm.prototype.getExpiryMonth = function(){
		return this.getExpiryMonthElement().val();
	};
	
	CardPaymentForm.prototype.getExpiryMonthElement = function(){
		return this.getElement(Parameter.CARD_EXPIRY_MONTH);
	};
	
	CardPaymentForm.prototype.getExpiryYear = function(){
		return this.getExpiryYearElement().val();
	};
	
	CardPaymentForm.prototype.getExpiryYearElement = function(){
		return this.getElement(Parameter.CARD_EXPIRY_YEAR);
	};
	
	CardPaymentForm.prototype.getHolder = function(){
		return this.getHolderElement().val();
	};
	
	CardPaymentForm.prototype.getHolderElement = function(){
		return this.getElement(Parameter.CARD_HOLDER);
	};
	
	CardPaymentForm.prototype.getCvv = function(){
		return this.getCvvElement().val();
	};
	
	CardPaymentForm.prototype.getCvvElement = function(){
		return this.getElement(Parameter.CARD_CVV);
	};
	
	CardPaymentForm.prototype.getSurName = function(){
		return this.getSurNameElement().val();
	};
	
	CardPaymentForm.prototype.getSurNameElement = function(){
		return this.getElement(Parameter.SUR_NAME);
	};
	
	CardPaymentForm.prototype.getGivenName = function(){
		return this.getGivenNameElement().val();
	};
	
	CardPaymentForm.prototype.getGivenNameElement = function(){
		return this.getElement(Parameter.GIVEN_NAME);
	};
	
	CardPaymentForm.prototype.getMobileNumberElement = function(){
		return this.getElement(Parameter.MOBILE_NUMBER);
	};

	CardPaymentForm.prototype.getMobileCountryCodeElement = function(){
		return this.getElement(Parameter.MOBILE_COUNTRY_CODE);
	};

	// The identifier of the birthdate element edited by user
	// this is not part of the prototype
	CardPaymentForm.WIDGET_BIRTH_DATE = 'widgetBirthDate';

	// The birthdate element, edited by user
	CardPaymentForm.prototype.getVisibleBirthDateElement = function(){
        return this.getElement(CardPaymentForm.WIDGET_BIRTH_DATE);
	};
	
	// The hidden birthdate sent to opp
	CardPaymentForm.prototype.getOppBirthDateElement = function(){
        return this.getElement(Parameter.BIRTH_DATE);
	};

	return CardPaymentForm;
});

/**
 * @license RequireJS text 2.0.14 Copyright (c) 2010-2014, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/requirejs/text for details
 */
/*jslint regexp: true */
/*global require, XMLHttpRequest, ActiveXObject,
  define, window, process, Packages,
  java, location, Components, FileUtils */

define('text',['module'], function (module) {
    'use strict';

    var text, fs, Cc, Ci, xpcIsWindows,
        progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],
        xmlRegExp = /^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im,
        bodyRegExp = /<body[^>]*>\s*([\s\S]+)\s*<\/body>/im,
        hasLocation = typeof location !== 'undefined' && location.href,
        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\:/, ''),
        defaultHostName = hasLocation && location.hostname,
        defaultPort = hasLocation && (location.port || undefined),
        buildMap = {},
        masterConfig = (module.config && module.config()) || {};

    text = {
        version: '2.0.14',

        strip: function (content) {
            //Strips <?xml ...?> declarations so that external SVG and XML
            //documents can be added to a document without worry. Also, if the string
            //is an HTML document, only the part inside the body tag is returned.
            if (content) {
                content = content.replace(xmlRegExp, "");
                var matches = content.match(bodyRegExp);
                if (matches) {
                    content = matches[1];
                }
            } else {
                content = "";
            }
            return content;
        },

        jsEscape: function (content) {
            return content.replace(/(['\\])/g, '\\$1')
                .replace(/[\f]/g, "\\f")
                .replace(/[\b]/g, "\\b")
                .replace(/[\n]/g, "\\n")
                .replace(/[\t]/g, "\\t")
                .replace(/[\r]/g, "\\r")
                .replace(/[\u2028]/g, "\\u2028")
                .replace(/[\u2029]/g, "\\u2029");
        },

        createXhr: masterConfig.createXhr || function () {
            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.
            var xhr, i, progId;
            if (typeof XMLHttpRequest !== "undefined") {
                return new XMLHttpRequest();
            } else if (typeof ActiveXObject !== "undefined") {
                for (i = 0; i < 3; i += 1) {
                    progId = progIds[i];
                    try {
                        xhr = new ActiveXObject(progId);
                    } catch (e) {}

                    if (xhr) {
                        progIds = [progId];  // so faster next time
                        break;
                    }
                }
            }

            return xhr;
        },

        /**
         * Parses a resource name into its component parts. Resource names
         * look like: module/name.ext!strip, where the !strip part is
         * optional.
         * @param {String} name the resource name
         * @returns {Object} with properties "moduleName", "ext" and "strip"
         * where strip is a boolean.
         */
        parseName: function (name) {
            var modName, ext, temp,
                strip = false,
                index = name.lastIndexOf("."),
                isRelative = name.indexOf('./') === 0 ||
                             name.indexOf('../') === 0;

            if (index !== -1 && (!isRelative || index > 1)) {
                modName = name.substring(0, index);
                ext = name.substring(index + 1);
            } else {
                modName = name;
            }

            temp = ext || modName;
            index = temp.indexOf("!");
            if (index !== -1) {
                //Pull off the strip arg.
                strip = temp.substring(index + 1) === "strip";
                temp = temp.substring(0, index);
                if (ext) {
                    ext = temp;
                } else {
                    modName = temp;
                }
            }

            return {
                moduleName: modName,
                ext: ext,
                strip: strip
            };
        },

        xdRegExp: /^((\w+)\:)?\/\/([^\/\\]+)/,

        /**
         * Is an URL on another domain. Only works for browser use, returns
         * false in non-browser environments. Only used to know if an
         * optimized .js version of a text resource should be loaded
         * instead.
         * @param {String} url
         * @returns Boolean
         */
        useXhr: function (url, protocol, hostname, port) {
            var uProtocol, uHostName, uPort,
                match = text.xdRegExp.exec(url);
            if (!match) {
                return true;
            }
            uProtocol = match[2];
            uHostName = match[3];

            uHostName = uHostName.split(':');
            uPort = uHostName[1];
            uHostName = uHostName[0];

            return (!uProtocol || uProtocol === protocol) &&
                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&
                   ((!uPort && !uHostName) || uPort === port);
        },

        finishLoad: function (name, strip, content, onLoad) {
            content = strip ? text.strip(content) : content;
            if (masterConfig.isBuild) {
                buildMap[name] = content;
            }
            onLoad(content);
        },

        load: function (name, req, onLoad, config) {
            //Name has format: some.module.filext!strip
            //The strip part is optional.
            //if strip is present, then that means only get the string contents
            //inside a body tag in an HTML string. For XML/SVG content it means
            //removing the <?xml ...?> declarations so the content can be inserted
            //into the current doc without problems.

            // Do not bother with the work if a build and text will
            // not be inlined.
            if (config && config.isBuild && !config.inlineText) {
                onLoad();
                return;
            }

            masterConfig.isBuild = config && config.isBuild;

            var parsed = text.parseName(name),
                nonStripName = parsed.moduleName +
                    (parsed.ext ? '.' + parsed.ext : ''),
                url = req.toUrl(nonStripName),
                useXhr = (masterConfig.useXhr) ||
                         text.useXhr;

            // Do not load if it is an empty: url
            if (url.indexOf('empty:') === 0) {
                onLoad();
                return;
            }

            //Load the text. Use XHR if possible and in a browser.
            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {
                text.get(url, function (content) {
                    text.finishLoad(name, parsed.strip, content, onLoad);
                }, function (err) {
                    if (onLoad.error) {
                        onLoad.error(err);
                    }
                });
            } else {
                //Need to fetch the resource across domains. Assume
                //the resource has been optimized into a JS module. Fetch
                //by the module name + extension, but do not include the
                //!strip part to avoid file system issues.
                req([nonStripName], function (content) {
                    text.finishLoad(parsed.moduleName + '.' + parsed.ext,
                                    parsed.strip, content, onLoad);
                });
            }
        },

        write: function (pluginName, moduleName, write, config) {
            if (buildMap.hasOwnProperty(moduleName)) {
                var content = text.jsEscape(buildMap[moduleName]);
                write.asModule(pluginName + "!" + moduleName,
                               "define(function () { return '" +
                                   content +
                               "';});\n");
            }
        },

        writeFile: function (pluginName, moduleName, req, write, config) {
            var parsed = text.parseName(moduleName),
                extPart = parsed.ext ? '.' + parsed.ext : '',
                nonStripName = parsed.moduleName + extPart,
                //Use a '.js' file name so that it indicates it is a
                //script that can be loaded across domains.
                fileName = req.toUrl(parsed.moduleName + extPart) + '.js';

            //Leverage own load() method to load plugin value, but only
            //write out values that do not have the strip argument,
            //to avoid any potential issues with ! in file names.
            text.load(nonStripName, req, function (value) {
                //Use own write() method to construct full module value.
                //But need to create shell that translates writeFile's
                //write() to the right interface.
                var textWrite = function (contents) {
                    return write(fileName, contents);
                };
                textWrite.asModule = function (moduleName, contents) {
                    return write.asModule(moduleName, fileName, contents);
                };

                text.write(pluginName, nonStripName, textWrite, config);
            }, config);
        }
    };

    if (masterConfig.env === 'node' || (!masterConfig.env &&
            typeof process !== "undefined" &&
            process.versions &&
            !!process.versions.node &&
            !process.versions['node-webkit'] &&
            !process.versions['atom-shell'])) {
        //Using special require.nodeRequire, something added by r.js.
        fs = require.nodeRequire('fs');

        text.get = function (url, callback, errback) {
            try {
                var file = fs.readFileSync(url, 'utf8');
                //Remove BOM (Byte Mark Order) from utf8 files if it is there.
                if (file[0] === '\uFEFF') {
                    file = file.substring(1);
                }
                callback(file);
            } catch (e) {
                if (errback) {
                    errback(e);
                }
            }
        };
    } else if (masterConfig.env === 'xhr' || (!masterConfig.env &&
            text.createXhr())) {
        text.get = function (url, callback, errback, headers) {
            var xhr = text.createXhr(), header;
            xhr.open('GET', url, true);

            //Allow plugins direct access to xhr headers
            if (headers) {
                for (header in headers) {
                    if (headers.hasOwnProperty(header)) {
                        xhr.setRequestHeader(header.toLowerCase(), headers[header]);
                    }
                }
            }

            //Allow overrides specified in config
            if (masterConfig.onXhr) {
                masterConfig.onXhr(xhr, url);
            }

            xhr.onreadystatechange = function (evt) {
                var status, err;
                //Do not explicitly handle errors, those should be
                //visible via console output in the browser.
                if (xhr.readyState === 4) {
                    status = xhr.status || 0;
                    if (status > 399 && status < 600) {
                        //An http 4xx or 5xx error. Signal an error.
                        err = new Error(url + ' HTTP status: ' + status);
                        err.xhr = xhr;
                        if (errback) {
                            errback(err);
                        }
                    } else {
                        callback(xhr.responseText);
                    }

                    if (masterConfig.onXhrComplete) {
                        masterConfig.onXhrComplete(xhr, url);
                    }
                }
            };
            xhr.send(null);
        };
    } else if (masterConfig.env === 'rhino' || (!masterConfig.env &&
            typeof Packages !== 'undefined' && typeof java !== 'undefined')) {
        //Why Java, why is this so awkward?
        text.get = function (url, callback) {
            var stringBuffer, line,
                encoding = "utf-8",
                file = new java.io.File(url),
                lineSeparator = java.lang.System.getProperty("line.separator"),
                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),
                content = '';
            try {
                stringBuffer = new java.lang.StringBuffer();
                line = input.readLine();

                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324
                // http://www.unicode.org/faq/utf_bom.html

                // Note that when we use utf-8, the BOM should appear as "EF BB BF", but it doesn't due to this bug in the JDK:
                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058
                if (line && line.length() && line.charAt(0) === 0xfeff) {
                    // Eat the BOM, since we've already found the encoding on this file,
                    // and we plan to concatenating this buffer with others; the BOM should
                    // only appear at the top of a file.
                    line = line.substring(1);
                }

                if (line !== null) {
                    stringBuffer.append(line);
                }

                while ((line = input.readLine()) !== null) {
                    stringBuffer.append(lineSeparator);
                    stringBuffer.append(line);
                }
                //Make sure we return a JavaScript string and not a Java string.
                content = String(stringBuffer.toString()); //String
            } finally {
                input.close();
            }
            callback(content);
        };
    } else if (masterConfig.env === 'xpconnect' || (!masterConfig.env &&
            typeof Components !== 'undefined' && Components.classes &&
            Components.interfaces)) {
        //Avert your gaze!
        Cc = Components.classes;
        Ci = Components.interfaces;
        Components.utils['import']('resource://gre/modules/FileUtils.jsm');
        xpcIsWindows = ('@mozilla.org/windows-registry-key;1' in Cc);

        text.get = function (url, callback) {
            var inStream, convertStream, fileObj,
                readData = {};

            if (xpcIsWindows) {
                url = url.replace(/\//g, '\\');
            }

            fileObj = new FileUtils.File(url);

            //XPCOM, you so crazy
            try {
                inStream = Cc['@mozilla.org/network/file-input-stream;1']
                           .createInstance(Ci.nsIFileInputStream);
                inStream.init(fileObj, 1, 0, false);

                convertStream = Cc['@mozilla.org/intl/converter-input-stream;1']
                                .createInstance(Ci.nsIConverterInputStream);
                convertStream.init(inStream, "utf-8", inStream.available(),
                Ci.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);

                convertStream.readString(inStream.available(), readData);
                convertStream.close();
                inStream.close();
                callback(readData.value);
            } catch (e) {
                throw new Error((fileObj && fileObj.path || '') + ': ' + e);
            }
        };
    }
    return text;
});


define('text!module/json/brands.json',[],function () { return '{\n  "AFTERPAY": {\n    "render": "VA",\n    "label": "AfterPay",\n    "brand": "AFTERPAY"\n  },\n  "AFTERPAY_PACIFIC": {\n    "render": "VA",\n    "label": "AfterPay Pacific",\n    "brand": "AFTERPAY_PACIFIC"\n  },\n  "ALIPAY": {\n    "render": "VA",\n    "label": "Alipay",\n    "brand": "ALIPAY"\n  },\n  "ALLPAGO_INVOICE": {\n    "render": "PP",\n    "label": "Invoice",\n    "brand": "ALLPAGO_INVOICE"\n  },\n  "AMAZONPAY": {\n    "render": "VA",\n    "label": "AmazonPay",\n    "brand": "AMAZONPAY"\n  },\n  "AMEX": {\n    "render": "CC",\n    "label": "American Express",\n    "brand": "AMEX"\n  },\n  "APOSTAR": {\n    "render": "PP",\n    "label": "Apostar",\n    "brand": "APOSTAR"\n  },\n  "APPLEPAY": {\n    "render": "VA",\n    "label": "Apple Pay",\n    "brand": "APPLEPAY"\n  },\n  "ARGENCARD": {\n    "render": "CC",\n    "label": "Argencard",\n    "brand": "ARGENCARD"\n  },\n  "ASTROPAY_STREAMLINE_CASH": {\n    "render": "VA",\n    "brand": "ASTROPAY_STREAMLINE_CASH"\n  },\n  "ASTROPAY_STREAMLINE_OT": {\n    "render": "VA",\n    "brand": "ASTROPAY_STREAMLINE_OT"\n  },\n  "ASYACARD": {\n    "render": "CC",\n    "label": "AsyaCard",\n    "brand": "ASYACARD"\n  },\n  "AURA": {\n    "render": "CC",\n    "label": "Aura",\n    "brand": "AURA"\n  },\n  "AXESS": {\n    "render": "CC",\n    "label": "Axess",\n    "brand": "AXESS"\n  },\n  "BALOTO": {\n    "render": "PP",\n    "label": "Baloto",\n    "brand": "BALOTO"\n  },\n  "BANCOLOMBIA": {\n    "render": "PP",\n    "label": "Bancolombia",\n    "brand": "BANCOLOMBIA"\n  },\n  "BANCONTACT_LINK": {\n    "render": "VA",\n    "label": "Bancontact Link",\n    "brand": "BANCONTACT_LINK"\n  },\n  "BANCONTACT_QR": {\n    "render": "VA",\n    "label": "Bancontact QR",\n    "brand": "BANCONTACT_QR"\n  },\n  "BBVA_CONTINENTAL": {\n    "render": "PP",\n    "label": "BBVA Continental",\n    "brand": "BBVA_CONTINENTAL"\n  },\n  "BCCARD": {\n    "render": "CC",\n    "label": "BC Card",\n    "brand": "BCCARD"\n  },\n  "BCMC": {\n    "render": "CC",\n    "label": "Bancontact/Mister Cash",\n    "brand": "BCMC",\n    "noCvv": true\n  },\n  "BCP": {\n    "render": "PP",\n    "label": "BCP",\n    "brand": "BCP"\n  },\n  "BELK_GIFT_CARD": {\n    "render": "CC",\n    "label": "Belk Gift Card",\n    "brand": "BELK_GIFT_CARD"\n  },\n  "BELK_PRIVATE_LABEL": {\n    "render": "CC",\n    "label": "Belk Private Label",\n    "brand": "BELK_PRIVATE_LABEL"\n  },\n  "BEVALIDA": {\n    "render": "PP",\n    "label": "Bevalida",\n    "brand": "BEVALIDA"\n  },\n  "BITCOIN": {\n    "render": "PP",\n    "label": "Bitcoin",\n    "brand": "BITCOIN"\n  },\n  "BOLETO": {\n    "render": "PP",\n    "label": "Boleto",\n    "brand": "BOLETO"\n  },\n  "BONUS": {\n    "render": "CC",\n    "label": "Bonus",\n    "brand": "BONUS"\n  },\n  "BOTON_PSE": {\n    "render": "PP",\n    "label": "BotonPSE",\n    "brand": "BOTON_PSE"\n  },\n  "BRADESCO": {\n    "render": "PP",\n    "label": "Bradesco",\n    "brand": "BRADESCO"\n  },\n  "CAJA_AREQUIPA": {\n    "render": "PP",\n    "label": "Caja Arequipa",\n    "brand": "CAJA_AREQUIPA"\n  },\n  "CAJA_CUSCO": {\n    "render": "PP",\n    "label": "Caja Cusco",\n    "brand": "CAJA_CUSCO"\n  },\n  "CAJA_HUANCAYO": {\n    "render": "PP",\n    "label": "Caja Huancayo",\n    "brand": "CAJA_HUANCAYO"\n  },\n  "CAJA_ICA": {\n    "render": "PP",\n    "label": "Caja ICA",\n    "brand": "CAJA_ICA"\n  },\n  "CAJA_PIURA": {\n    "render": "PP",\n    "label": "Caja Piura",\n    "brand": "CAJA_PIURA"\n  },\n  "CAJA_TACNA": {\n    "render": "PP",\n    "label": "Caja Tacna",\n    "brand": "CAJA_TACNA"\n  },\n  "CAJA_TRUJILLO": {\n    "render": "PP",\n    "label": "Caja Trujillo",\n    "brand": "CAJA_TRUJILLO"\n  },\n  "CARDFINANS": {\n    "render": "CC",\n    "label": "CardFinans",\n    "brand": "CARDFINANS"\n  },\n  "CARNET": {\n    "render": "CC",\n    "label": "Carnet",\n    "brand": "CARNET"\n  },\n  "CARTEBANCAIRE": {\n    "render": "CC",\n    "label": "Carte Bancaire",\n    "brand": "CARTEBANCAIRE"\n  },\n  "CARTEBLEUE": {\n    "render": "CC",\n    "label": "Carte Bleue",\n    "brand": "CARTEBLEUE"\n  },\n  "CASH_ON_DELIVERY": {\n    "render": "OD",\n    "label": "Cash on delivery",\n    "brand": "CASH_ON_DELIVERY"\n  },\n  "CASHPRESSO": {\n    "render": "VA",\n    "label": "Cashpresso",\n    "brand": "CASHPRESSO"\n  },\n  "CASHU": {\n    "render": "VA",\n    "label": "CashU",\n    "brand": "CASHU"\n  },\n  "CENCOSUD": {\n    "render": "CC",\n    "label": "Cencosud",\n    "brand": "CENCOSUD"\n  },\n  "CHINAUNIONPAY": {\n    "render": "VA",\n    "label": "China UnionPay",\n    "brand": "CHINAUNIONPAY"\n  },\n  "CMR_FALABELLA": {\n    "render": "CC",\n    "label": "CMR Falabella",\n    "brand": "CMR_FALABELLA"\n  },\n  "CORDIAL": {\n    "render": "CC",\n    "label": "Cordial",\n    "brand": "CORDIAL"\n  },\n  "CORDOBESA": {\n    "render": "CC",\n    "label": "Cordobesa",\n    "brand": "CORDOBESA"\n  },\n  "CREDIT_CLICK": {\n    "render": "VA",\n    "label": "CreditClick",\n    "brand": "CREDIT_CLICK"\n  },\n  "DANKORT": {\n    "render": "CC",\n    "label": "Dankort",\n    "brand": "DANKORT"\n  },\n  "DAOPAY": {\n    "render": "VA",\n    "label": "daopay",\n    "brand": "DAOPAY"\n  },\n  "DATACODE": {\n    "render": "VA",\n    "label": "DataCode",\n    "brand": "DATACODE",\n    "customView": true\n  },\n  "DELTA": {\n    "render": "CC",\n    "label": "Delta",\n    "brand": "DELTA"\n  },\n  "DIMONEX": {\n    "render": "PP",\n    "label": "Dimonex",\n    "brand": "DIMONEX"\n  },\n  "DINACARD": {\n    "render": "CC",\n    "label": "DinaCard",\n    "brand": "DINACARD"\n  },\n  "DINERS": {\n    "render": "CC",\n    "label": "Diners",\n    "brand": "DINERS"\n  },\n  "DIRECTDEBIT_AT": {\n    "render": "DD",\n    "label": "Österreich",\n    "country": "AT",\n    "brand": "DIRECTDEBIT_AT",\n    "customView": true\n  },\n  "DIRECTDEBIT_DE": {\n    "render": "DD",\n    "label": "Deutschland",\n    "country": "DE",\n    "brand": "DIRECTDEBIT_DE"\n  },\n  "DIRECTDEBIT_SEPA": {\n    "render": "DD",\n    "label": "",\n    "country": "",\n    "brand": "DIRECTDEBIT_SEPA"\n  },\n  "SEPA": {\n    "render": "DD",\n    "label": "SEPA",\n    "country": "",\n    "brand": "SEPA",\n    "customView": true\n  },\n  "DIRECTDEBIT_SEPA_MIX_AT": {\n    "render": "DD",\n    "label": "Österreich",\n    "country": "AT",\n    "brand": "DIRECTDEBIT_SEPA_MIX_AT",\n    "customView": true\n  },\n  "DIRECTDEBIT_SEPA_MIX_DE": {\n    "render": "DD",\n    "label": "Deutschland",\n    "country": "DE",\n    "brand": "DIRECTDEBIT_SEPA_MIX_DE"\n  },\n  "DIRECTDEBIT_US": {\n    "render": "DD",\n    "label": "USA",\n    "country": "US",\n    "brand": "DIRECTDEBIT_US"\n  },\n  "DISCOVER": {\n    "render": "CC",\n    "label": "Discover",\n    "brand": "DISCOVER"\n  },\n  "EFECTY": {\n    "render": "PP",\n    "label": "Efecty",\n    "brand": "EFECTY"\n  },\n  "ELO": {\n    "render": "CC",\n    "label": "ELO",\n    "brand": "ELO"\n  },\n  "ENTERCASH": {\n    "render": "OT",\n    "label": "Entercash",\n    "brand": "ENTERCASH",\n    "customView": true\n  },\n  "ENTERPAY": {\n  "render": "VA",\n  "label": "EnterPay",\n  "brand": "ENTERPAY"\n  },\n  "EPS": {\n    "render": "OT",\n    "label": "EPS",\n    "brand": "EPS",\n    "customView": true\n  },\n  "EURO6000": {\n    "render": "CC",\n    "label": "EURO 6000",\n    "brand": "EURO6000"\n  },\n  "FACILYPAY_3X": {\n    "render": "VA",\n    "label": "Facilypay 3X",\n    "brand": "FACILYPAY_3X"\n  },\n  "FACILYPAY_4X": {\n    "render": "VA",\n    "label": "Facilypay 4X",\n    "brand": "FACILYPAY_4X"\n  },\n  "FACILYPAY_3XSANSFRAIS": {\n    "render": "VA",\n    "label": "Facilypay 3X Sansfrais",\n    "brand": "FACILYPAY_3XSANSFRAIS"\n  },\n  "FACILYPAY_4XSANSFRAIS": {\n    "render": "VA",\n    "label": "Facilypay 4X Sansfrais",\n    "brand": "FACILYPAY_4XSANSFRAIS"\n  },\n  "FOURB": {\n    "render": "CC",\n    "label": "FourB",\n    "brand": "FOURB"\n  },\n  "GANA": {\n    "render": "PP",\n    "label": "GANA",\n    "brand": "GANA"\n  },\n  "GIROPAY": {\n    "render": "OT",\n    "label": "giropay",\n    "brand": "GIROPAY"\n  },\n  "GOOGLEPAY": {\n    "render": "VA",\n    "label": "Google Pay",\n    "brand": "GOOGLEPAY"\n  },\n  "HIPERCARD": {\n    "render": "CC",\n    "label": "Hipercard",\n    "brand": "HIPERCARD"\n  },\n  "IDEAL": {\n    "render": "OT",\n    "label": "iDeal",\n    "brand": "IDEAL"\n  },\n  "IK_PRIVATE_LABEL": {\n    "render": "CC",\n    "label": "Private Label",\n    "brand": "IK_PRIVATE_LABEL"\n  },\n  "IK_PRIVATE_LABEL_VA": {\n    "render": "VA",\n    "label": "Private Label",\n    "brand": "IK_PRIVATE_LABEL_VA"\n  },\n  "IKANOOI_FI": {\n    "render": "VA",\n    "label": "Ikano Lasku",\n    "brand": "IKANOOI_FI"\n  },\n  "IKANOOI_NO": {\n    "render": "VA",\n    "label": "Ikano Faktura NO",\n    "brand": "IKANOOI_NO"\n  },\n  "IKANOOI_SE": {\n    "render": "VA",\n    "label": "Ikano Faktura SE",\n    "brand": "IKANOOI_SE"\n  },\n  "INICIS": {\n    "render": "VA",\n    "label": "KG Inicis",\n    "brand": "INICIS"\n  },\n  "INTERAC_ONLINE": {\n    "render": "OT",\n    "label": "Interac",\n    "brand": "INTERAC_ONLINE"\n  },\n  "INTERAC": {\n    "render": "VA",\n    "label": "Interac",\n    "brand": "INTERAC"\n  },\n  "INTERBANK": {\n    "render": "PP",\n    "label": "Interbank",\n    "brand": "INTERBANK"\n  },\n  "INVOICE": {\n    "render": "IV",\n    "label": "Invoice",\n    "brand": "INVOICE"\n  },\n  "IPARA": {\n    "render": "VA",\n    "label": "iPara",\n    "brand": "IPARA"\n  },\n  "IUPAY": {\n    "render": "VA",\n    "label": "Iupay",\n    "brand": "IUPAY"\n  },\n  "JCB": {\n    "render": "CC",\n    "label": "JCB",\n    "brand": "JCB"\n  },\n  "KLARNA_INSTALLMENTS": {\n    "render": "VA",\n    "label": "Klarna Account",\n    "brand": "KLARNA_INSTALLMENTS"\n  },\n  "KLARNA_INVOICE": {\n    "render": "VA",\n    "label": "Klarna Invoice",\n    "brand": "KLARNA_INVOICE"\n  },\n  "KLARNA_CHECKOUT": {\n    "render": "VA",\n    "label": "Klarna Checkout",\n    "brand": "KLARNA_CHECKOUT"\n  },\n  "KLARNA_PAYMENTS_BILLPAY": {\n    "render": "VA",\n    "label": "Billpay",\n    "brand": "KLARNA_PAYMENTS_BILLPAY"\n  },\n  "KLARNA_PAYMENTS_PAYLATER": {\n    "render": "VA",\n    "label": "Pay Later",\n    "brand": "KLARNA_PAYMENTS_PAYLATER"\n  },\n  "KLARNA_PAYMENTS_PAYNOW": {\n    "render": "VA",\n    "label": "Pay Now",\n    "brand": "KLARNA_PAYMENTS_PAYNOW"\n  },\n  "KLARNA_PAYMENTS_SLICEIT": {\n    "render": "VA",\n    "label": "Slice It",\n    "brand": "KLARNA_PAYMENTS_SLICEIT"\n  },\n  "LASER": {\n    "render": "CC",\n    "label": "Laser",\n    "brand": "LASER"\n  },\n  "LYFPAY": {\n    "render": "VA",\n    "label": "Lyf Pay",\n    "brand": "LYFPAY"\n  },\n  "MADA": {\n    "render": "CC",\n    "label": "mada",\n    "brand": "MADA"\n  },\n  "MAESTRO": {\n    "render": "CC",\n    "label": "Maestro",\n    "brand": "MAESTRO"\n  },\n  "MAGNA": {\n    "render": "CC",\n    "label": "Magna",\n    "brand": "MAGNA"\n  },\n  "MASTER": {\n    "render": "CC",\n    "label": "Mastercard",\n    "brand": "MASTER"\n  },\n  "MASTERDEBIT": {\n    "render": "CC",\n    "label": "Mastercard Debit",\n    "brand": "MASTERDEBIT"\n  },\n  "MASTERPASS": {\n    "render": "VA",\n    "label": "MasterPass",\n    "brand": "MASTERPASS"\n  },\n  "MAXIMUM": {\n    "render": "CC",\n    "label": "Maximum",\n    "brand": "MAXIMUM"\n  },\n  "MBWAY": {\n    "render": "VA",\n    "label": "MBWAY",\n    "brand": "MBWAY"\n  },\n  "MEEZA": {\n    "render": "CC",\n    "label": "Meeza",\n    "brand": "MEEZA"\n  },\n  "MERCADOLIVRE": {\n    "render": "CC",\n    "label": "Cartao MercadoLivre",\n    "brand": "MASTERPASS"\n  },\n  "MONEYBOOKERS": {\n    "render": "VA",\n    "label": "Skrill",\n    "brand": "MONEYBOOKERS"\n  },\n  "MONEYSAFE": {\n    "render": "VA",\n    "label": "Moneysafe",\n    "brand": "MONEYSAFE"\n  },\n  "MULTICAJA": {\n    "render": "PP",\n    "label": "Multicaja",\n    "brand": "MULTICAJA"\n  },\n  "NATIVA": {\n    "render": "CC",\n    "label": "Nativa Master Card",\n    "brand": "NATIVA"\n  },\n  "NARANJA": {\n    "render": "CC",\n    "label": "Naranja",\n    "brand": "NARANJA"\n  },\n  "NEQUI": {\n    "render": "PP",\n    "label": "Nequi",\n    "brand": "NEQUI"\n  },\n  "NETELLER": {\n    "render": "VA",\n    "label": "NETELLER",\n    "brand": "NETELLER",\n    "customView": true\n  },\n  "ONECARD": {\n    "render": "VA",\n    "label": "OneCard",\n    "brand": "ONECARD"\n  },\n  "ONEY_CARD": {\n    "render": "VA",\n    "label": "ONEY_CARD",\n    "brand":"ONEY_CARD"\n  },\n  "ONEY_BANK_CARD": {\n    "render": "CC",\n    "label": "Oney Bank Card",\n    "brand":"ONEY_BANK_CARD"\n  },\n  "ONEY_PRIVATE_CARD": {\n    "render": "CC",\n    "label": "Oney Private Card",\n    "brand":"ONEY_PRIVATE_CARD",\n    "noCvv":true,\n    "birthDate":true\n  },\n  "ONEY_GIFTCARD": {\n    "render": "VA",\n    "label": "ONEY_GIFTCARD",\n    "brand": "ONEY_GIFTCARD"\n  },\n  "OXXO": {\n    "render": "PP",\n    "label": "OXXO",\n    "brand": "OXXO"\n  },\n  "PAGOSNET": {\n    "render": "PP",\n    "label": "Pagosnet",\n    "brand": "PAGOSNET"\n  },\n  "PASTEANDPAY_V": {\n    "render": "VA",\n    "label": "PasteAndPay",\n    "brand": "PASTEANDPAY_V",\n    "customView": true\n  },\n  "PAYBOX": {\n    "render": "VA",\n    "label": "paybox",\n    "brand": "PAYBOX"\n  },\n  "PAYDIREKT": {\n    "render": "VA",\n    "label": "Paydirekt",\n    "brand": "PAYDIREKT"\n  },\n  "PAY_FAWRY": {\n    "render": "VA",\n    "label": "Pay @fawry",\n    "brand": "PAY_FAWRY"\n  },\n  "PAYOLUTION_ELV": {\n    "render": "VA",\n    "label": "payolution",\n    "brand": "PAYOLUTION_ELV"\n  },\n  "PAYOLUTION_INS": {\n    "render": "VA",\n    "label": "payolution",\n    "brand": "PAYOLUTION_INS"\n  },\n  "PAYOLUTION_INVOICE": {\n    "render": "VA",\n    "label": "payolution",\n    "brand": "PAYOLUTION_INVOICE"\n  },\n  "PAYPAL": {\n    "render": "VA",\n    "label": "PayPal",\n    "brand": "PAYPAL"\n  },\n  "PAYPAL_CONTINUE": {\n    "render": "VA",\n    "label": "PayPal Continue",\n    "brand": "PAYPAL_CONTINUE"\n  },\n  "PAYLIB": {\n    "render": "VA",\n    "label": "PayLib",\n    "brand": "PAYLIB"\n  },\n  "SENCILLITO": {\n    "render": "PP",\n    "label": "Sencillito",\n    "brand": "SENCILLITO"\n  },\n  "SHETAB": {\n    "render": "VA",\n    "label": "Shetab",\n    "brand": "SHETAB"\n  },\n  "STC_PAY": {\n    "render": "VA",\n    "label": "STC Pay",\n    "brand": "STC_PAY"\n  },\n  "PAGO_EFECTIVO": {\n    "render": "PP",\n    "label": "PagoEfectivo",\n    "brand": "PAGO_EFECTIVO"\n  },\n  "PAGO_FACIL": {\n    "render": "PP",\n    "label": "PagoFacil",\n    "brand": "PAGO_FACIL"\n  },\n  "PAYNET": {\n    "render": "PP",\n    "label": "PayNet",\n    "brand": "PAYNET"\n  },\n  "PAYSAFECARD": {\n    "render": "VA",\n    "label": "paysafecard",\n    "brand": "PAYSAFECARD"\n  },\n  "PAYTRAIL": {\n    "render": "OT",\n    "label": "Paytrail",\n    "brand": "PAYTRAIL"\n  },\n  "PF_KARTE_DIRECT": {\n    "render": "VA",\n    "label": "PostFinance Karte Direct",\n    "brand": "PF_KARTE_DIRECT"\n  },\n  "POLI": {\n    "render": "OT",\n    "label": "POLi",\n    "brand": "POLI"\n  },\n  "POSTEPAY": {\n    "render": "CC",\n    "label": "Postepay",\n    "brand": "POSTEPAY"\n  },\n  "PREPAYMENT": {\n    "render": "PP",\n    "label": "PrePayment",\n    "brand": "PREPAYMENT"\n  },\n  "PRESTO": {\n    "render": "CC",\n    "label": "Presto",\n    "brand": "PRESTO"\n  },\n  "PRZELEWY": {\n    "render": "VA",\n    "label": "przelewy24",\n    "brand": "PRZELEWY"\n  },\n  "PUNTO_RED": {\n    "render": "PP",\n    "label": "PuntoRed",\n    "brand": "PUNTO_RED"\n  },\n  "QIWI": {\n    "render": "VA",\n    "label": "Qiwi",\n    "brand": "QIWI",\n    "customView": true\n  },\n  "RAPI_PAGO": {\n    "render": "PP",\n    "label": "RapiPago",\n    "brand": "RAPI_PAGO"\n  },\n  "RATENKAUF": {\n    "render": "VA",\n    "label": "Ratenkauf",\n    "brand": "RATENKAUF"\n  },\n  "RED_SERVI": {\n    "render": "PP",\n    "label": "RedServi",\n    "brand": "RED_SERVI"\n  },\n  "RUPAY": {\n    "render": "CC",\n    "label": "RuPay",\n    "brand": "RUPAY"\n  },\n  "SERVIRED": {\n    "render": "CC",\n    "label": "ServiRed",\n    "brand": "SERVIRED"\n  },\n  "SADAD": {\n    "render": "OT",\n    "label": "SADAD",\n    "brand": "SADAD",\n    "customView": true\n  },\n  "SCOTIABANK": {\n    "render": "PP",\n    "label": "ScotiaBank",\n    "brand": "SCOTIABANK"\n  },\n  "SERVIPAG": {\n    "render": "PP",\n    "label": "Servipag",\n    "brand": "SERVIPAG"\n  },\n  "SIBS_MULTIBANCO": {\n    "render": "PP",\n    "label": "MULTIBANCO",\n    "brand": "SIBS_MULTIBANCO"\n  },\n  "SISTEMACLAVE": {\n    "render": "CC",\n    "label": "Sistema Clave",\n    "brand":"SISTEMACLAVE"\n  },\n  "SOFORTUEBERWEISUNG": {\n    "render": "OT",\n    "label": "SOFORT Überweisung",\n    "brand": "SOFORTUEBERWEISUNG"\n  },\n  "SPEI": {\n    "render": "PP",\n    "label": "Spei",\n    "brand": "SPEI"\n  },\n  "SU_RED": {\n    "render": "PP",\n    "label": "SuRed",\n    "brand": "SU_RED"\n  },\n  "SU_SUERTE": {\n    "render": "PP",\n    "label": "SuSuerte",\n    "brand": "SU_SUERTE"\n  },\n  "TARJETASHOPPING": {\n    "render": "CC",\n    "label": "Tarjeta Shopping",\n    "brand": "TARJETASHOPPING"\n  },\n  "TENPAY": {\n    "render": "VA",\n    "label": "TENPAY",\n    "brand": "TENPAY"\n  },\n  "TRUSTLY": {\n    "render": "VA",\n    "label": "TRUSTLY",\n    "brand": "TRUSTLY"\n  },\n  "TRUSTPAY_VA": {\n    "render": "VA",\n    "label": "Trustpay Virtual Account",\n    "brand": "TRUSTPAY_VA"\n  },\n  "_2C2P": {\n    "render": "VA",\n    "label": "2C2P",\n    "brand":"_2C2P"\n  },\n  "UKASH": {\n    "render": "VA",\n    "label": "Ukash",\n    "brand": "UKASH"\n  },\n  "UNIONPAY": {\n    "render": "CC",\n    "label": "UnionPay",\n    "brand": "UNIONPAY"\n  },\n  "UNIONPAY_GENERIC": {\n    "render": "CC",\n    "label": "UnionPay Generic",\n    "brand": "UNIONPAY_GENERIC",\n    "noCvv": true,\n    "noExpiryDate": true\n  },\n  "UNIONPAY_SMS": {\n    "render": "CC",\n    "label": "UnionPay SMS",\n    "brand": "UNIONPAY_SMS",\n    "mobilePhone": true\n  },\n  "VISA": {\n    "render": "CC",\n    "label": "Visa",\n    "brand": "VISA"\n  },\n  "VISADEBIT": {\n    "render": "CC",\n    "label": "Visa Debit",\n    "brand": "VISADEBIT"\n  },\n  "VISAELECTRON": {\n    "render": "CC",\n    "label": "Visa Electron",\n    "brand": "VISAELECTRON"\n  },\n  "VPAY": {\n    "render": "CC",\n    "label": "V PAY",\n    "brand": "VPAY"\n  },\n  "WECHAT_PAY": {\n    "render": "VA",\n    "label": "WeChat Pay",\n    "brand": "WECHAT_PAY"\n  },\n  "WESTERN_UNION": {\n    "render": "PP",\n    "label": "Western Union",\n    "brand": "WESTERN_UNION"\n  },\n  "YANDEX": {\n    "render": "VA",\n    "label": "Yandex",\n    "brand": "YANDEX"\n  },\n  "YANDEX_CARD": {\n    "render": "VA",\n    "label": "Yandex Card",\n    "brand": "YANDEX_CARD"\n  },\n  "YANDEX_CHECKOUT": {\n    "render": "VA",\n    "label": "Yandex Checkout",\n    "brand": "YANDEX_CHECKOUT"\n  },\n  "TCARD": {\n    "render": "CC",\n    "label": "T-CARD",\n    "brand": "TCARD"\n  },\n  "TCARDDEBIT": {\n    "render": "CC",\n    "label": "T-CARD Debit",\n    "brand": "TCARDDEBIT"\n  },\n  "PRIVATE_LABEL": {\n    "render": "CC",\n    "label": "Private label",\n    "brand": "PRIVATE_LABEL"\n  },\n  "ALIA": {\n    "render": "CC",\n    "label": "Alia",\n    "brand": "ALIA"\n  },\n  "ALIADEBIT": {\n    "render": "CC",\n    "label": "Alia Debit",\n    "brand": "ALIADEBIT"\n  },\n  "AIRPLUS": {\n    "render": "CC",\n    "label": "AirPlus",\n    "brand": "AIRPLUS",\n    "noCvv": true\n  },\n  "AFFIRM": {\n    "render": "VA",\n    "label": "Affirm",\n    "brand": "AFFIRM"\n  },\n  "SOFINCOSANSFRAIS": {\n    "render": "VA",\n    "label": "Sofinco Sans Frais",\n    "brand": "SOFINCOSANSFRAIS"\n  },\n  "SOFINCO": {\n    "render": "VA",\n    "label": "Sofinco",\n    "brand": "SOFINCO"\n  },\n  "JIFITI": {\n    "render": "VA",\n    "label": "Jifiti",\n    "brand": "JIFITI"\n  },\n  "TABBY": {\n    "render": "VA",\n    "label": "Tabby",\n    "brand": "TABBY"\n  },\n  "TAMARA": {\n    "render": "VA",\n    "label": "Tamara",\n    "brand": "TAMARA"\n  },\n  "CREDISENSA": {\n    "render": "CC",\n    "label": "Credisensa",\n    "brand": "CREDISENSA"\n  },\n  "CABAL": {\n    "render": "CC",\n    "label": "Cabal",\n    "brand": "CABAL"\n  },\n  "CABALDEBIT": {\n    "render": "CC",\n    "label": "Cabal Debit",\n    "brand": "CABALDEBIT"\n  },\n  "PIX": {\n    "render": "PP",\n    "label": "Pix",\n    "brand": "PIX"\n  },\n  "CASHLINKMALTA": {\n    "render": "CC",\n    "label": "CashlinkMalta",\n    "brand": "CASHLINKMALTA"\n  },\n  "SADAD_VA": {\n    "render": "VA",\n    "label": "Sadad VA",\n    "brand": "SADAD_VA"\n  },\n  "MSTART": {\n    "render": "VA",\n    "label": "Mstart",\n    "brand": "MSTART"\n  },\n  "SWISSBILLING": {\n    "render": "VA",\n    "label": "SwissBilling",\n    "brand": "SWISSBILLING"\n  },\n  "IKEA_PVL_IKANO_LOAN": {\n    "render": "CC",\n    "label": "IKEA_PVL_IKANO_LOAN",\n    "brand": "IKEA_PVL_IKANO_LOAN"\n  },\n  "CHÈQUE_VACANCES": {\n    "render": "VA",\n    "label": "Chèque Vacances",\n    "brand": "CHÈQUE-VACANCES"\n  }\n}\n';});


define('text!module/json/brands-validation.json',[],function () { return '{\n  "AMEX": {\n    "number": "(^3[47]\\\\d{13}$)|(^311111111111117$)",\n    "detection": "^3[47]",\n    "luhn": true,\n    "pattern": "{{9999}} {{999999}} {{99999}}",\n    "cvvLength": 4\n  },\n  "BELK_GIFT_CARD": {\n    "number": "(^\\\\d{14,19}$)",\n    "luhn": false,\n    "pattern": "{{9999}} {{9999}} {{9999}} {{9999}} {{999}}",\n    "cvvLength": 4,\n    "expiryDate": false\n  },\n  "CARTEBLEUE": {\n    "luhn": true,\n    "pattern": "{{9999}} {{9999}} {{9999}} {{9999}} {{9999}} {{9999}} {{9999}} {{9999}}"\n  },\n  "DINERS": {\n    "number": "^(30[0-5]\\\\d{11,16})|(3095\\\\d{12,15})|(36\\\\d{12,17})|(3[89]\\\\d{14,17})|(60110[^4]\\\\d{10,13})|(6011[2-4]\\\\d{11,14})|(60117[4789]\\\\d{10,13})|(60118[6-9]\\\\d{10,13})|(60119\\\\d{11,14})|(64[4-9]\\\\d{13,16})|(650[0-5]\\\\d{12,15})|(65060[^0]\\\\d{10,13})|(65061[^0]\\\\d{10,13})|(6506[2-9]\\\\d{11,14})|(650[7-9]\\\\d{12,15})|(65[^0]\\\\d{13,16})$",\n    "detection": "^(?:30[0-5]|3095|36|3[89])",\n    "luhn": true,\n    "pattern": "{{9999}} {{999999}} {{999999999}}"\n  },\n  "DISCOVER": {\n    "number": "^(30[0-5]\\\\d{11,16})|(3095\\\\d{12,15})|(36\\\\d{12,17})|(3[89]\\\\d{14,17})|(60110[^4]\\\\d{10,13})|(6011[2-4]\\\\d{11,14})|(60117[4789]\\\\d{10,13})|(60118[6-9]\\\\d{10,13})|(60119\\\\d{11,14})|(64[4-9]\\\\d{13,16})|(650[0-5]\\\\d{12,15})|(65060[^0]\\\\d{10,13})|(65061[^0]\\\\d{10,13})|(6506[2-9]\\\\d{11,14})|(650[7-9]\\\\d{12,15})|(65[^0]\\\\d{13,16})$",\n    "detection": "^(?:60110[^4]|6011[2-4]|60117[4789]|60118[6-9]|60119|64[4-9]|650[0-5]|65060[^0]|65061[^0]|6506[2-9]|650[7-9]|65[^0])",\n    "luhn": true,\n    "pattern": "{{9999}} {{9999}} {{9999}} {{9999}} {{999}}"\n  },\n  "ENROUTE": {\n    "number": "^(?:(?:2014)|(?:2149))\\\\d{11}$",\n    "luhn": true,\n    "pattern": "{{9999}} {{9999}} {{9999}} {{9999}} {{9999}} {{9999}} {{9999}} {{9999}}"\n  },\n  "JCB": {\n    "number": "^(?:(?:35(\\\\d{14}|\\\\d{17}))|(?:2131\\\\d{11})|(?:1800\\\\d{11}))$",\n    "detection": "^(?:35|2131|1800)",\n    "luhn": true,\n    "pattern": "{{9999}} {{9999}} {{9999}} {{9999}}"\n  },\n  "DANKORT": {\n    "number": "^(5019\\\\d{12}|4\\\\d{15})$",\n    "detection": "^(?:5019|4571)",\n    "luhn": true,\n    "pattern": "{{9999}} {{9999}} {{9999}} {{9999}}"\n  },\n  "BELK_PRIVATE_LABEL": {\n    "number": "(^604583\\\\d{10,13}$)",\n    "detection": "^604583",\n    "luhn": true,\n    "pattern": "{{9999}} {{9999}} {{9999}} {{9999}} {{999}}",\n    "expiryDate": false\n  },\n  "IK_PRIVATE_LABEL": {\n    "detection": "^(601779101|603231067|603231065|633156008|924610151|600200)",\n    "optionalCvv": true\n  },\n  "IK_PRIVATE_LABEL_VA": {\n    "detection": "^(601779101|603231067|603231065|633156008|924610151|600200)",\n    "optionalCvv": true\n  },\n  "IKEA_PVL_IKANO_LOAN": {\n    "number": "^(5558571)\\\\d{9}$",\n    "detection": "^(5558571)",\n    "luhn": true\n  },\n  "TCARD": {\n    "detection": "^(949625|949626|949627|949622|949623|949624|949610|949611|949612|949619|949620|949621|949628|949629|949630|949633|949634|949635|949636|949637|949638|949639|949640|949616|949617|949618|949613|949614|949615)"\n  },\n  "TCARDDEBIT": {\n    "detection": "^(949625|949626|949627|949622|949623|949624|949610|949611|949612|949619|949620|949621|949628|949629|949630|949633|949634|949635|949636|949637|949638|949639|949640|949616|949617|949618|949613|949614|949615)"\n  },\n  "MEEZA": {\n    "number": "^(507803)\\\\d{10}$",\n    "detection": "^(507803)",\n    "luhn": true\n  },\n  "MADA" : {\n    "number" : "^(406996|407197|407395|409201|410685|412565|417633|419593|420132|422817|422818|422819|428331|428671|428672|428673|431361|432328|434107|439954|440533|440647|440795|445564|446393|446404|446672|455036|455708|457865|458456|462220|468540|468541|468542|468543|483010|483011|483012|484783|486094|486095|486096|489318|489319|504300|508160|513213|520058|521076|524130|524514|529415|529741|530060|530906|531095|531196|532013|535825|535989|536023|537767|543085|543357|549760|554180|558563|585265|588845|588846|588848|588849|588850|588982|588983|589005|589206|604906|605141|636120|968201|968202|968203|968204|968205|968206|968207|968208|968209|968211)(\\\\d{7,13})$",\n    "detection" : "^(?:406996|407197|407395|409201|410685|412565|417633|419593|420132|422817|422818|422819|428331|428671|428672|428673|431361|432328|434107|439954|440533|440647|440795|445564|446393|446404|446672|455036|455708|457865|458456|462220|468540|468541|468542|468543|483010|483011|483012|484783|486094|486095|486096|489318|489319|504300|508160|513213|520058|521076|524130|524514|529415|529741|530060|530906|531095|531196|532013|535825|535989|536023|537767|543085|543357|549760|554180|558563|585265|588845|588846|588848|588849|588850|588982|588983|589005|589206|604906|605141|636120|968201|968202|968203|968204|968205|968206|968207|968208|968209|968211)",\n    "luhn" : true,\n    "pattern" : "{{9999}} {{9999}} {{9999}} {{9999}} {{999}}",\n    "expiryDate" : true\n  },\n  "MAESTRO": {\n    "number": "^(?!(53055|52816|515111|521662|530514|603231065|603231067))(((50)(\\\\d{10,17}$))|((5106)(\\\\d{8,15}$))|((511071)(\\\\d{6,13}$))|((511106)(\\\\d{6,13}$))|((51479)[23](\\\\d{6,13}$))|((5151)[12](\\\\d{7,14}$))|((515400)(\\\\d{6,13}$))|((5191)(\\\\d{8,15}$))|((5205)(\\\\d{8,15}$))|((5216)(\\\\d{8,15}$))|((5220)[89](\\\\d{7,14}$))|((5258)(\\\\d{8,15}$))|((5281)(\\\\d{8,15}$))|((529235)(\\\\d{6,13}$))|((53)[24](\\\\d{9,16}$))|((5305)(\\\\d{8,15}$))|((539043)(\\\\d{6,13}$))|((53905)[24](\\\\d{6,13}$))|((5407)(\\\\d{8,15}$))|((5435)(\\\\d{8,15}$))|((545391)(\\\\d{6,13}$))|((545433)(\\\\d{6,13}$))|((545729)(\\\\d{6,13}$))|((5464)(\\\\d{8,15}$))|((5464)(\\\\d{8,15}$))|((5509)(\\\\d{8,15}$))|((55310)[34](\\\\d{6,13}$))|((553725)(\\\\d{6,13}$))|((553783)(\\\\d{6,13}$))|((554563)(\\\\d{6,13}$))|((554587)(\\\\d{6,13}$))|((557205)(\\\\d{6,13}$))|((56)[0678](\\\\d{9,16}$))|((5610)(\\\\d{8,15}$))|((56119)(\\\\d{8,15}$))|((5612)(\\\\d{8,15}$))|((563)[235](\\\\d{8,15}$))|((564141)(\\\\d{6,13}$))|((564158)(\\\\d{6,13}$))|((5642)(\\\\d{8,15}$))|((5651)(\\\\d{8,15}$))((564076)(\\\\d{6,13}$))|((57)[0125789](\\\\d{9,16}$))|((573)[134](\\\\d{8,15}$))|((574)[25789](\\\\d{8,15}$))|((575)[234567](\\\\d{8,15}$))|((5768)(\\\\d{8,15}$))|((5817(?:02|07|15|21|24|[3][1,6-9]|[4][0,2-9]|50|51|56|66|69|73|78|84|87|90|91|97))(\\\\d{6,13}$))|((58)[34](\\\\d{9,16}$))|((581149|589242|589973|589785|589812|599032)(\\\\d{6,13}$))|((58980)(\\\\d{7,14}$))|((60)[1-6](\\\\d{9,16}$))|((600206)(\\\\d{6,13}$))|((600343|600452|603231|623020|627252)(\\\\d{6,13}$))|((60079)(\\\\d{7,14}$))|((6009)[0689](\\\\d{7,14}$))|(61\\\\d{10,17}$)|((621)[89](\\\\d{8,15}$))|((622)[01](\\\\d{8,15}$))|((627)(\\\\d{9,16}$))|((628)[01](\\\\d{8,15}$))|((6294)(\\\\d{8,15}$))|((630)[14](\\\\d{8,15}$))|((6338)(\\\\d{8,15}$))|((636)[0137](\\\\d{8,15}$))|((6371)(\\\\d{8,15}$))|((639)[0-7](\\\\d{8,15}$))|((640)[023468](\\\\d{8,15}$))|((641083)(\\\\d{6,13}$))|((641377)(\\\\d{6,13}$))|((641382)(\\\\d{6,13}$))|((641466)(\\\\d{6,13}$))|((641798)(\\\\d{6,13}$))|((641860)(\\\\d{6,13}$))|((642041)(\\\\d{6,13}$))|((642068)(\\\\d{6,13}$))|((642097)(\\\\d{6,13}$))|((642098)(\\\\d{6,13}$))|((6421)[4579](\\\\d{7,14}$))|((64211)[079](\\\\d{6,13}$))|((6422)[02456](\\\\d{7,14}$))|((642301)(\\\\d{6,13}$))|((642335)(\\\\d{6,13}$))|(67\\\\d{10,17}$)|((7083)(\\\\d{8,15}$))|((589004|589283|589311|589229|505874|505878|601073|504997|601030|560332)(\\\\d{6,13}$)))",\n    "detection": "^(?!(510658|515111|519123|519163|521662|52816|530514|53055|543556|543557|543560|603231065|603231067))(?=(5018|5020|5038|504997|505874|505878|5106|511071|511106|51479[23]|5151[12]|515400|5191|5205|5216|5220[89]5258|5281|529235|5305|539043|53905[24]|53[24]5407|5435|545391|545433|545729|5464|5464|5509|55310[34]553725|553783|554563|554587|557205|560332|5610|56119|5612|563[235]|564076|564141|564158|5642|5651|56[0678]573[134]|574[25789]|575[234567]|5768|57[0125789]|5817|581149|589004|589229|589242|589283|589311|589916|589973|589785|58980|589812|58[34]599032|600206|600343|600452|601030|601073|603231|60079|6009[0689]|60[1-6]|61|621[89]|622[01]|623020|627|628[01]|6294|630[14]|6338|636[137]|6371|639[0-7]|640[023468]641083|641377|641382|641466|641798|641860|642041|642068|642097|642098|64211[079]|6421[4579]|6422[02456]|642301|642335|67|7083))",\n    "luhn": true,\n    "pattern": "{{9999}} {{9999}} {{9999}} {{9999}} {{999}}",\n    "optionalCvv": true\n  },\n  "MASTER": {\n    "number": "^(?!(589004|589283|589311|589229|561257|505874|505878|601073|504997|601030|560332|530514))((5[0-8]\\\\d{14}$)|((5396)(\\\\d{8,15}$))|((5410)(\\\\d{8,15}$))|((5471)(\\\\d{8,15}$))|(6[17]\\\\d{14}$)|(7[017]\\\\d{14}$)|(2[3-6]\\\\d{14}$)|(22[3-9]\\\\d{13}$)|(222[1-9]\\\\d{12}$)|(27[01]\\\\d{13}$)|(2720\\\\d{12}$))",\n    "detection": "^(?!(589004|589283|589311|589229|561257|505874|505878|601073|504997|601030|560332|530514))(?=(5[0-8]|6[17]|7[017]|2[3-6]|22[3-9]|222[1-9]|27[01]|2720|5396|5410|5471))",\n    "luhn": true,\n    "pattern": "{{9999}} {{9999}} {{9999}} {{9999}}"\n  },\n  "MASTERDEBIT": {\n    "number": "^(?!(589004|589283|589311|589229|561257|505874|505878|601073|504997|601030|560332|521662))((5[0-8]\\\\d{14}$)|(53562)(\\\\d[6-9])(\\\\d{10})|(53563)(\\\\d[0,1])(\\\\d{10})|(53564)(\\\\d[7,8])(\\\\d{10})|()(535670)(\\\\d{10})|((5396)(\\\\d{8,15}$))|(6[17]\\\\d{14}$)|(7[017]\\\\d{14}$)|(2[3-6]\\\\d{14}$)|(22[3-9]\\\\d{13}$)|(222[1-9]\\\\d{12}$)|(27[01]\\\\d{13}$)|(2720\\\\d{12}$))",\n    "detection": "^(?!(589004|589283|589311|589229|561257|505874|505878|601073|504997|601030|560332|521662))(?=(5[0-8]|6[17]|7[017]|2[3-6]|22[3-9]|222[1-9]|27[01]|2720|5396))",\n    "luhn": true,\n    "pattern": "{{9999}} {{9999}} {{9999}} {{9999}}"\n  },\n  "VISA": {\n    "number": "^4(?:(?:\\\\d{12})|(?:\\\\d{15})|(?:\\\\d{16})|(?:\\\\d{17})|(?:\\\\d{18}))$",\n    "detection": "^4",\n    "luhn": true,\n    "pattern": "{{9999}} {{9999}} {{9999}} {{9999}} {{999}}"\n  },\n  "VISAELECTRON": {\n    "number": "^4(?:(?:\\\\d{12})|(?:\\\\d{15})|(?:\\\\d{16})|(?:\\\\d{17})|(?:\\\\d{18}))$",\n    "detection": "^4",\n    "luhn": true,\n    "pattern": "{{9999}} {{9999}} {{9999}} {{9999}} {{999}}"\n  },\n  "VISADEBIT": {\n    "number": "^4\\\\d*",\n    "detection": "^4",\n    "luhn": true,\n    "pattern": "{{9999}} {{9999}} {{9999}} {{9999}} {{999}}"\n  },\n  "POSTEPAY": {\n    "number": "^4\\\\d*",\n    "detection": "^4",\n    "luhn": true,\n    "pattern": "{{9999}} {{9999}} {{9999}} {{9999}} {{9999}} {{9999}} {{9999}} {{9999}}"\n  },\n  "UNIONPAY": {\n    "number": "^\\\\d{8,}$",\n    "luhn": false,\n    "pattern": "{{9999}} {{9999}} {{9999}} {{9999}} {{999}}"\n  },\n  "UNIONPAY_GENERIC": {\n    "number": "^\\\\d{8,}$",\n    "luhn": false,\n    "pattern": "{{9999}} {{9999}} {{9999}} {{9999}} {{999}}",\n    "optionalCvv": true,\n    "expiryDate": false\n  },\n  "UNIONPAY_SMS": {\n    "number": "^\\\\d{8,}$",\n    "luhn": false,\n    "pattern": "{{9999}} {{9999}} {{9999}} {{9999}} {{999}}",\n    "optionalCvv": true,\n    "expiryDate": false\n  },\n  "NARANJA": {\n    "luhn": false\n  },\n  "PRIVATE_LABEL": {\n    "number": "^\\\\d{10,21}$",\n    "luhn": false,\n    "optionalCvv": true,\n    "expiryDate": false\n  },\n  "ALIA": {\n    "detection": "^(504997|60103|601073|505874|505878)",\n    "luhn": false,\n    "optionalCvv": true,\n    "expiryDate": true\n  },\n  "ALIADEBIT": {\n    "detection": "^(504997|60103|601073|505874|505878)",\n    "luhn": false,\n    "optionalCvv": true,\n    "expiryDate": true\n  },\n  "AIRPLUS": {\n    "number": "^(1220|1920)\\\\d{11}$",\n    "detection": "^(1220|1920)",\n    "luhn": true,\n    "expiryDate": true\n  },\n  "ONEY_BANK_CARD": {\n    "number": "^(49715202|49716402)\\\\d*",\n    "detection": "^(49715202|49716402)",\n    "luhn": false\n  },\n  "ONEY_PRIVATE_CARD": {\n    "number": "^(50320202|50320222|50320226|50320260|50320261|50320262)\\\\d*",\n    "detection": "^(50320202|50320222|50320226|50320260|50320261|50320262)",\n    "luhn": false\n  },\n  "SISTEMACLAVE": {\n    "number": "^(588968\\\\d{3,}|601377\\\\d{3,})$",\n    "detection": "^(588968|601377)",\n    "luhn": false\n  },\n  "CARTEBANCAIRE": {\n    "number": "^[4-6]\\\\d*",\n    "detection": "^[4-6]",\n    "luhn": true,\n    "pattern": "{{9999}} {{9999}} {{9999}} {{9999}} {{999}}"\n  },\n  "CREDISENSA": {\n    "number": "^(900010|960018|555067|910001|919901|920001|929901)\\\\d*",\n    "detection": "^(900010|960018|555067|910001|919901|920001|929901)",\n    "luhn": false\n  },\n  "CABAL": {\n    "number": "^(589657|(6042(0[2|6|7|8|9]))|(6042(1[1|2|3|5|6|9]))|604228|604233|(6042(4[4|5|9]))|(6042(5[0|1|4|6]]))|604265)|(60431[6|7|9])|604327|(60434[1|2|3|5|7|8])]\\\\d*",\n    "detection": "^(589657|(6042(0[2|6|7|8|9]))|(6042(1[1|2|3|5|6|9]))|604228|604233|(6042(4[4|5|9]))|(6042(5[0|1|4|6]]))|604265)|(60431[6|7|9])|604327|(60434[1|2|3|5|7|8])]",\n    "luhn": true\n  },\n  "CABALDEBIT": {\n    "number": "^(604201|604218|604246)\\\\d*",\n    "detection": "^(604201|604218|604246)",\n    "luhn": true\n  },\n  "CASHLINKMALTA": {\n    "number": "^(588731)\\\\d{11}$",\n    "detection": "^(588731)",\n    "luhn": true\n  }\n}\n';});

/*jshint camelcase: false */
define('module/Setting',['require','jquery','module/Parameter','module/forms/CardPaymentForm','text!module/json/brands.json','text!module/json/brands-validation.json'],function(require) {

	var $ = require('jquery');
	var Parameter = require('module/Parameter');
	var CardPaymentForm = require('module/forms/CardPaymentForm');

    // These JSONs are generated from the brand library during compilation.
    var brands = require("text!module/json/brands.json");
    var validation = require("text!module/json/brands-validation.json");

	function s() {}

	return s.subTypeLabelMap = JSON.parse(brands),

	s.usesBirthDate = function(brand) {
		var brandConfig = this.subTypeLabelMap[brand];
		return ( brandConfig !== undefined && brandConfig.birthDate);
	},

    s.cardPaymentBrandSelect = {
        brand:  { i18nIdentifier:"brand", name:"paymentBrand", type:"select"}
    },

    s.cardPaymentBrandLogos = {
        brand:  { i18nIdentifier:"brand", name:"paymentBrand", type:"logos"}
    },

	s.cardPaymentBasic = {
		cardNumber: { i18nIdentifier:"cardNumber", name:"card.number", type:"iframe" },
		//expiryMonth & expiryYear are now hidden inputs filled from text input in format MM / YY
		expiry: { i18nIdentifier:"expiryDate", id:"ccexp", type:"tel", i18nPlaceholderIdentifier:"mmyy", dataAction:"blur-card-expiry" },
		cardHolder: { i18nIdentifier:"cardHolder", name:"card.holder", type:"text" }
	},

	s.cardPaymentBasicSAQA = {
		//expiryMonth & expiryYear are now hidden inputs filled from text input in format MM / YY
		expiry: { i18nIdentifier:"expiryDate", id:"ccexp", type:"iframe", i18nPlaceholderIdentifier:"mmyy", dataAction:"blur-card-expiry" },
		cardHolder: { i18nIdentifier:"cardHolder", name:"card.holder", type:"iframe" }
	},

	s.cardPaymentMobile = {
		mobilePhoneCountryCode: { i18nIdentifier:"countryCodePhone", name:"customParameters[MOBILE_COUNTRY_CODE]", type:"text", maxLength:5 },
		mobilePhoneNumber: { i18nIdentifier:"mobilePhone", name:"customer.mobile", type:"text", maxLength:12 }
	},

	s.cardPaymentBirthDate = {
	    birthDate : { i18nIdentifier:"birthDate", name:CardPaymentForm.WIDGET_BIRTH_DATE, type:"text", i18nPlaceholderIdentifier:"ddmmyyyy" }
	},

	s.cardPaymentDataWithoutCvv = $.extend({},
	    s.cardPaymentBrandSelect,
	    s.cardPaymentBasic,
	    s.cardPaymentMobile,
	    s.cardPaymentBirthDate,
	    { submit : {type: "submit"} }),

	s.cardPaymentDataLogoStyleWithoutCvv = $.extend({},
	    s.cardPaymentBrandLogos,
	    s.cardPaymentBasic,
	    s.cardPaymentMobile,
	    s.cardPaymentBirthDate,
	    { submit : {type: "submit"} }),

    // We need to maintain the order of components. We can alternatively achieve that with array and insert to specific position
	s.cardPaymentData = $.extend({},
	    s.cardPaymentBrandSelect,
	    s.cardPaymentBasic,
	    { cvv : { i18nIdentifier:"cvv", i18nPlaceholderIdentifier:"cvvPlaceholder", name:"card.cvv", type:"iframe", maxLength:4 } },
	    s.cardPaymentMobile,
	    s.cardPaymentBirthDate,
	    { submit : {type: "submit"}}),

	s.cardPaymentDataLogoStyle = $.extend({},
	    s.cardPaymentBrandLogos,
	    s.cardPaymentBasic,
	    { cvv : { i18nIdentifier:"cvv", i18nPlaceholderIdentifier:"cvvPlaceholder", name:"card.cvv", type:"iframe", maxLength:4 } },
	    s.cardPaymentMobile,
	    s.cardPaymentBirthDate,
	    { submit : {type: "submit"}}),

	s.directDebitSepaPaymentData = {
		accountHolder: { i18nIdentifier:"accountHolder", name:"bankAccount.holder", type:"text" },
		accountIban: { i18nIdentifier:"accountIban", name:"bankAccount.iban", type:"text" },
		accountBic: { i18nIdentifier:"accountBankBic", name:"bankAccount.bic", type:"text" },
		submit: {type: "submit"}
	},

	s.sepaPaymentData = {
        accountHolder: { i18nIdentifier:"accountHolder", name:"bankAccount.holder", type:"text" },
		accountIban: { i18nIdentifier:"accountIban", name:"bankAccount.iban", type:"text" },
		mandateAuthorization: { i18nIdentifier:"mandateAuthorization", type:"textOnly" },
		mandateEntitlement: { i18nIdentifier:"mandateEntitlement", type:"textOnly" },
		mandateConfirmation: { i18nIdentifier:"mandateConfirmation", type:"confirmation" },
        submit: {type: "submit"}
    },

	s.directDebitSepaMixPaymentData = {
		country:  { i18nIdentifier: "country", name:"bankAccount.country", type:"select"},
		accountHolder: { i18nIdentifier:"accountHolder", name:"bankAccount.holder", type:"text" },
		accountIban: { i18nIdentifier:"accountNumberIban", name:"bankAccount.iban", type:"text" },
		accountBic: { i18nIdentifier:"accountBankBic", name:"bankAccount.bic", type:"text" },
		submit: {type: "submit"}
	},
	s.directDebitPaymentData = {
		country:  { i18nIdentifier: "country", name:"bankAccount.country", type:"select"},
		accountHolder: { i18nIdentifier:"accountHolder", name:"bankAccount.holder", type:"text" },
		accountNumber: { i18nIdentifier:"accountNumber", name:"bankAccount.number", type:"tel" },
		accountBank: { i18nIdentifier:"accountBank", name:"bankAccount.bankCode", type:"tel" },
		submit: {type: "submit"}
	},

	s.nameToClassMap={

	},
	s.paymentTypeSetup={
		IV:{},
		OD: {},
		OT: {
			EPS:{
				bankName:{
					name: "bankAccount.bic",
					live:{
						BKAUATWWXXX:"Bank Austria",
						BAWAATWWXXX : "BAWAG P.S.K. AG",
						GIBAATWGXXX : "Erste Bank und Sparkassen",
						RANMAT21XXX : "Raiffeisen Bankengruppe Österreich",
						RZOOAT2L796 : "bankdirekt.at AG",
						RZOOAT2L795 : "PRIVAT BANK AG",
						VBOEATWWXXX : "Volksbank Gruppe",
						OBKLAT2LXXX : "Oberbank AG",
						BTVAAT22XXX : "BTV VIER LÄNDER BANK",
						BFKKAT2KXXX : "BKS Bank AG",
						HAABAT22XXX : "Hypo Alpe-Adria-Bank International AG",
						HYINAT22XXX : "HYPO NOE Gruppe Bank AG",
						HYPNATWWXXX : "HYPO NOE Landesbank AG",
						HYPTAT22XXX : "Hypo Tirol Bank AG",
						HYPVAT2BXXX : "Hypo Landesbank Vorarlberg",
						EHBBAT2EXXX : "HYPO-BANK BURGENLAND Aktiengesellschaft",
						OBLAAT2LXXX : "HYPO Oberösterreich,Salzburg,Steiermark",
						VBOEATWWAPO : "Apothekerbank",
						BWFBATW1XXX : "Ärztebank",
						SPAEAT2SXXX : "Bankhaus Carl Spängler &amp; Co.AG",
						BSSWATWWXXX : "Bankhaus Schelhammer &amp; Schattera AG",
						EASYATW1XXX : "Easybank AG",
						VOHGATW1XXX : "Immo-Bank",
						SCHOATWWXXX : "Schoellerbank AG",
						SPDAAT21XXX : "SPARDA-BANK AUSTRIA Nord",
						SVIEAT21XXX : "SPARDA-BANK AUSTRIA Süd",
						SPADATW1XXX : "Sparda Bank Wien",
						VKBLAT2LXXX : "Volkskreditbank AG",
						VRBKAT21XXX : "VR-Bank Braunau",
						HAABAT2KXXX : "Austrian Anadi Bank AG"
					},
					test:{
						BKAUATWWXXX:"Bank Austria",
						BAWAATWWXXX:"BAWAG P.S.K. AG",
						GIBAATWGXXX:"Erste Bank und Sparkassen TEST",
						RZTIAT22343:"Raiffeisen Bankengruppe Österreich",
						VBOEATWWAPO:"Volksbank Gruppe",
						OBKLAT2LXXX:"Oberbank AG",
						BFKKAT2KXXX:"BKS Bank AG",
						BTVAAT22XXX:"Bank für Tirol und Vorarlberg AG",
						HAABAT2KXXX:"Hypo Alpe-Adria-Bank AG",
						HYINAT22XXX:"HYPO NOE Gruppe Bank AG",
						HYPNATWWXXX:"HYPO NOE Landesbank AG",
						HYPTAT22XXX:"Hypo Tirol Bank AG",
						HYPVAT2BXXX:"Hypo Landesbank Vorarlberg",
						EHBBAT2EXXX:"HYPO-BANK BURGENLAND Aktiengesellschaft",
						SLHYAT2SXXX:"HYPO Oberösterreich,Salzburg,Steiermark",
						OBLAAT2LXXX:"Hypo-Integrations-Bankengruppe",
						BWFBATW1XXX:"Ärztebank",
						SPAEAT2SXXX:"Bankhaus Carl Spängler &amp; Co.AG",
						BSSWATWWXXX:"Bankhaus Schelhammer &amp; Schattera AG",
						EASYATW1XXX:"Easybank AG",
						VOHGATW1XXX:"Immo-Bank",
						SCHOATWWXXX:"Schoellerbank AG",
						SPDAAT21XXX:"Sparda-Bank Austria Nord",
						SVIEAT21XXX:"Sparda-Bank Austria Süd",
						SPADATW1XXX:"Sparda Bank Wien",
						VKBLAT2LXXX:"Volkskreditbank AG",
						VRBKAT21XXX:"VR-Bank Braunau",
						RZOOAT2LXXX:"Raiffeisen-Integration Bankengruppe AT",
						RZOOAT2L834:"Raiffeisen-Pilot Bankengruppe AT",
						RZOOAT2L795:"PRIVATBANK-Integrations-Bankengruppe",
						RZOOAT2L796:"Bankdirekt-Integrations-Bankengruppe",
						RZOOAT2L777:"Raiffeisen-Referenz-Bankengruppe"
					}
				},
				country:{
					name: "bankAccount.country",
					live:{ AT: "Austria" },
					test:{ AT: "Austria" }
				}
			},
			IDEAL:{
				func: {
					method: "renderIdeal",
					data: {
						live:{
							NL: "Netherlands"
						},
						test:{
							NL: "Netherlands"
						}
					}
				}
			},
			SADAD:{
				olpId:{ name: "customParameters[SADAD_OLP_ID]" }
			},
			SOFORTUEBERWEISUNG:{
				country:{
					name: "bankAccount.country",
					live: {
						DE: "Deutschland",
						NL: "Nederland",
						AT: "Österreich",
						BE: "Belgique",
						CH: "Schweiz",
						GB: "United Kingdom",
						ES: "España",
						IT: "Italia",
						PL: "Polska"
					},
					test: {
						DE: "Deutschland",
						NL: "Nederland",
						AT: "Österreich",
						BE: "Belgique",
						CH: "Schweiz",
						GB: "United Kingdom",
                        ES: "España",
                        IT: "Italia",
                        PL: "Polska"
					}
				}
			},
			GIROPAY:{
				country:{
					name: "bankAccount.country",
					live: {
						DE: "Deutschland"
					},
					test: {
						DE: "Deutschland"
					}
				},
				accountNumberIban:{ name: "bankAccount.number" }, //input field
				accountBankBic:{ name: "bankAccount.bankCode" } //input field
			},
			ENTERCASH:{
                country:{
                	name: "bankAccount.country",
                	live: {
                		CZ: "Česká republika",
                        DK: "Danmark",
                        DE: "Deutschland",
                        IT: "Italia",
                		AT: "Österreich",
                        PL: "Polska",
                        MT: "Repubblika ta' Malta",
                        FI: "Suomi",
                		SK: "Slovensko",
                        SE: "Sverige",
                        GR: "Ελλάδα"
                   	},
                	test: {
                		CZ: "Česká republika",
                        DK: "Danmark",
                        DE: "Deutschland",
                        IT: "Italia",
                        AT: "Österreich",
                        PL: "Polska",
                        MT: "Repubblika ta' Malta",
                        FI: "Suomi",
                        SK: "Slovensko",
                        SE: "Sverige",
                        GR: "Ελλάδα"
                	}
                }
			},
			INTERAC_ONLINE:{
                country:{
                    name: "bankAccount.country",
                    live: {
                        CA: "Canada"
                    },
                    test: {
                        CA: "Canada"
                    }
                }
			},
			PAYTRAIL: {
                country:{
                    name: "bankAccount.country",
                    live: {
                        FI: "Finland"
                    },
                    test: {
                        FI: "Finland"
                    }
                }
            }
		},
		PP: {
			BOLETO:{
				country:{
					name: "bankAccount.country",
					live:{ BR: "Brazil" },
					test:{ BR: "Brazil" }
				}
			}
		},
		VA:{
			PASTEANDPAY_V:{
				accountId:{ name : "virtualAccount.accountId" } //input field
			},
			KLARNA_INVOICE:{ // if there is more stuff to do, not only adding input or select fields.  Use a function for that
				func: {
					method: 'renderKlarnaInvoice'
				}
			},
			KLARNA_INSTALLMENTS:{ // if there is more stuff to do, not only adding input or select fields.  Use a function for that
				func: {
					method: 'renderKlarnaInstallments'
				}
			},
			MASTERPASS: {
				func: {
					method: 'renderMasterpass',
					data: {
						languagesWithLearnMorePage: ["en", "sv", "fr", "it", "es"]
					}
				}
			},
			NETELLER: {
				emailOrAccountId: {
					name: "customParameters[NETELLER_NET_ACCOUNT]"
				},
				secureId: {
					name: "customParameters[NETELLER_SECURE_ID]"
				}
			},
			CHINAUNIONPAY: {
				cardHolder: {
					name: "virtualAccount.holder"
				}
			},
			QIWI: {
				customerMobile: {
					name: "customer.mobile"
				}
			},
			ASTROPAY_STREAMLINE_OT: {
				func: {
					method: 'renderEmptyAstropayStreamline'
            	}
			},
			ASTROPAY_STREAMLINE_CASH: {
				func: {
					method: 'renderEmptyAstropayStreamline'
				}
			},
            AFFIRM: {
                func: {
                    method: 'renderWithoutButton'
                }
            },
			APPLEPAY: {
				func: {
					method: 'renderWithoutButton',
				}
			},
			GOOGLEPAY: {
				func: {
					method: 'renderWithoutButton',
				}
			},
			MBWAY: {
                customerEmail: {
                    name: "virtualAccount.accountId"
                },
                or: {
                    type: "simple-text",
					i18nIdentifier: "or",
                    content: "or"
                },

				countryCodePhone:{
				    type: "force-dropdown",
					name: "virtualAccount.holder",
					live: {
						'351': "Portugal 351"
					},
					test: {
						'351': "Portugal 351"
					}
				},
                mobilePhone: {
                    name: "virtualAccount.accountId"
                },
                pushNotification: {
                    type: "simple-text",
					i18nIdentifier: "pushNotification",
                    content: "A push notification will be sent to your device."
                },
                pleaseAccept: {
                    type: "simple-text",
					i18nIdentifier: "pleaseAccept",
                    content: "Please accept the transaction with your PIN MB WAY."
                }
            },
            IKANOOI_FI: {
				func: {
					method: 'renderIkanoOpenInvoice',
					data: {
					    brand: "IKANOOI_FI",
						termsAndConditionsLink: [{locale: "FI", link: "https://terms.bank.ikano/fi/fi/ikea/openinvoice/toc.pdf"},
						                         {locale: "SV", link: "https://terms.bank.ikano/fi/sv/ikea/openinvoice/toc.pdf"}]
					}
				}
            },
            IKANOOI_NO: {
				func: {
					method: 'renderIkanoOpenInvoice',
					data: {
					    brand: "IKANOOI_NO",
						label: "Ikano Faktura NO",
						termsAndConditionsLink: {link: "https://terms.bank.ikano/no/no/ikea/openinvoice/toc.pdf"}
					}
				}
            },
            IKANOOI_SE: {
				func: {
					method: 'renderIkanoOpenInvoice',
					data: {
					    brand: "IKANOOI_SE",
						label: "Ikano Faktura SE",
						termsAndConditionsLink: {link: "https://terms.bank.ikano/se/sv/ikea/openinvoice/toc.pdf "}
					}
				}
            },
            IK_PRIVATE_LABEL_VA: {
                	accountNumber: { i18nIdentifier:"accountNumber", name:Parameter.GIFT_CARD_NUMBER, type:"tel" },
                	expiryDate: { i18nIdentifier:"expiryDate", i18nPlaceholderIdentifier:"mmyy", name:Parameter.GIFT_CARD_EXPIRY_DATE, type:"tel" },
                	accountVerification: { i18nIdentifier:"accountVerification", name:Parameter.GIFT_CARD_CODE, type:"tel", maxLength:5 }
            },
            DATACODE: {
                 func: {
                      method: 'renderDataCodeOpenInvoice'
                          }
            },
            STC_PAY: {
				func: {
					method: 'renderStcPay',
					data: {
						brand: "STC_PAY",
						paymentMode: {i18nIdentifier: "paymentMode", name: "paymentMode", type:"textOnly"},
						paymentModeOptions: {
							qrcode: {name: Parameter.SHOPPER_PAYMENT_MODE, type: "radio", value: "qr_code", dataAction:"qrcode-radio-action"},
							mobile: {name: Parameter.SHOPPER_PAYMENT_MODE, type: "radio", value: "mobile", dataAction:"mobile-radio-action"}
						},
						mobilePhone: { i18nIdentifier:"mobilePhone", name: Parameter.MOBILE_NUMBER, type:"text"}
						}
				}
            },
            TAMARA: {
            		mobilePhone: {
            			name: "customer.mobile"
            		}
            }
		}
	},
	s.specialSettings = {
		KLARNA_INVOICE: {
			billingAgreement: {
				NL: "Factuurvoorwaarden",
				DE: "Rechnungsbedingungen",
				AT: "Rechnungsbedingungen",
				DK: "Vilkår for faktura",
				FI: "Laskuehdot",
				NO: "Vilkår for faktura",
				SE: "Villkor för faktura"
			},
			billingAgreementLink: {
				NL: "https://cdn.klarna.com/1.0/shared/content/legal/terms/{EID}/nl_nl/invoice",
				DE: "https://cdn.klarna.com/1.0/shared/content/legal/terms/{EID}/de_de/invoice",
				AT: "https://cdn.klarna.com/1.0/shared/content/legal/terms/{EID}/de_at/invoice",
				DK: "https://cdn.klarna.com/1.0/shared/content/legal/terms/{EID}/da_dk/invoice",
				FI: "https://cdn.klarna.com/1.0/shared/content/legal/terms/{EID}/fi_fi/invoice",
				NO: "https://cdn.klarna.com/1.0/shared/content/legal/terms/{EID}/nb_no/invoice",
				SE: "https://cdn.klarna.com/1.0/shared/content/legal/terms/{EID}/sv_se/invoice"
			},
			generalTermsAndConditions: {
				DE: "Mit der Übermittlung der für die Abwicklung der gewählten Klarna Zahlungsmethode " +
						"und einer Identitäts- und Bonitätsprüfung erforderlichen Daten an Klarna bin ich " +
						"einverstanden. " +
						"Meine <a target='_blank' href='https://cdn.klarna.com/1.0/shared/content/legal/terms/{EID}/de_de/consent'>" +
						"Einwilligung</a> kann ich jederzeit mit Wirkung für die Zukunft widerrufen. " +
						"Es gelten die AGB des Händlers.",
				AT: "Mit der Übermittlung der für die Abwicklung der gewählten Klarna Zahlungsmethode " +
						"und einer Identitäts- und Bonitätsprüfung erforderlichen Daten an Klarna bin ich " +
						"einverstanden. " +
						"Meine <a target='_blank' href='https://cdn.klarna.com/1.0/shared/content/legal/terms/{EID}/de_at/consent'>" +
						"Einwilligung</a> kann ich jederzeit mit Wirkung für die Zukunft widerrufen. " +
						"Es gelten die AGB des Händlers."
			},
			title: {
				AT: "Rechnung",
				DE: "Rechnung",
				DK: "Faktura",
				FI: "Lasku",
				NL: "Factuur",
				NO: "Faktura",
				SE: "Faktura"
			}
		},
		KLARNA_INSTALLMENTS: {
			readMore: {
				NL: "Lees meer!",
				DE: "Lesen Sie mehr!",
				AT: "Lesen Sie mehr!",
				DK: "Læs mere",
				FI: "Lue lisää",
				NO: "Les mer",
				SE: "Läs mer"
			},
			readMoreLink: {
				NL: "https://cdn.klarna.com/1.0/shared/content/legal/terms/{EID}/nl_nl/account",
				DE: "https://cdn.klarna.com/1.0/shared/content/legal/terms/{EID}/de_de/account",
				AT: "https://cdn.klarna.com/1.0/shared/content/legal/terms/{EID}/de_de/account",
				DK: "https://cdn.klarna.com/1.0/shared/content/legal/terms/{EID}/da_dk/account",
				FI: "https://cdn.klarna.com/1.0/shared/content/legal/terms/{EID}/fi_fi/account",
				NO: "https://cdn.klarna.com/1.0/shared/content/legal/terms/{EID}/nb_no/account",
				SE: "https://cdn.klarna.com/1.0/shared/content/legal/terms/{EID}/sv_se/account"
			},
			generalTermsAndConditions: {
				NL: "/v1/paymentWidgets/img/banner/nl/credit_warning.png",
				DE: "Mit der Übermittlung der für die Abwicklung der gewählten Klarna Zahlungsmethode " +
					"und einer Identitäts- und Bonitätsprüfung erforderlichen Daten an Klarna bin ich " +
					"einverstanden. " +
					"Meine <a target='_blank' href='https://cdn.klarna.com/1.0/shared/content/legal/terms/{EID}/de_de/consent'>" +
					"Einwilligung</a> kann ich jederzeit mit Wirkung für die Zukunft widerrufen. " +
					"Es gelten die AGB des Händlers.",
				AT: "Mit der Übermittlung der für die Abwicklung der gewählten Klarna Zahlungsmethode " +
					"und einer Identitäts- und Bonitätsprüfung erforderlichen Daten an Klarna bin ich " +
					"einverstanden. " +
					"Meine <a target='_blank' href='https://cdn.klarna.com/1.0/shared/content/legal/terms/{EID}/de_de/consent'>" +
					"Einwilligung</a> kann ich jederzeit mit Wirkung für die Zukunft widerrufen. " +
					"Es gelten die AGB des Händlers."
			},
			title: {
				AT: "Ratenkauf",
				DE: "Ratenkauf",
				DK: "Konto",
				FI: "Tili",
				NL: "Account",
				NO: "Konto",
				SE: "Konto"
			}
		}
	},
	s.nonCardPaymentTypeClassMap={
		DD: "directDebit",
		OD: "cashOnDelivery",
		IV: "invoice",
		OT: "onlineTransfer",
		PP: "prepayment",
		VA: "virtualAccount"
	},
	s.cardValidation=JSON.parse(validation),
	s;
});

/**
 * options set by merchant before paymentWidgets.js
 */
define('module/WpwlOptions',[],function(){
	var wpwlOptions = window.wpwlOptions || /* istanbul ignore next */ {};

	return wpwlOptions;
});

define('module/Options',['require','jquery','module/Setting','module/WpwlOptions'],function(require){
	var $ = require('jquery');
	var Setting = require('module/Setting');
	var WpwlOptions = require('module/WpwlOptions');

	// overwrite Settings hacks
	// by now Payment.generateNonCreditCardLabelInput does not support special cases like this.
	// So we override Settings. Please don't do this to excessively!
	/* istanbul ignore else */
	if ($.type(WpwlOptions.sofortCountries) === 'object') {
		var countries = Setting.paymentTypeSetup.OT.SOFORTUEBERWEISUNG.country;
		countries.test = WpwlOptions.sofortCountries;
		countries.live = WpwlOptions.sofortCountries;
	}

	// default config, which will be overridden by wpwlOptions
	var Options = {};

	// localization
	Options.locale = 'en';

	//number formatting
	Options.numberFormatting = true;

	// style
	Options.style = 'card';
	Options.imageStyle = 'png';
	
	// initialization
	Options.onReady = function(){};

	Options.onReadyExternal = function(){};

	// target iframe
	Options.paymentTarget = undefined; // undefined: the containers id will be used as target
	Options.threeDIframeSize = {width: '100%', height: '580px'};
	Options.onLoadThreeDIframe = function(){};

	//target iframe for Bancontact QR
	Options.bancontactQr = {width: '100%', height: '270px'};

	// cvv
	Options.requireCvv = true; // By default - cvv field should be displayed in the form (remark: name of this parameter can be deceiving).
	Options.allowEmptyCvv = false; // By default - cvv should not be empty.
	Options.maskCvv = false;

	// detection
	Options.brandDetection = true; // detect brand by card number
	Options.brandDetectionType = 'regex'; // detect brand using RegExp

	// autofocus
	Options.autofocus = undefined;

	// validation
	Options.validation = true;
	Options.validateCard = undefined;
	Options.validateDirectDebit = undefined;
	Options.validateOnlineTransfer = undefined;
	Options.validateVirtualAccount = undefined;
	Options.validatePrepayment = undefined;

	// validation callbacks
	Options.onBlurCardNumber = function(){};
	Options.onBlurSecurityCode = function(){};
	Options.onBlurCardHolder = function(){};
	Options.onBlurExpiryDate = function(){};

	// submission
	Options.onBeforeSubmitCard = function(){return true;};
	Options.onBeforeSubmitDirectDebit = function(){return true;};
	Options.onBeforeSubmitOnlineTransfer = function(){return true;};
	Options.onBeforeSubmitVirtualAccount = function(){return true;};
	Options.onBeforeSubmitPrepayment = function(){return true;};
	Options.onAfterSubmit = function(){};

	Options.onChangeBrand = function(){};
	Options.onDetectBrand = function(){};

	//SAQA compliance
	Options.enableSAQACompliance = false;

	// spinner
	Options.spinner = {};

	// special behaviors in beta phase
	Options.useSummaryPage = false;
	Options.onSaveTransactionData = function(){};

	//billing plugin
	Options.billingAddress = undefined;

    //disable card expiry date validation
    Options.disableCardExpiryDateValidation = false;

	// list of mandatory/optional fields allowed for switch by customer
    Options.mandatoryBillingFields = {
        country: true,
        state: true,
        city: true,
        postcode: true,
        street1: true,
        street2: false
    };
	Options.forceCardHolderEqualsBillingName = false;
	Options.showCVVHint = false;

	/*
	    currently only input controls for card number and cvv are supported

	    iframeStyles = {
	        card-number-placeholder: {
	            color: xxx,
	            font-size: yyy,
	            font-family: zzz
	        },
	        cvv-placeholder: {
	            color: xxx,
                font-size: yyy,
   	            font-family: zzz
	        },
	        card-number-clear: {
	            display: none
	        },
	        cvv-clear: {
	            display: none
	        }
	    }
	*/
	Options.iframeStyles = undefined;

	//entercash
	Options.entercashApiId = undefined;
	Options.entercashClearingHouse = undefined;

	//giropayProvider is renamed by displayIban. Default value is false and can be set to true by merchant or psp.
	Options.displayIban = false;

	//DIRECTDEBIT_SEPA setting to show BIC in form. Default value is false and can be set to true by passing wpwlOption after checkout.
	Options.displayBic = false;
	
	// pci
	Options.onReadyIframeCommunication = function(){};
	Options.onFocusIframeCommunication = function(){
		// on focus we cant trigger focus on iframe. we need to set the styles
		var pciIframeCommunication = this;
		pciIframeCommunication.$iframe.css({
			borderColor: "#66afe9",
			outline: 0
		});
	};
	Options.onBlurIframeCommunication = function(){
		var pciIframeCommunication = this;
		pciIframeCommunication.$iframe.css({
			borderColor: "",
			outline: ""
		});
	};

	// one click payment
	Options.registrations = {};
	Options.registrations.requireCvv = false;
	Options.registrations.hideInitialPaymentForms = true;
	Options.showOneClickWidget = true;

    Options.browser = {};
    Options.browser.threeDChallengeWindow = undefined;

	// final redirect
	// undefined: shopperResultTarget is set by backend
	Options.shopperResultTarget = undefined;
	// undefined: shopperResultUrl is set by merchant in form action attribute
	Options.shopperResultUrl = undefined;

	Options.showTaxNumberField = false;

	// custom labels, placeholders and error messages
	Options.showLabels = true;
	Options.showPlaceholders = true;
	Options.labels = {};
	Options.placeholders = {};
	Options.errorMessages = {};

    // Apple Pay
    Options.applePay = {
        // Possible values: white-with-line, white, black
        style: "white-with-line",
        // Store name. Displayed in the Touch Bar on supported models of MacBook Pro.
        displayName: "With Apple Pay",
        total: {
            // Business name, should be the name that will appear on the card statement,
            // e.g. COMPANY, INC.
            label: "With Apple Pay"
        },
        supportedNetworks: ['amex', 'discover', 'masterCard', 'visa'],
        merchantCapabilities: ['supports3DS'],
        version: 1,
        redirectDelay: 0,
        // Possible values: canMakePayments, canMakePaymentsWithActiveCard
        checkAvailability: 'canMakePayments'
    };

    Options.googlePay = {
        apiVersion: 2,
        apiVersionMinor: 0,
        allowedAuthMethods: ['PAN_ONLY'],
        allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],
        tokenizationSpecificationType: 'PAYMENT_GATEWAY',
        totalPriceStatus: 'FINAL',
        prefetchPriceStatus: 'NOT_CURRENTLY_KNOWN',
    };

    Options.paypal = {
    	clientId: '', //is set in the PaypalRestPaymentForm
		intent: 'authorize'
	};

    Options.brandDetectionPriority = [];

	Options.brandDisplay = 'default';

    // Contains list of brand those support inline workflow.
    Options.inlineFlow = [];

	// lightbox e.g. masterpass
	Options.onLightboxCancel = function(){};

	// Disable AutoEnter
    Options.disableSubmitOnEnter = false;

    // errors
    Options.onError = function(){};

    Options.styling = undefined;

    Options.processing = {
		appendMerchantTxIdToShopperResultUrl: false
	};

	var merge = function(options, wpwlOptions) {
		// merge options
		var deep = true;
		options = $.extend(deep, options, wpwlOptions);

		// put back arrays from wpwlOptions
		var overrideArraysIn = ["applePay", "googlePay", "paypal"];
		for (var i = 0; i < overrideArraysIn.length; i++) {
			var objName = overrideArraysIn[i];
			if (wpwlOptions.hasOwnProperty(objName)) {
				var obj = wpwlOptions[objName];
				for (var field in obj) {
					if (obj.hasOwnProperty(field) && typeof(obj[field]) === "object" && $.isArray(obj[field])) {
						options[objName][field] = $.extend(true, [], obj[field]);
					}
				}
			}
		}

		return options;
	};

    Options.setWpwlOptions = function(wpwlOptions){
        Options = merge(Options, wpwlOptions);
        // store Options in wpwlOptions
        window.wpwlOptions = Options;
    };

    Options.setWpwlOptions(WpwlOptions);

	return Options;
});

define('module/Language',[],function(){

    //Should follow ISO 639-1
	var Language = {
		en: {
			accountBank:	"Bank code",
			accountBankBic: "BIC or bank code",
			accountBic:	"BIC",
			accountHolder:	"Account holder",
			accountId:		"Id",
			accountNumber:	"Account number",
			accountNumberIban: "IBAN or account number",
			accountIban:	"IBAN",
			accountVerification: "Account verification",
			bankName:		"Name of bank",
			brand:			"Brand",
			cancel:			"Back",
			cardHolder:		"Card holder",
			cardNumber:		"Card Number",
			cvv:			"CVV",
			country:		"Country",
			expiryDate:		"Expiry Date",
			taxNumber:      "Tax Identification Number",
			submit:			"Pay now",
			nextStep:		"Continue",
			moreBrands:     "More",
			givenName:     "Given Name",
			surname:        "Surname",
			billingAgreement: "Invoice terms and conditions",
			accountBankError:	"Invalid bank code",
			accountBankBicError: "Invalid BIC or bank code",
			accountBicError:	"Invalid BIC",
			accountHolderError:	"Invalid account holder",
			accountNumberError:	"Invalid account number",
			accountNumberIbanError: "Invalid IBAN or account number",
			accountIbanError:   "Invalid IBAN",
			cardHolderError:	"Invalid card holder",
			surNameError:		"Invalid surname",
			givenNameError:		"Invalid given name",
			cardNumberError:	"Invalid card number or brand",
			cvvError:			"Invalid CVV",
			expiryMonthError:	"Invalid expiry date",
			expiryYearError:	"Invalid expiry date",
			taxNumberError:     "Invalid Tax Identification Number",
			generalTermsAndConditionsError:			"Please accept the consent for data transmission",
			emailOrAccountId:	"Email or Account Id",
			secureId:			"Secure Id",
			learnMore:			"Learn more",
			mmyy:				"MM / YY",
			ddmmyyyy:			"DD / MM / YYYY",
			customerMobile:				"Mobile phone number (+78000001774)",
			countryCodePhone:   "Country code",
			mobile:				"Mobile Phone",
			qrcode: 			"QR-Code",
			paymentMode:		"Please select your preferred payment method:",
			mobilePhone:		"Mobile phone number",
			customerEmail:		"Email",
			register:		"Register now",
			billingCountryError: "Invalid country",
			billingStateError: "Invalid state",
			billingCityError: "Invalid city",
			billingStreetError: "Invalid street",
			billingStreetError2: "Invalid street",
			billingPostCodeError: "Invalid postcode",
			mobilePhoneError: "Phone number is required.",
			noSelectionError: "Select one of the two options.",
			mobileError: "Invalid mobile number",
			mobileContryCodeError: "Invalid country code",
			birthDateError: "Invalid birth date. DD/MM/YYYY expected",
			showOtherPaymentMethods: "Show other payment methods",
			olpId: "SADAD Account ID",
			birthDate: "Date of birth",
			cvvHint: "The 3 digits on the back of your card.",
			cvvHintAmex: "The 4 digits on the front of your card.",
			cvvHintMaestro: "The 3 digits on the back of your card if specified.",
			mbwayEmailOrPhoneMandatory: "Please fill one of the fields “email” or “Mobile phone number”",
            billingAddress: "Billing address",
			billingCountryPlaceholder: "Please select",
			billingStatePlaceholder: "State/Province",
			billingCityPlaceholder: "City",
			billingPostCodePlaceholder: "ZIP/Postal Code",
			billingStreet1Placeholder: "Street Address Line 1",
			billingStreet2Placeholder: "Street Address Line 2 (Optional)",
			billingStreet2PlaceholderMandatory: "Street Address Line 2",
			supportMessage:"Payment cannot be completed.<br/>Please contact support with following information:<br/>{{message}}<br/>ndc: {{ndc}}<br/>timestamp: {{timestamp}}",
			nationalIdentifier: "National Identifier",
			nationalIdentifierError: "Invalid National Identifier",
			ikanoOpenInvoiceTermsAndCondition: "Terms and Conditions",
			ikanoOpenInvoiceAccept: "I have read and agree the Terms and Conditions",
			ikanoOpenInvoiceAcceptError: "Please accept the Terms and Conditions",
			insertCode: "Insert code here",
			mandateAuthorization: "By signing this mandate form, I authorize the creditor to send an instruction to my bank to debit my account in accordance with the instruction from the creditor.",
			mandateEntitlement: "As part of my rights, I am entitled to a refund from my bank under the terms and conditions of my agreement with my bank. A refund must be claimed within 8 weeks starting from the date on which my account was debited.",
			mandateConfirmation: "I confirm to be authorized for the aforementioned account to sign a mandate. I agree to the reduced direct debit pre-notification period of 1 calendar day. I certify that the mandate information provided is complete and accurate.",
			mandateConfirmationError: "Please agree to all the terms and conditions before continuing.",
			countryCodes: [
                    {"value": "" , "label": "Please select"},
                    {"value":"AF", "label":"Afghanistan"},
                    {"value":"AX", "label":"Åland Islands"},
                    {"value":"AL", "label":"Albania"},
                    {"value":"DZ", "label":"Algeria"},
                    {"value":"AS", "label":"American Samoa"},
                    {"value":"AD", "label":"Andorra"},
                    {"value":"AO", "label":"Angola"},
                    {"value":"AI", "label":"Anguilla"},
                    {"value":"AQ", "label":"Antarctica"},
                    {"value":"AG", "label":"Antigua and Barbuda"},
                    {"value":"AR", "label":"Argentina"},
                    {"value":"AM", "label":"Armenia"},
                    {"value":"AW", "label":"Aruba"},
                    {"value":"AU", "label":"Australia"},
                    {"value":"AT", "label":"Austria"},
                    {"value":"AZ", "label":"Azerbaijan"},
                    {"value":"BS", "label":"Bahamas"},
                    {"value":"BH", "label":"Bahrain"},
                    {"value":"BD", "label":"Bangladesh"},
                    {"value":"BB", "label":"Barbados"},
                    {"value":"BY", "label":"Belarus"},
                    {"value":"BE", "label":"Belgium"},
                    {"value":"BZ", "label":"Belize"},
                    {"value":"BJ", "label":"Benin"},
                    {"value":"BM", "label":"Bermuda"},
                    {"value":"BT", "label":"Bhutan"},
                    {"value":"BO", "label":"Bolivia, Plurinational State of"},
                    {"value":"BQ", "label":"Bonaire, Sint Eustatius and Saba"},
                    {"value":"BA", "label":"Bosnia and Herzegovina"},
                    {"value":"BW", "label":"Botswana"},
                    {"value":"BV", "label":"Bouvet Island"},
                    {"value":"BR", "label":"Brazil"},
                    {"value":"IO", "label":"British Indian Ocean Territory"},
                    {"value":"BN", "label":"Brunei Darussalam"},
                    {"value":"BG", "label":"Bulgaria"},
                    {"value":"BF", "label":"Burkina Faso"},
                    {"value":"BI", "label":"Burundi"},
                    {"value":"KH", "label":"Cambodia"},
                    {"value":"CM", "label":"Cameroon"},
                    {"value":"CA", "label":"Canada"},
                    {"value":"CV", "label":"Cape Verde"},
                    {"value":"KY", "label":"Cayman Islands"},
                    {"value":"CF", "label":"Central African Republic"},
                    {"value":"TD", "label":"Chad"},
                    {"value":"CL", "label":"Chile"},
                    {"value":"CN", "label":"China"},
                    {"value":"CX", "label":"Christmas Island"},
                    {"value":"CC", "label":"Cocos (Keeling) Islands"},
                    {"value":"CO", "label":"Colombia"},
                    {"value":"KM", "label":"Comoros"},
                    {"value":"CG", "label":"Congo"},
                    {"value":"CD", "label":"Congo, the Democratic Republic of the"},
                    {"value":"CK", "label":"Cook Islands"},
                    {"value":"CR", "label":"Costa Rica"},
                    {"value":"CI", "label":"Côte d Ivoire"},
                    {"value":"HR", "label":"Croatia"},
                    {"value":"CU", "label":"Cuba"},
                    {"value":"CW", "label":"Curaçao"},
                    {"value":"CY", "label":"Cyprus"},
                    {"value":"CZ", "label":"Czech Republic"},
                    {"value":"DK", "label":"Denmark"},
                    {"value":"DJ", "label":"Djibouti"},
                    {"value":"DM", "label":"Dominica"},
                    {"value":"DO", "label":"Dominican Republic"},
                    {"value":"EC", "label":"Ecuador"},
                    {"value":"EG", "label":"Egypt"},
                    {"value":"SV", "label":"El Salvador"},
                    {"value":"GQ", "label":"Equatorial Guinea"},
                    {"value":"ER", "label":"Eritrea"},
                    {"value":"EE", "label":"Estonia"},
                    {"value":"ET", "label":"Ethiopia"},
                    {"value":"FK", "label":"Falkland Islands (Malvinas)"},
                    {"value":"FO", "label":"Faroe Islands"},
                    {"value":"FJ", "label":"Fiji"},
                    {"value":"FI", "label":"Finland"},
                    {"value":"FR", "label":"France"},
                    {"value":"GF", "label":"French Guiana"},
                    {"value":"PF", "label":"French Polynesia"},
                    {"value":"TF", "label":"French Southern Territories"},
                    {"value":"GA", "label":"Gabon"},
                    {"value":"GM", "label":"Gambia"},
                    {"value":"GE", "label":"Georgia"},
                    {"value":"DE", "label":"Germany"},
                    {"value":"GH", "label":"Ghana"},
                    {"value":"GI", "label":"Gibraltar"},
                    {"value":"GR", "label":"Greece"},
                    {"value":"GL", "label":"Greenland"},
                    {"value":"GD", "label":"Grenada"},
                    {"value":"GP", "label":"Guadeloupe"},
                    {"value":"GU", "label":"Guam"},
                    {"value":"GT", "label":"Guatemala"},
                    {"value":"GG", "label":"Guernsey"},
                    {"value":"GN", "label":"Guinea"},
                    {"value":"GW", "label":"Guinea-Bissau"},
                    {"value":"GY", "label":"Guyana"},
                    {"value":"HT", "label":"Haiti"},
                    {"value":"HM", "label":"Heard Island and McDonald Islands"},
                    {"value":"VA", "label":"Holy See (Vatican City State)"},
                    {"value":"HN", "label":"Honduras"},
                    {"value":"HK", "label":"Hong Kong"},
                    {"value":"HU", "label":"Hungary"},
                    {"value":"IS", "label":"Iceland"},
                    {"value":"IN", "label":"India"},
                    {"value":"ID", "label":"Indonesia"},
                    {"value":"IR", "label":"Iran, Islamic Republic of"},
                    {"value":"IQ", "label":"Iraq"},
                    {"value":"IE", "label":"Ireland"},
                    {"value":"IM", "label":"Isle of Man"},
                    {"value":"IL", "label":"Israel"},
                    {"value":"IT", "label":"Italy"},
                    {"value":"JM", "label":"Jamaica"},
                    {"value":"JP", "label":"Japan"},
                    {"value":"JE", "label":"Jersey"},
                    {"value":"JO", "label":"Jordan"},
                    {"value":"KZ", "label":"Kazakhstan"},
                    {"value":"KE", "label":"Kenya"},
                    {"value":"KI", "label":"Kiribati"},
                    {"value":"KP", "label":"Korea, Democratic People s Republic of"},
                    {"value":"KR", "label":"Korea, Republic of"},
                    {"value":"KW", "label":"Kuwait"},
                    {"value":"KG", "label":"Kyrgyzstan"},
                    {"value":"LA", "label":"Lao People s Democratic Republic"},
                    {"value":"LV", "label":"Latvia"},
                    {"value":"LB", "label":"Lebanon"},
                    {"value":"LS", "label":"Lesotho"},
                    {"value":"LR", "label":"Liberia"},
                    {"value":"LY", "label":"Libya"},
                    {"value":"LI", "label":"Liechtenstein"},
                    {"value":"LT", "label":"Lithuania"},
                    {"value":"LU", "label":"Luxembourg"},
                    {"value":"MO", "label":"Macao"},
                    {"value":"MK", "label":"Macedonia, the former Yugoslav Republic of"},
                    {"value":"MG", "label":"Madagascar"},
                    {"value":"MW", "label":"Malawi"},
                    {"value":"MY", "label":"Malaysia"},
                    {"value":"MV", "label":"Maldives"},
                    {"value":"ML", "label":"Mali"},
                    {"value":"MT", "label":"Malta"},
                    {"value":"MH", "label":"Marshall Islands"},
                    {"value":"MQ", "label":"Martinique"},
                    {"value":"MR", "label":"Mauritania"},
                    {"value":"MU", "label":"Mauritius"},
                    {"value":"YT", "label":"Mayotte"},
                    {"value":"MX", "label":"Mexico"},
                    {"value":"FM", "label":"Micronesia, Federated States of"},
                    {"value":"MD", "label":"Moldova, Republic of"},
                    {"value":"MC", "label":"Monaco"},
                    {"value":"MN", "label":"Mongolia"},
                    {"value":"ME", "label":"Montenegro"},
                    {"value":"MS", "label":"Montserrat"},
                    {"value":"MA", "label":"Morocco"},
                    {"value":"MZ", "label":"Mozambique"},
                    {"value":"MM", "label":"Myanmar"},
                    {"value":"NA", "label":"Namibia"},
                    {"value":"NR", "label":"Nauru"},
                    {"value":"NP", "label":"Nepal"},
                    {"value":"NL", "label":"Netherlands"},
                    {"value":"NC", "label":"New Caledonia"},
                    {"value":"NZ", "label":"New Zealand"},
                    {"value":"NI", "label":"Nicaragua"},
                    {"value":"NE", "label":"Niger"},
                    {"value":"NG", "label":"Nigeria"},
                    {"value":"NU", "label":"Niue"},
                    {"value":"NF", "label":"Norfolk Island"},
                    {"value":"MP", "label":"Northern Mariana Islands"},
                    {"value":"NO", "label":"Norway"},
                    {"value":"OM", "label":"Oman"},
                    {"value":"PK", "label":"Pakistan"},
                    {"value":"PW", "label":"Palau"},
                    {"value":"PS", "label":"Palestinian Territory, Occupied"},
                    {"value":"PA", "label":"Panama"},
                    {"value":"PG", "label":"Papua New Guinea"},
                    {"value":"PY", "label":"Paraguay"},
                    {"value":"PE", "label":"Peru"},
                    {"value":"PH", "label":"Philippines"},
                    {"value":"PN", "label":"Pitcairn"},
                    {"value":"PL", "label":"Poland"},
                    {"value":"PT", "label":"Portugal"},
                    {"value":"PR", "label":"Puerto Rico"},
                    {"value":"QA", "label":"Qatar"},
                    {"value":"RE", "label":"Réunion"},
                    {"value":"RO", "label":"Romania"},
                    {"value":"RU", "label":"Russian Federation"},
                    {"value":"RW", "label":"Rwanda"},
                    {"value":"BL", "label":"Saint Barthélemy"},
                    {"value":"SH", "label":"Saint Helena, Ascension and Tristan da Cunha"},
                    {"value":"KN", "label":"Saint Kitts and Nevis"},
                    {"value":"LC", "label":"Saint Lucia"},
                    {"value":"MF", "label":"Saint Martin (French part)"},
                    {"value":"PM", "label":"Saint Pierre and Miquelon"},
                    {"value":"VC", "label":"Saint Vincent and the Grenadines"},
                    {"value":"WS", "label":"Samoa"},
                    {"value":"SM", "label":"San Marino"},
                    {"value":"ST", "label":"Sao Tome and Principe"},
                    {"value":"SA", "label":"Saudi Arabia"},
                    {"value":"SN", "label":"Senegal"},
                    {"value":"RS", "label":"Serbia"},
                    {"value":"SC", "label":"Seychelles"},
                    {"value":"SL", "label":"Sierra Leone"},
                    {"value":"SG", "label":"Singapore"},
                    {"value":"SX", "label":"Sint Maarten (Dutch part)"},
                    {"value":"SK", "label":"Slovakia"},
                    {"value":"SI", "label":"Slovenia"},
                    {"value":"SB", "label":"Solomon Islands"},
                    {"value":"SO", "label":"Somalia"},
                    {"value":"ZA", "label":"South Africa"},
                    {"value":"GS", "label":"South Georgia and the South Sandwich Islands"},
                    {"value":"SS", "label":"South Sudan"},
                    {"value":"ES", "label":"Spain"},
                    {"value":"LK", "label":"Sri Lanka"},
                    {"value":"SD", "label":"Sudan"},
                    {"value":"SR", "label":"Suriname"},
                    {"value":"SJ", "label":"Svalbard and Jan Mayen"},
                    {"value":"SZ", "label":"Swaziland"},
                    {"value":"SE", "label":"Sweden"},
                    {"value":"CH", "label":"Switzerland"},
                    {"value":"SY", "label":"Syrian Arab Republic"},
                    {"value":"TW", "label":"Taiwan, Province of China"},
                    {"value":"TJ", "label":"Tajikistan"},
                    {"value":"TZ", "label":"Tanzania, United Republic of"},
                    {"value":"TH", "label":"Thailand"},
                    {"value":"TL", "label":"Timor-Leste"},
                    {"value":"TG", "label":"Togo"},
                    {"value":"TK", "label":"Tokelau"},
                    {"value":"TO", "label":"Tonga"},
                    {"value":"TT", "label":"Trinidad and Tobago"},
                    {"value":"TN", "label":"Tunisia"},
                    {"value":"TR", "label":"Turkey"},
                    {"value":"TM", "label":"Turkmenistan"},
                    {"value":"TC", "label":"Turks and Caicos Islands"},
                    {"value":"TV", "label":"Tuvalu"},
                    {"value":"UG", "label":"Uganda"},
                    {"value":"UA", "label":"Ukraine"},
                    {"value":"AE", "label":"United Arab Emirates"},
                    {"value":"GB", "label":"United Kingdom"},
                    {"value":"US", "label":"United States"},
                    {"value":"UM", "label":"United States Minor Outlying Islands"},
                    {"value":"UY", "label":"Uruguay"},
                    {"value":"UZ", "label":"Uzbekistan"},
                    {"value":"VU", "label":"Vanuatu"},
                    {"value":"VE", "label":"Venezuela, Bolivarian Republic of"},
                    {"value":"VN", "label":"Vietnam"},
                    {"value":"VG", "label":"Virgin Islands, British"},
                    {"value":"VI", "label":"Virgin Islands, U.S."},
                    {"value":"WF", "label":"Wallis and Futuna"},
                    {"value":"EH", "label":"Western Sahara"},
                    {"value":"YE", "label":"Yemen"},
                    {"value":"ZM", "label":"Zambia"},
                    {"value":"ZW", "label":"Zimbabwe"}
            ]
        },
		ko: {
			accountBank:	"은행코드",
			accountBankBic: "은행인식코드/은행코드",
			accountBic:	"은행인식코드",
			accountHolder:	"계좌명의인",
			accountId:		"ID",
			accountNumber:	"계좌번호",
			accountNumberIban: "IBAN 혹은 계좌번호",
			accountIban:	"IBAN",
			accountVerification: "Account verification",
			bankName:		"은행명",
			brand:			"브랜드",
			cancel:			"돌아가기",
			cardHolder:		"카드명의인",
			cardNumber:		"카드번호",
			cvv:			"CVV코드",
			country:		"국가",
			expiryDate:		"유효기일",
            taxNumber:      "Tax Identification Number",
			submit:			"지불",
			nextStep:		"Continue",
			moreBrands:     "More",
			givenName:      "주어진 이름",
			surname:        "성",
			billingAgreement: "거래약관",
			accountBankError:	"무효 은행코드",
			accountBankBicError: "무효 은행인식코드 혹은 은행코드",
			accountBicError:	"무효 은행인식코드",
			accountHolderError:	"무효 계좌명의인",
			accountNumberError:	"무효 계좌번호",
			accountNumberIbanError: "무효 IBAN 혹은 계좌번호",
			accountIbanError:   "무효 IBAN",
			cardHolderError:	"무효 카드명의인",
			surNameError:		"Invalid surname",
			givenNameError:		"Invalid given name",
			cardNumberError:	"무효 카드번호 혹은 브랜드",
			cvvError:			"무효 CVV코드",
			expiryMonthError:	"무효 유효기일",
			expiryYearError:	"무효 유효기일",
            taxNumberError:     "Invalid Tax Identification Number",
			generalTermsAndConditionsError:			"데이터를 전송합니다.",
			emailOrAccountId:	"이메일 주소 또는 계정 ID",
			secureId:			"Secure Id",
			learnMore:			"Learn more",
			mmyy:				"MM / YY",
			ddmmyyyy:			"DD / MM / YYYY",
			mobile:				"Mobile Phone",
			qrcode: 			"QR-Code",
			paymentMode:		"Please select your preferred payment method:",
			customerMobile:				"Mobile phone number (+78000001774)",
			register:		"Register now",
			billingCountryError: "Invalid country",
			billingStateError: "Invalid state",
			billingCityError: "Invalid city",
			billingStreetError: "Invalid street",
			billingStreetError2: "Invalid street",
			billingPostCodeError: "Invalid postcode",
			mobilePhoneError: "Phone number is required.",
			noSelectionError: "Select one of the two options.",
			mobileError: "Invalid mobile number",
			mobileContryCodeError: "Invalid country code",
			birthDateError: "Invalid birth date. DD/MM/YYYY expected",
			showOtherPaymentMethods: "Show other payment methods",
			cvvHint: "카드 뒷면의 3자리 숫자.",
            cvvHintAmex: "카드 앞면의 4자리 숫자.",
            cvvHintMaestro: "카드 뒷면의 3자리 숫자 (지정된 경우).",
            billingAddress: "Billing address",
            billingCountryPlaceholder: "Please select",
            billingStatePlaceholder: "State/Province",
            billingCityPlaceholder: "City",
            billingPostCodePlaceholder: "ZIP/Postal Code",
            billingStreet1Placeholder: "Street Address Line 1",
            billingStreet2Placeholder: "Street Address Line 2 (Optional)",
            billingStreet2PlaceholderMandatory: "Street Address Line 2",
            supportMessage:"Payment cannot be completed.<br/>Please contact support with following information:<br/>{{message}}<br/>ndc: {{ndc}}<br/>timestamp: {{timestamp}}",
			nationalIdentifier: "National Identifier",
			nationalIdentifierError: "Invalid National Identifier",
			ikanoOpenInvoiceTermsAndCondition: "Terms and Conditions",
			ikanoOpenInvoiceAccept: "I have read and agree the Terms and Conditions",
			ikanoOpenInvoiceAcceptError: "Please accept the Terms and Conditions",
			insertCode: "Insert code here",
			mandateAuthorization: "By signing this mandate form, I authorize the creditor to send an instruction to my bank to debit my account in accordance with the instruction from the creditor.",
			mandateEntitlement: "As part of my rights, I am entitled to a refund from my bank under the terms and conditions of my agreement with my bank. A refund must be claimed within 8 weeks starting from the date on which my account was debited.",
			mandateConfirmation: "I confirm to be authorized for the aforementioned account to sign a mandate. I agree to the reduced direct debit pre-notification period of 1 calendar day. I certify that the mandate information provided is complete and accurate.",
			mandateConfirmationError: "Please agree to all the terms and conditions before continuing."
        },
		ar: {
			accountBank:	"رمز البنك",
			accountBankBic: "رمز تعريف البنك (BIC) او رمز البنك",
			accountBic:	"رمز تعريف البنك (BIC)",
			accountHolder:	"صاحب الحساب",
			accountId:		"رقم التعريف (ID)",
			accountNumber:	"رقم الحساب",
			accountNumberIban: "الآيبان أو رقم الحساب",
			accountIban:	"رقم الحساب المصرفي الدولي (الآيبان)",
			accountVerification: "Account verification",
			bankName:		"إسم البنك",
			brand:			"نوع البطاقة",
			cancel:			"رجوع",
			cardHolder:		"اسم حامل البطاقة",
			cardNumber:		"رقم البطاقة",
			cvv:			"رمز التحقق (CVV)",
			country:		"الدولة",
			expiryDate:		"تاريخ الإنتهاء",
            taxNumber:      "الرقم الضريبي",
			submit:			"إدفع الأن",
			nextStep:		"استمر",
			moreBrands:     "اكثر",
			givenName:      "الاسم المعطى",
			surname:        "لقب",
			billingAgreement: "شروط و أحكام الفاتورة",
			accountBankError:	"رمز البنك غير صحيح",
			accountBankBicError: "رمز البنك او رمز تعريف البنك غير صحيح (BIC)",
			accountBicError:	"رمز تعريف البنك (BIC) غير صحيح",
			accountHolderError:	"اسم صاحب الحساب غير صحيح",
			accountNumberError:	"رقم الحساب غير صحيح",
			accountNumberIbanError: "رقم الحساب أو رقم الحساب المصرفي الدولي (الآيبان) غير صحيح",
			accountIbanError:   "رقم الحساب المصرفي الدولي (الآيبان) غير صحيح",
			cardHolderError:	"اسم حامل البطاقة غير صحيح",
			surNameError:		"اسم العائلة غير صحيح",
			givenNameError:		"اسم غير صحيح",
			cardNumberError:	"رقم أو نوع البطاقة غير صحيح",
			cvvError:			"رمز التحقق من البطاقة الائتمانية (CVV) غير صحيح",
			expiryMonthError:	"تاريخ إنتهاء الصلاحية غير صحيح",
			expiryYearError:	"تاريخ إنتهاء الصلاحية غير صحيح",
            taxNumberError:     "رقم ضريبي غير صحيح",
			generalTermsAndConditionsError:			"يرجى قبول الموافقة على نقل البيانات",
			emailOrAccountId:	"عنوان البريد أو رقم الحساب",
			secureId:			"Secure Id",
			learnMore:			"اقرأ اكثر",
			mmyy:				"شهر / سنة",
			ddmmyyyy:			"DD / MM / YYYY",
			customerMobile:				"رقم الجوال (+78000001774)",
			countryCodePhone:   "كود الدولة",
			mobile:				"رقم الهاتف",
			qrcode: 			"رمز QR",
			paymentMode:		"الرجاء اختيار طريقة الدفع :",
			mobilePhone:		"رقم الجوال",
			customerEmail:      "البريد الالكتروني ",
            register:		"سجل الان",
            billingCountryError: "دولة غير صحيحة",
            billingStateError: "ولاية غير صحيحة",
            billingCityError: "مدينة صحيحة",
            billingStreetError: "شارع غير صحيح",
            billingStreetError2: "شارع غير صحيح",
			billingPostCodeError: "رمز بريدي غير صحيح",
			mobilePhoneError: "رقم الهاتف مطلوب.",
			noSelectionError: "الرجاء اختيار احد الخيارات.",
            mobileError: "رقم جوال غير صحيح",
			mobileContryCodeError: "كود الدولة",
			birthDateError: "Invalid birth date. DD/MM/YYYY expected",
            showOtherPaymentMethods: "إظهر طرق الدفع الأخرى",
            olpId: "حساب سداد",
            birthDate: "تاريخ الميلاد",
            cvvHint: "الأرقام الثلاثة على الجهة الخلفية من بطاقتك",
            cvvHintAmex: "الأرقام الأربعة على الجهة الأمامية من بطاقتك",
            cvvHintMaestro: "الأرقام الثلاثة على الجهة الخلفية من بطاقتك في حال تحديدها",
            mbwayEmailOrPhoneMandatory: "من فضلك اكمل احدى الخانتين “البريد الالكتروني” or رقم الجوالr”",
            billingAddress: "عنوان وصول الفواتير",
            billingCountryPlaceholder: "اختر من فضلك",
            billingStatePlaceholder: "ولاية/محافظة",
            billingCityPlaceholder: "مدينة",
            billingPostCodePlaceholder: "رقم البريد",
            billingStreet1Placeholder: "عنوان الشارع 1",
            billingStreet2Placeholder: "عنوان الشارع 2 (اختياري)",
            billingStreet2PlaceholderMandatory: "عنوان الشارع 2",
            supportMessage:"عملية الدفع لم تتم. من فضلك اتصل بخدمة العملاء و توفيرهم بالمعلومات التالية:<br/>{{message}}<br/>رقم العملية ndc: {{ndc}}<br/>التوقيت: {{timestamp}}",
            nationalIdentifier: "رقم الهوية",
            nationalIdentifierError: "رقم هوية غير صحيح",
            ikanoOpenInvoiceTermsAndCondition: "الأحكام و الشروط",
            ikanoOpenInvoiceAccept: "أوافق على الأحكام و الشروط",
            ikanoOpenInvoiceAcceptError: "من فضلك وافق على الأحكام و الشروط",
			insertCode: "Insert code here",
			mandateAuthorization: "By signing this mandate form, I authorize the creditor to send an instruction to my bank to debit my account in accordance with the instruction from the creditor.",
			mandateEntitlement: "As part of my rights, I am entitled to a refund from my bank under the terms and conditions of my agreement with my bank. A refund must be claimed within 8 weeks starting from the date on which my account was debited.",
			mandateConfirmation: "I confirm to be authorized for the aforementioned account to sign a mandate. I agree to the reduced direct debit pre-notification period of 1 calendar day. I certify that the mandate information provided is complete and accurate.",
			mandateConfirmationError: "Please agree to all the terms and conditions before continuing.",
			countryCodes: [
			        {"value": "" , "label": "Please select"},
                    {"value":"AF", "label":"Afghanistan"},
                    {"value":"AX", "label":"Åland Islands"},
                    {"value":"AL", "label":"Albania"},
                    {"value":"DZ", "label":"Algeria"},
                    {"value":"AS", "label":"American Samoa"},
                    {"value":"AD", "label":"Andorra"},
                    {"value":"AO", "label":"Angola"},
                    {"value":"AI", "label":"Anguilla"},
                    {"value":"AQ", "label":"Antarctica"},
                    {"value":"AG", "label":"Antigua and Barbuda"},
                    {"value":"AR", "label":"Argentina"},
                    {"value":"AM", "label":"Armenia"},
                    {"value":"AW", "label":"Aruba"},
                    {"value":"AU", "label":"Australia"},
                    {"value":"AT", "label":"Austria"},
                    {"value":"AZ", "label":"Azerbaijan"},
                    {"value":"BS", "label":"Bahamas"},
                    {"value":"BH", "label":"Bahrain"},
                    {"value":"BD", "label":"Bangladesh"},
                    {"value":"BB", "label":"Barbados"},
                    {"value":"BY", "label":"Belarus"},
                    {"value":"BE", "label":"Belgium"},
                    {"value":"BZ", "label":"Belize"},
                    {"value":"BJ", "label":"Benin"},
                    {"value":"BM", "label":"Bermuda"},
                    {"value":"BT", "label":"Bhutan"},
                    {"value":"BO", "label":"Bolivia, Plurinational State of"},
                    {"value":"BQ", "label":"Bonaire, Sint Eustatius and Saba"},
                    {"value":"BA", "label":"Bosnia and Herzegovina"},
                    {"value":"BW", "label":"Botswana"},
                    {"value":"BV", "label":"Bouvet Island"},
                    {"value":"BR", "label":"Brazil"},
                    {"value":"IO", "label":"British Indian Ocean Territory"},
                    {"value":"BN", "label":"Brunei Darussalam"},
                    {"value":"BG", "label":"Bulgaria"},
                    {"value":"BF", "label":"Burkina Faso"},
                    {"value":"BI", "label":"Burundi"},
                    {"value":"KH", "label":"Cambodia"},
                    {"value":"CM", "label":"Cameroon"},
                    {"value":"CA", "label":"Canada"},
                    {"value":"CV", "label":"Cape Verde"},
                    {"value":"KY", "label":"Cayman Islands"},
                    {"value":"CF", "label":"Central African Republic"},
                    {"value":"TD", "label":"Chad"},
                    {"value":"CL", "label":"Chile"},
                    {"value":"CN", "label":"China"},
                    {"value":"CX", "label":"Christmas Island"},
                    {"value":"CC", "label":"Cocos (Keeling) Islands"},
                    {"value":"CO", "label":"Colombia"},
                    {"value":"KM", "label":"Comoros"},
                    {"value":"CG", "label":"Congo"},
                    {"value":"CD", "label":"Congo, the Democratic Republic of the"},
                    {"value":"CK", "label":"Cook Islands"},
                    {"value":"CR", "label":"Costa Rica"},
                    {"value":"CI", "label":"Côte d Ivoire"},
                    {"value":"HR", "label":"Croatia"},
                    {"value":"CU", "label":"Cuba"},
                    {"value":"CW", "label":"Curaçao"},
                    {"value":"CY", "label":"Cyprus"},
                    {"value":"CZ", "label":"Czech Republic"},
                    {"value":"DK", "label":"Denmark"},
                    {"value":"DJ", "label":"Djibouti"},
                    {"value":"DM", "label":"Dominica"},
                    {"value":"DO", "label":"Dominican Republic"},
                    {"value":"EC", "label":"Ecuador"},
                    {"value":"EG", "label":"Egypt"},
                    {"value":"SV", "label":"El Salvador"},
                    {"value":"GQ", "label":"Equatorial Guinea"},
                    {"value":"ER", "label":"Eritrea"},
                    {"value":"EE", "label":"Estonia"},
                    {"value":"ET", "label":"Ethiopia"},
                    {"value":"FK", "label":"Falkland Islands (Malvinas)"},
                    {"value":"FO", "label":"Faroe Islands"},
                    {"value":"FJ", "label":"Fiji"},
                    {"value":"FI", "label":"Finland"},
                    {"value":"FR", "label":"France"},
                    {"value":"GF", "label":"French Guiana"},
                    {"value":"PF", "label":"French Polynesia"},
                    {"value":"TF", "label":"French Southern Territories"},
                    {"value":"GA", "label":"Gabon"},
                    {"value":"GM", "label":"Gambia"},
                    {"value":"GE", "label":"Georgia"},
                    {"value":"DE", "label":"Germany"},
                    {"value":"GH", "label":"Ghana"},
                    {"value":"GI", "label":"Gibraltar"},
                    {"value":"GR", "label":"Greece"},
                    {"value":"GL", "label":"Greenland"},
                    {"value":"GD", "label":"Grenada"},
                    {"value":"GP", "label":"Guadeloupe"},
                    {"value":"GU", "label":"Guam"},
                    {"value":"GT", "label":"Guatemala"},
                    {"value":"GG", "label":"Guernsey"},
                    {"value":"GN", "label":"Guinea"},
                    {"value":"GW", "label":"Guinea-Bissau"},
                    {"value":"GY", "label":"Guyana"},
                    {"value":"HT", "label":"Haiti"},
                    {"value":"HM", "label":"Heard Island and McDonald Islands"},
                    {"value":"VA", "label":"Holy See (Vatican City State)"},
                    {"value":"HN", "label":"Honduras"},
                    {"value":"HK", "label":"Hong Kong"},
                    {"value":"HU", "label":"Hungary"},
                    {"value":"IS", "label":"Iceland"},
                    {"value":"IN", "label":"India"},
                    {"value":"ID", "label":"Indonesia"},
                    {"value":"IR", "label":"Iran, Islamic Republic of"},
                    {"value":"IQ", "label":"Iraq"},
                    {"value":"IE", "label":"Ireland"},
                    {"value":"IM", "label":"Isle of Man"},
                    {"value":"IL", "label":"Israel"},
                    {"value":"IT", "label":"Italy"},
                    {"value":"JM", "label":"Jamaica"},
                    {"value":"JP", "label":"Japan"},
                    {"value":"JE", "label":"Jersey"},
                    {"value":"JO", "label":"Jordan"},
                    {"value":"KZ", "label":"Kazakhstan"},
                    {"value":"KE", "label":"Kenya"},
                    {"value":"KI", "label":"Kiribati"},
                    {"value":"KP", "label":"Korea, Democratic People s Republic of"},
                    {"value":"KR", "label":"Korea, Republic of"},
                    {"value":"KW", "label":"Kuwait"},
                    {"value":"KG", "label":"Kyrgyzstan"},
                    {"value":"LA", "label":"Lao People s Democratic Republic"},
                    {"value":"LV", "label":"Latvia"},
                    {"value":"LB", "label":"Lebanon"},
                    {"value":"LS", "label":"Lesotho"},
                    {"value":"LR", "label":"Liberia"},
                    {"value":"LY", "label":"Libya"},
                    {"value":"LI", "label":"Liechtenstein"},
                    {"value":"LT", "label":"Lithuania"},
                    {"value":"LU", "label":"Luxembourg"},
                    {"value":"MO", "label":"Macao"},
                    {"value":"MK", "label":"Macedonia, the former Yugoslav Republic of"},
                    {"value":"MG", "label":"Madagascar"},
                    {"value":"MW", "label":"Malawi"},
                    {"value":"MY", "label":"Malaysia"},
                    {"value":"MV", "label":"Maldives"},
                    {"value":"ML", "label":"Mali"},
                    {"value":"MT", "label":"Malta"},
                    {"value":"MH", "label":"Marshall Islands"},
                    {"value":"MQ", "label":"Martinique"},
                    {"value":"MR", "label":"Mauritania"},
                    {"value":"MU", "label":"Mauritius"},
                    {"value":"YT", "label":"Mayotte"},
                    {"value":"MX", "label":"Mexico"},
                    {"value":"FM", "label":"Micronesia, Federated States of"},
                    {"value":"MD", "label":"Moldova, Republic of"},
                    {"value":"MC", "label":"Monaco"},
                    {"value":"MN", "label":"Mongolia"},
                    {"value":"ME", "label":"Montenegro"},
                    {"value":"MS", "label":"Montserrat"},
                    {"value":"MA", "label":"Morocco"},
                    {"value":"MZ", "label":"Mozambique"},
                    {"value":"MM", "label":"Myanmar"},
                    {"value":"NA", "label":"Namibia"},
                    {"value":"NR", "label":"Nauru"},
                    {"value":"NP", "label":"Nepal"},
                    {"value":"NL", "label":"Netherlands"},
                    {"value":"NC", "label":"New Caledonia"},
                    {"value":"NZ", "label":"New Zealand"},
                    {"value":"NI", "label":"Nicaragua"},
                    {"value":"NE", "label":"Niger"},
                    {"value":"NG", "label":"Nigeria"},
                    {"value":"NU", "label":"Niue"},
                    {"value":"NF", "label":"Norfolk Island"},
                    {"value":"MP", "label":"Northern Mariana Islands"},
                    {"value":"NO", "label":"Norway"},
                    {"value":"OM", "label":"Oman"},
                    {"value":"PK", "label":"Pakistan"},
                    {"value":"PW", "label":"Palau"},
                    {"value":"PS", "label":"Palestinian Territory, Occupied"},
                    {"value":"PA", "label":"Panama"},
                    {"value":"PG", "label":"Papua New Guinea"},
                    {"value":"PY", "label":"Paraguay"},
                    {"value":"PE", "label":"Peru"},
                    {"value":"PH", "label":"Philippines"},
                    {"value":"PN", "label":"Pitcairn"},
                    {"value":"PL", "label":"Poland"},
                    {"value":"PT", "label":"Portugal"},
                    {"value":"PR", "label":"Puerto Rico"},
                    {"value":"QA", "label":"Qatar"},
                    {"value":"RE", "label":"Réunion"},
                    {"value":"RO", "label":"Romania"},
                    {"value":"RU", "label":"Russian Federation"},
                    {"value":"RW", "label":"Rwanda"},
                    {"value":"BL", "label":"Saint Barthélemy"},
                    {"value":"SH", "label":"Saint Helena, Ascension and Tristan da Cunha"},
                    {"value":"KN", "label":"Saint Kitts and Nevis"},
                    {"value":"LC", "label":"Saint Lucia"},
                    {"value":"MF", "label":"Saint Martin (French part)"},
                    {"value":"PM", "label":"Saint Pierre and Miquelon"},
                    {"value":"VC", "label":"Saint Vincent and the Grenadines"},
                    {"value":"WS", "label":"Samoa"},
                    {"value":"SM", "label":"San Marino"},
                    {"value":"ST", "label":"Sao Tome and Principe"},
                    {"value":"SA", "label":"Saudi Arabia"},
                    {"value":"SN", "label":"Senegal"},
                    {"value":"RS", "label":"Serbia"},
                    {"value":"SC", "label":"Seychelles"},
                    {"value":"SL", "label":"Sierra Leone"},
                    {"value":"SG", "label":"Singapore"},
                    {"value":"SX", "label":"Sint Maarten (Dutch part)"},
                    {"value":"SK", "label":"Slovakia"},
                    {"value":"SI", "label":"Slovenia"},
                    {"value":"SB", "label":"Solomon Islands"},
                    {"value":"SO", "label":"Somalia"},
                    {"value":"ZA", "label":"South Africa"},
                    {"value":"GS", "label":"South Georgia and the South Sandwich Islands"},
                    {"value":"SS", "label":"South Sudan"},
                    {"value":"ES", "label":"Spain"},
                    {"value":"LK", "label":"Sri Lanka"},
                    {"value":"SD", "label":"Sudan"},
                    {"value":"SR", "label":"Suriname"},
                    {"value":"SJ", "label":"Svalbard and Jan Mayen"},
                    {"value":"SZ", "label":"Swaziland"},
                    {"value":"SE", "label":"Sweden"},
                    {"value":"CH", "label":"Switzerland"},
                    {"value":"SY", "label":"Syrian Arab Republic"},
                    {"value":"TW", "label":"Taiwan, Province of China"},
                    {"value":"TJ", "label":"Tajikistan"},
                    {"value":"TZ", "label":"Tanzania, United Republic of"},
                    {"value":"TH", "label":"Thailand"},
                    {"value":"TL", "label":"Timor-Leste"},
                    {"value":"TG", "label":"Togo"},
                    {"value":"TK", "label":"Tokelau"},
                    {"value":"TO", "label":"Tonga"},
                    {"value":"TT", "label":"Trinidad and Tobago"},
                    {"value":"TN", "label":"Tunisia"},
                    {"value":"TR", "label":"Turkey"},
                    {"value":"TM", "label":"Turkmenistan"},
                    {"value":"TC", "label":"Turks and Caicos Islands"},
                    {"value":"TV", "label":"Tuvalu"},
                    {"value":"UG", "label":"Uganda"},
                    {"value":"UA", "label":"Ukraine"},
                    {"value":"AE", "label":"United Arab Emirates"},
                    {"value":"GB", "label":"United Kingdom"},
                    {"value":"US", "label":"United States"},
                    {"value":"UM", "label":"United States Minor Outlying Islands"},
                    {"value":"UY", "label":"Uruguay"},
                    {"value":"UZ", "label":"Uzbekistan"},
                    {"value":"VU", "label":"Vanuatu"},
                    {"value":"VE", "label":"Venezuela, Bolivarian Republic of"},
                    {"value":"VN", "label":"Vietnam"},
                    {"value":"VG", "label":"Virgin Islands, British"},
                    {"value":"VI", "label":"Virgin Islands, U.S."},
                    {"value":"WF", "label":"Wallis and Futuna"},
                    {"value":"EH", "label":"Western Sahara"},
                    {"value":"YE", "label":"Yemen"},
                    {"value":"ZM", "label":"Zambia"},
                    {"value":"ZW", "label":"Zimbabwe"}
			]
		},
		be: {
			accountBank:	"Code de banque",
			accountHolder:	"Titulaire",
			accountId:		"Id",
			accountNumber:	"Numéro de compte",
			accountVerification: "Account verification",
			bankName:		"Nom de la banque",
			brand:			"Type de carte",
			cancel:			"Retour",
			cardHolder:		"Titulaire",
			cardNumber:		"Numéro de carte",
			country:		"Pays",
			cvv:			"CVV",
			expiryDate:		"Expire",
            taxNumber:      "Tax Identification Number",
			submit:			"Confirmer",
			nextStep:		"Continuer",
			moreBrands:     "More",
			givenName:      "prénom",
			surname:        "abizenak",
			billingAgreement: "Invoice terms and conditions",
			accountBankError:	"Codigo Entidad no válidos",
			accountHolderError:	"Titulaire du compte invalide",
			accountNumberError:	"Numéro de compte invalide",
			cardHolderError:	"Porte-cartes invalides",
			surNameError:		"Invalid surname",
			givenNameError:		"Invalid given name",
			cardNumberError:	"Le numéro de votre carte bancaire est incorrect",
			cvvError:			"Code sécurité de la carte non valide",
			expiryMonthError:	"Date d´expiration non valide",
			expiryYearError:	"Date d´expiration non valide",
            taxNumberError:     "Invalid Tax Identification Number",
			generalTermsAndConditionsError:	"S'il vous plaît accepter le consentement pour la transmission de données",
			emailOrAccountId:	"Email or Account Id",
			secureId:			"Secure Id",
			learnMore:			"En savoir plus",
			mmyy:				"MM / YY",
			ddmmyyyy:			"DD / MM / YYYY",
			mobile:				"Mobile Phone",
			qrcode: 			"QR-Code",
			paymentMode:		"Please select your preferred payment method:",
			customerMobile:				"numéro de téléphone portable (+78000001774)",
			register:		"S'inscrire maintenant",
			billingCountryError: "Invalid country",
			billingStateError: "Invalid state",
			billingCityError: "Invalid city",
			billingStreetError: "Invalid street",
			billingStreetError2: "Invalid street",
			billingPostCodeError: "Invalid postcode",
			mobilePhoneError: "Phone number is required.",
			noSelectionError: "Select one of the two options.",
			mobileError: "Invalid mobile number",
			mobileContryCodeError: "Invalid country code",
			birthDateError: "Invalid birth date. DD/MM/YYYY expected",
			showOtherPaymentMethods: "Montrer d'autres modes de paiement",
			cvvHint: "Les 3 chiffres au dos de ta carte.",
			cvvHintAmex: "Les 4 chiffres sur le devant de votre carte.",
            cvvHintMaestro: "Les 3 chiffres au dos de ta carte si elles sont inscrites.",
            billingAddress: "Billing address",
            billingCountryPlaceholder: "Please select",
            billingStatePlaceholder: "State/Province",
            billingCityPlaceholder: "City",
            billingPostCodePlaceholder: "ZIP/Postal Code",
            billingStreet1Placeholder: "Street Address Line 1",
            billingStreet2Placeholder: "Street Address Line 2 (Optional)",
            billingStreet2PlaceholderMandatory: "Street Address Line 2",
            supportMessage:"Payment cannot be completed.<br/>Please contact support with following information:<br/>{{message}}<br/>ndc: {{ndc}}<br/>timestamp: {{timestamp}}",
            nationalIdentifier: "National Identifier",
			nationalIdentifierError: "Invalid National Identifier",
			ikanoOpenInvoiceTermsAndCondition: "Terms and Conditions",
			ikanoOpenInvoiceAccept: "I have read and agree the Terms and Conditions",
			ikanoOpenInvoiceAcceptError: "Please accept the Terms and Conditions",
			insertCode: "Insert code here",
			mandateAuthorization: "By signing this mandate form, I authorize the creditor to send an instruction to my bank to debit my account in accordance with the instruction from the creditor.",
			mandateEntitlement: "As part of my rights, I am entitled to a refund from my bank under the terms and conditions of my agreement with my bank. A refund must be claimed within 8 weeks starting from the date on which my account was debited.",
			mandateConfirmation: "I confirm to be authorized for the aforementioned account to sign a mandate. I agree to the reduced direct debit pre-notification period of 1 calendar day. I certify that the mandate information provided is complete and accurate.",
			mandateConfirmationError: "Please agree to all the terms and conditions before continuing."
        },
		de: {
			accountBank:	"Bankleitzahl",
			accountBankBic: "BIC (SWIFT-Code) oder Bankleitzahl",
			accountBic:	"BIC (SWIFT-Code)",
			accountHolder:	"Kontoinhaber",
			accountId:		"Id",
			accountNumber:	"Konto-Nr.",
			accountNumberIban: "IBAN oder Konto-Nr.",
			accountIban:	"IBAN",
			accountVerification: "Account verification",
			bankName:		"Bankname",
			brand:			"Kartentyp",
			cancel:			"Zurück",
			cardHolder:		"Karteninhaber",
			cardNumber:		"Kartennummer",
			country:		"Land",
			cvv:			"CVV",
			expiryDate:		"Gültig bis",
            taxNumber:      "Tax Identification Number",
			submit:			"Jetzt bezahlen",
			nextStep:		"Fortfahren",
			moreBrands:     "More",
			givenName:      "Vorname",
			surname:        "Nachname",
			billingAgreement: "Rechnungsbedingungen",
			accountBankError:	"Ungültige Bankleitzahl",
			accountBankBicError: "Ungültige BIC (SWIFT-Code) oder Bankleitzahl",
			accountBicError:	"Ungültige BIC (SWIFT-Code)",
			accountHolderError:	"Ungültiger Kontoinhaber",
			accountNumberError:	"Ungültige Kontonummer",
			accountNumberIbanError: "Ungültige IBAN oder Kontonummer",
			accountIbanError:   "Ungültige IBAN",
			cardHolderError:	"Ungültiger Karteninhaber",
			surNameError:		"Ungültiger Vorname",
			givenNameError:		"Ungültiger Nachname",
			cardNumberError:	"Ungültige Kartennummer",
			cvvError:			"Ungültige Kartenprüfnummer",
			expiryMonthError:	"Ungültiges Ablaufdatum",
			expiryYearError:	"Ungültiges Ablaufdatum",
            taxNumberError:     "Invalid Tax Identification Number",
			generalTermsAndConditionsError:			"Bitte akzeptieren Sie die Einwilligung zur Datenübermittlung",
			emailOrAccountId:	"E-Mail oder Konto-Id",
			secureId:			"Secure-Id",
			learnMore:			"Mehr erfahren",
			mmyy:				"MM / JJ",
			ddmmyyyy:			"DD / MM / YYYY",
			mobile:				"Mobile Phone",
			qrcode: 			"QR-Code",
			paymentMode:		"Please select your preferred payment method:",
			customerMobile:				"Mobilnummer (+78000001774)",
			register:		"Jetzt anmelden",
			billingCountryError: "Ungültiges Land",
			billingStateError: "Ungültiges Bundesland",
			billingCityError: "Ungültige Stadt",
			billingStreetError: "Ungültige Straße",
			billingStreetError2: "Ungültige Straße",
			billingPostCodeError: "Ungültige Postleitzahl",
			mobilePhoneError: "Phone number is required.",
			noSelectionError: "Select one of the two options.",
			mobileError: "Ungültige Telefonnummer",
			mobileContryCodeError: "Ungültiger Ländercode",
			birthDateError: "Invalid birth date. DD/MM/YYYY expected",
			showOtherPaymentMethods: "Andere Bezahlmethoden auswählen",
			cvvHint: "Die 3 Zahlen auf der Rückseite Ihrer Kreditkarte.",
			cvvHintAmex: "Die 4 Zahlen auf der Vorderseite Ihrer Kreditkarte.",
			cvvHintMaestro: "Die 3 Zahlen auf der Rückseite Ihrer Kreditkarte, falls angegeben.",
			billingAddress: "Rechnungsadresse",
			billingCountryPlaceholder: "Bitte auswählen",
			billingStatePlaceholder: "Bundesland",
			billingCityPlaceholder: "Stadt",
			billingPostCodePlaceholder: "Postleitzahl",
			billingStreet1Placeholder: "Straßenname - Zeile 1",
			billingStreet2Placeholder: "Straßenname - Zeile 2 (optional)",
			billingStreet2PlaceholderMandatory: "Straßenname - Zeile 2",
            supportMessage:"Payment cannot be completed.<br/>Please contact support with following information:<br/>{{message}}<br/>ndc: {{ndc}}<br/>timestamp: {{timestamp}}",
            nationalIdentifier: "National Identifier",
			nationalIdentifierError: "Invalid National Identifier",
			ikanoOpenInvoiceTermsAndCondition: "Terms and Conditions",
			ikanoOpenInvoiceAccept: "I have read and agree the Terms and Conditions",
			ikanoOpenInvoiceAcceptError: "Please accept the Terms and Conditions",
			insertCode: "Insert code here",
			mandateAuthorization: "Ich ermächtige den Zahlungsempfänger, Zahlungen von meinem Konto mittels Lastschrift einzuziehen. Zugleich weise ich mein Kreditinstitut an, die von dem Zahlungsempfänger auf mein Konto gezogenen Lastschriften einzulösen.",
			mandateEntitlement: "Hinweis: Ich kann innerhalb von acht Wochen, beginnend mit dem Belastungsdatum, die Erstattung des belasteten Betrages verlangen. Es gelten dabei die mit meinem Kreditinstitut vereinbarten Bedingungen.",
			mandateConfirmation: "Ich bestätige, dass ich für das angegebene Konto unterschriftsberechtigt bin bzw. von dem Unterschriftsberechtigten bevollmächtigt bin, das Mandat zu erteilen. Ich stimme der Verkürzung der Frist für die Vorabankündigungen der Lastschrift auf 1 Kalendertag zu.",
			mandateConfirmationError: "Bitte bestätigen Sie die Bedingungen.",
			countryCodes : [
			        {"value": "" , "label": "Bitte auswählen"},
                    {"value":"AF", "label":"Afghanistan"},
                    {"value":"AX", "label":"Åland-Inseln"},
                    {"value":"AL", "label":"Albanien"},
                    {"value":"DZ", "label":"Algerien"},
                    {"value":"AS", "label":"Amerikanischen Samoa-Inseln"},
                    {"value":"AD", "label":"Andorra"},
                    {"value":"AO", "label":"Angola"},
                    {"value":"AI", "label":"Anguilla"},
                    {"value":"AQ", "label":"Antarktis"},
                    {"value":"AG", "label":"Antigua und Barbuda"},
                    {"value":"AR", "label":"Argentinien"},
                    {"value":"AM", "label":"Armenien"},
                    {"value":"AW", "label":"Aruba"},
                    {"value":"AU", "label":"Australien"},
                    {"value":"AT", "label":"Österreich"},
                    {"value":"AZ", "label":"Aserbaidschan"},
                    {"value":"BS", "label":"Bahamas"},
                    {"value":"BH", "label":"Bahrain"},
                    {"value":"BD", "label":"Bangladesch"},
                    {"value":"BB", "label":"Barbados"},
                    {"value":"BY", "label":"Weißrussland"},
                    {"value":"BE", "label":"Belgien"},
                    {"value":"BZ", "label":"Belize"},
                    {"value":"BJ", "label":"Benin"},
                    {"value":"BM", "label":"Bermuda"},
                    {"value":"BT", "label":"Bhutan"},
                    {"value":"BO", "label":"Bolivien, plurinationaler Staat von"},
                    {"value":"BQ", "label":"Bonaire, Sint Eustatius und Saba"},
                    {"value":"BA", "label":"Bosnien und Herzegowina"},
                    {"value":"BW", "label":"Botswana"},
                    {"value":"BV", "label":"Bouvetinsel"},
                    {"value":"BR", "label":"Brasilien"},
                    {"value":"IO", "label":"Britisches Territorium des Indischen Ozeans"},
                    {"value":"BN", "label":"Brunei Darussalam"},
                    {"value":"BG", "label":"Bulgarien"},
                    {"value":"BF", "label":"Burkina Faso"},
                    {"value":"BI", "label":"Burundi"},
                    {"value":"KH", "label":"Kambodscha"},
                    {"value":"CM", "label":"Kamerun"},
                    {"value":"CA", "label":"Kanada"},
                    {"value":"CV", "label":"Kap Verde"},
                    {"value":"KY", "label":"Cayman Inseln"},
                    {"value":"CF", "label":"Zentralafrikanische Republik"},
                    {"value":"TD", "label":"Tschad"},
                    {"value":"CL", "label":"Chile"},
                    {"value":"CN", "label":"China"},
                    {"value":"CX", "label":"Weihnachtsinsel"},
                    {"value":"CC", "label":"Kokosinseln (Keelinginseln)"},
                    {"value":"CO", "label":"Kolumbien"},
                    {"value":"KM", "label":"Komoren"},
                    {"value":"CG", "label":"Kongo"},
                    {"value":"CD", "label":"Kongo, Demokratische Republik"},
                    {"value":"CK", "label":"Cookinseln"},
                    {"value":"CR", "label":"Costa Rica"},
                    {"value":"CI", "label":"Elfenbeinküste"},
                    {"value":"HR", "label":"Kroatien"},
                    {"value":"CU", "label":"Kuba"},
                    {"value":"CW", "label":"Curacao"},
                    {"value":"CY", "label":"Zypern"},
                    {"value":"CZ", "label":"Tschechische Republik"},
                    {"value":"DK", "label":"Dänemark"},
                    {"value":"DJ", "label":"Dschibuti"},
                    {"value":"DM", "label":"Dominica"},
                    {"value":"DO", "label":"Dominikanische Republik"},
                    {"value":"EC", "label":"Ecuador"},
                    {"value":"EG", "label":"Ägypten"},
                    {"value":"SV", "label":"El Salvador"},
                    {"value":"GQ", "label":"Äquatorialguinea"},
                    {"value":"ER", "label":"Eritrea"},
                    {"value":"EE", "label":"Estland"},
                    {"value":"ET", "label":"Äthiopien"},
                    {"value":"FK", "label":"Falklandinseln (Malvinas)"},
                    {"value":"FO", "label":"Färöer Inseln"},
                    {"value":"FJ", "label":"Fidschi"},
                    {"value":"FI", "label":"Finnland"},
                    {"value":"FR", "label":"Frankreich"},
                    {"value":"GF", "label":"Französisch-Guayana"},
                    {"value":"PF", "label":"Französisch Polynesien"},
                    {"value":"TF", "label":"Südfranzösische Territorien"},
                    {"value":"GA", "label":"Gabun"},
                    {"value":"GM", "label":"Gambia"},
                    {"value":"GE", "label":"Georgia"},
                    {"value":"DE", "label":"Deutschland"},
                    {"value":"GH", "label":"Ghana"},
                    {"value":"GI", "label":"Gibraltar"},
                    {"value":"GR", "label":"Griechenland"},
                    {"value":"GL", "label":"Grönland"},
                    {"value":"GD", "label":"Grenada"},
                    {"value":"GP", "label":"Guadeloupe"},
                    {"value":"GU", "label":"Guam"},
                    {"value":"GT", "label":"Guatemala"},
                    {"value":"GG", "label":"Guernsey"},
                    {"value":"GN", "label":"Guinea"},
                    {"value":"GW", "label":"Guinea-Bissau"},
                    {"value":"GY", "label":"Guyana"},
                    {"value":"HT", "label":"Haiti"},
                    {"value":"HM", "label":"Heard Island und McDonald Islands"},
                    {"value":"VA", "label":"Heiliger Stuhl"},
                    {"value":"HN", "label":"Honduras"},
                    {"value":"HK", "label":"Hongkong"},
                    {"value":"HU", "label":"Ungarn"},
                    {"value":"IS", "label":"Island"},
                    {"value":"IN", "label":"Indien"},
                    {"value":"ID", "label":"Indonesien"},
                    {"value":"IR", "label":"Iran, Islamische Republik"},
                    {"value":"IQ", "label":"Irak"},
                    {"value":"IE", "label":"Irland"},
                    {"value":"IM", "label":"Isle of Man"},
                    {"value":"IL", "label":"Israel"},
                    {"value":"IT", "label":"Italien"},
                    {"value":"JM", "label":"Jamaika"},
                    {"value":"JP", "label":"Japan"},
                    {"value":"JE", "label":"Jersey"},
                    {"value":"JO", "label":"Jordan"},
                    {"value":"KZ", "label":"Kasachstan"},
                    {"value":"KE", "label":"Kenia"},
                    {"value":"KI", "label":"Kiribati"},
                    {"value":"KP", "label":"Korea, Demokratische Volksrepublik"},
                    {"value":"KR", "label":"Korea, Republik von"},
                    {"value":"KW", "label":"Kuwait"},
                    {"value":"KG", "label":"Kirgisistan"},
                    {"value":"LA", "label":"Demokratische Volksrepublik Laos"},
                    {"value":"LV", "label":"Lettland"},
                    {"value":"LB", "label":"Libanon"},
                    {"value":"LS", "label":"Lesotho"},
                    {"value":"LR", "label":"Liberia"},
                    {"value":"LY", "label":"Libyen"},
                    {"value":"LI", "label":"Liechtenstein"},
                    {"value":"LT", "label":"Litauen"},
                    {"value":"LU", "label":"Luxembourg"},
                    {"value":"MO", "label":"Macao"},
                    {"value":"MK", "label":"Mazedonien, ehemalige jugoslawische Republik"},
                    {"value":"MG", "label":"Madagaskar"},
                    {"value":"MW", "label":"Malawi"},
                    {"value":"MY", "label":"Malaysia"},
                    {"value":"MV", "label":"Malediven"},
                    {"value":"ML", "label":"Mali"},
                    {"value":"MT", "label":"Malta"},
                    {"value":"MH", "label":"Marshallinseln"},
                    {"value":"MQ", "label":"Martinique"},
                    {"value":"MR", "label":"Mauretanien"},
                    {"value":"MU", "label":"Mauritius"},
                    {"value":"YT", "label":"Mayotte"},
                    {"value":"MX", "label":"Mexiko"},
                    {"value":"FM", "label":"Mikronesien, Föderierte Staaten von"},
                    {"value":"MD", "label":"Moldawien, Republik"},
                    {"value":"MC", "label":"Monaco"},
                    {"value":"MN", "label":"Mongolei"},
                    {"value":"ME", "label":"Montenegro"},
                    {"value":"MS", "label":"Montserrat"},
                    {"value":"MA", "label":"Marokko"},
                    {"value":"MZ", "label":"Mosambik"},
                    {"value":"MM", "label":"Myanmar"},
                    {"value":"NA", "label":"Namibia"},
                    {"value":"NR", "label":"Nauru"},
                    {"value":"NP", "label":"Nepal"},
                    {"value":"NL", "label":"Niederlande"},
                    {"value":"NC", "label":"Neu-Kaledonien"},
                    {"value":"NZ", "label":"Neuseeland"},
                    {"value":"NI", "label":"Nicaragua"},
                    {"value":"NE", "label":"Niger"},
                    {"value":"NG", "label":"Nigeria"},
                    {"value":"NU", "label":"Niue"},
                    {"value":"NF", "label":"Norfolkinsel"},
                    {"value":"MP", "label":"Nördliche Marianneninseln"},
                    {"value":"NO", "label":"Norwegen"},
                    {"value":"OM", "label":"Oman"},
                    {"value":"PK", "label":"Pakistan"},
                    {"value":"PW", "label":"Palau"},
                    {"value":"PS", "label":"Besetzte palästinensische Gebiete"},
                    {"value":"PA", "label":"Panama"},
                    {"value":"PG", "label":"Papua Neu-Guinea"},
                    {"value":"PY", "label":"Paraguay"},
                    {"value":"PE", "label":"Peru"},
                    {"value":"PH", "label":"Philippinen"},
                    {"value":"PN", "label":"Pitcairn"},
                    {"value":"PL", "label":"Polen"},
                    {"value":"PT", "label":"Portugal"},
                    {"value":"PR", "label":"Puerto Rico"},
                    {"value":"QA", "label":"Katar"},
                    {"value":"RE", "label":"Wiedervereinigung"},
                    {"value":"RO", "label":"Rumänien"},
                    {"value":"RU", "label":"Russische Föderation"},
                    {"value":"RW", "label":"Ruanda"},
                    {"value":"BL", "label":"Saint Barthélemy"},
                    {"value":"SH", "label":"St. Helena, Himmelfahrt und Tristan da Cunha"},
                    {"value":"KN", "label":"St. Kitts und Nevis"},
                    {"value":"LC", "label":"St. Lucia"},
                    {"value":"MF", "label":"Saint Martin (französischer Teil)"},
                    {"value":"PM", "label":"Saint Pierre und Miquelon"},
                    {"value":"VC", "label":"St. Vincent und die Grenadinen"},
                    {"value":"WS", "label":"Samoa"},
                    {"value":"SM", "label":"San Marino"},
                    {"value":"ST", "label":"Sao Tome und Principe"},
                    {"value":"SA", "label":"Saudi Arabien"},
                    {"value":"SN", "label":"Senegal"},
                    {"value":"RS", "label":"Serbien"},
                    {"value":"SC", "label":"Seychellen"},
                    {"value":"SL", "label":"Sierra Leone"},
                    {"value":"SG", "label":"Singapur"},
                    {"value":"SX", "label":"Sint Maarten (niederländischer Teil)"},
                    {"value":"SK", "label":"Slowakei"},
                    {"value":"SI", "label":"Slowenien"},
                    {"value":"SB", "label":"Salomon-Inseln"},
                    {"value":"SO", "label":"Somalia"},
                    {"value":"ZA", "label":"Südafrika"},
                    {"value":"GS", "label":"Süd-Georgien und die südlichen Sandwich-Inseln"},
                    {"value":"SS", "label":"Südsudan"},
                    {"value":"ES", "label":"Spanien"},
                    {"value":"LK", "label":"Sri Lanka"},
                    {"value":"SD", "label":"Sudan"},
                    {"value":"SR", "label":"Suriname"},
                    {"value":"SJ", "label":"Spitzbergen und Jan Mayen"},
                    {"value":"SZ", "label":"Swasiland"},
                    {"value":"SE", "label":"Schweden"},
                    {"value":"CH", "label":"Schweiz"},
                    {"value":"SY", "label":"Syrische Arabische Republik"},
                    {"value":"TW", "label":"Taiwan, Provinz Chinas"},
                    {"value":"TJ", "label":"Tadschikistan"},
                    {"value":"TZ", "label":"Tansania, Vereinigte Republik"},
                    {"value":"TH", "label":"Thailand"},
                    {"value":"TL", "label":"Timor-Leste"},
                    {"value":"TG", "label":"Togo"},
                    {"value":"TK", "label":"Tokelau"},
                    {"value":"TO", "label":"Tonga"},
                    {"value":"TT", "label":"Trinidad und Tobago"},
                    {"value":"TN", "label":"Tunesien"},
                    {"value":"TR", "label":"Türkei"},
                    {"value":"TM", "label":"Turkmenistan"},
                    {"value":"TC", "label":"Turks- und Caicosinseln"},
                    {"value":"TV", "label":"Tuvalu"},
                    {"value":"UG", "label":"Uganda"},
                    {"value":"UA", "label":"Ukraine"},
                    {"value":"AE", "label":"Vereinigte Arabische Emirate"},
                    {"value":"GB", "label":"Großbritannien"},
                    {"value":"US", "label":"Vereinigte Staaten"},
                    {"value":"UM", "label":"USA, kleinere ausgelagerte Inseln"},
                    {"value":"UY", "label":"Uruguay"},
                    {"value":"UZ", "label":"Usbekistan"},
                    {"value":"VU", "label":"Vanuatu"},
                    {"value":"VE", "label":"Venezuela, Bolivarische Republik"},
                    {"value":"VN", "label":"Vietnam"},
                    {"value":"VG", "label":"Virgin Inseln, Britisch"},
                    {"value":"VI", "label":"Amerikanische Jungferninseln"},
                    {"value":"WF", "label":"Wallis und Futuna"},
                    {"value":"EH", "label":"Westsahara"},
                    {"value":"YE", "label":"Jemen"},
                    {"value":"ZM", "label":"Sambia"},
                    {"value":"ZW", "label":"Zimbabwe"}
			]
        },
		fr: {
        			accountBank:	"Code de banque",
        			accountHolder:	"Titulaire",
        			accountId:		"Id",
        			accountNumber:	"Numéro de compte",
        			accountVerification: "Account verification",
        			bankName:		"Nom de la banque",
        			brand:			"Type de carte",
        			cancel:			"Retour",
        			cardHolder:		"Titulaire",
        			cardNumber:		"Numéro de carte",
        			country:		"Pays",
        			cvv:			"Cryptogramme visuel",
        			expiryDate:		"Date d´expiration",
                    taxNumber:      "Numéro d´identification fiscal",
        			submit:			"Confirmer",
        			nextStep:		"Continuer",
        			moreBrands:     "Plus",
        			givenName:      "Prénom",
        			surname:        "Nom de famille",
        			billingAgreement: "Termes et conditions de facturation",
        			accountBankError:	"Code saisi invalide",
        			accountHolderError:	"Titulaire du compte invalide",
        			accountNumberError:	"Numéro de compte invalide",
        			cardHolderError:	"Titulaire invalide",
        			surNameError:		"Nom de famille invalide",
        			givenNameError:		"Prenom invalide",
        			cardNumberError:	"Le numéro de votre carte bancaire est incorrect",
        			cvvError:			"Code sécurité de la carte non valide",
        			expiryMonthError:	"Date d´expiration non valide",
        			expiryYearError:	"Date d´expiration non valide",
                    taxNumberError:     "Numéro d´identification fiscal invalide",
        			generalTermsAndConditionsError:  "S'il vous plaît acceptez le consentement pour la transmission de données",
        			emailOrAccountId:	"Adresse email ou identifiant de compte",
        			secureId:			"Secure Id",
        			learnMore:			"En savoir plus",
        			mmyy:				"MM / AA",
        			ddmmyyyy:			"JJ / MM / AAAA",
        			mobile:				"Telephone Mobile",
        			qrcode: 			"QR-Code",
        			paymentMode:		"Selectionnez votre moyen de paiement préféré:",
        			customerMobile:				"numéro de téléphone portable (+78000001774)",
        			register:		"Creation de compte",
        			billingCountryError: "Pays invalide",
        			billingStateError: "Région invalide",
        			billingCityError: "Ville invalide",
        			billingStreetError: "Rue invalide",
        			billingStreetError2: "Rue invalide",
        			billingPostCodeError: "Code postal invalide",
        			mobilePhoneError: "Un numéro de téléphone mobile est requis.",
        			noSelectionError: "Séléctionnez une des deux options.",
        			mobileError: "Numéro de téléphone invalide",
        			mobileContryCodeError: "Indicatif du numéro de téléphone invalide",
        			birthDateError: "Date de naissance non valide. JJ/MM/AAAA attendu",
        			showOtherPaymentMethods: "Afficher d'autres modes de paiement",
                    cvvHint: "Les 3 chiffres au dos de votre carte banacaire.",
                    cvvHintAmex: "Les 4 chiffres sur le devant de votre carte bancaire.",
                    cvvHintMaestro: "Les 3 chiffres au dos de votre carte si elles sont inscrites.",
                    billingAddress: "Adresse de facturation",
                    billingCountryPlaceholder: "Veuillez sélectionner",
                    billingStatePlaceholder: "Département",
                    billingCityPlaceholder: "Ville",
                    billingPostCodePlaceholder: "Code postal",
                    billingStreet1Placeholder: "Adresse",
                    billingStreet2Placeholder: "Adresse (supplémentaire)",
                    billingStreet2PlaceholderMandatory: "Adresse",
                    supportMessage:"Le paiement ne peux être complété.<br/>Merci de contacter le support avec les informations suivantes:<br/>{{message}}<br/>ndc: {{ndc}}<br/>timestamp: {{timestamp}}",
                    nationalIdentifier: "Numéro d'identification national",
        			nationalIdentifierError: "Numéro d'identification national invalide",
        			ikanoOpenInvoiceTermsAndCondition: "Termes et Conditions",
        			ikanoOpenInvoiceAccept: "J'ai lu et approuvé les Termes et Conditions",
        			ikanoOpenInvoiceAcceptError: "Merci d'accepter les Termes et Conditions",
        			insertCode: "Inserez votre code ici",
        			mandateAuthorization: "En signant ce contrat, j'autorise le créditeur a envoyer des instruction à ma banque pour debiter mon compte bancaire en accord avec les instructions du crediteur.",
        			mandateEntitlement: "En accord avec la législation en vigueur, je suis autorisé à demander un remboursement à ma banque sous réserve d'accord avec les termes et conditions de ma banque. Un remboursement doit être demandé durant les 8 semaines après que mon compte soit débité.",
        			mandateConfirmation: "Je confirme que je suis autorisé pour le compte mentionné à signer le contrat. J'accepte la réduction de la période de rétractation à 1 jour calandaire. Je certifie que les informations présentes dans ce contrat sont exacte et complète.",
        			mandateConfirmationError: "Merci d'accepter tous les termes et conditions avant de continuer.",
        			countryCodes: [
                        {"value": "", "label": "Veuillez sélectionner"},
                        {"value": "AF", "label": "Afghanistan"},
                        {"value": "AX", "label": "Île Åland"},
                        {"value": "AL", "label": "Albanie"},
                        {"value": "DZ", "label": "Algérie"},
                        {"value": "AS", "label": "American Samoa"},
                        {"value": "AD", "label": "Andorre"},
                        {"value": "AO", "label": "Angola"},
                        {"value": "AI", "label": "Anguilla"},
                        {"value": "AQ", "label": "Antarctique"},
                        {"value": "AG", "label": "Antigua-et-Barbuda"},
                        {"value": "AR", "label": "Argentine"},
                        {"value": "AM", "label": "Arménie"},
                        {"value": "AW", "label": "Aruba"},
                        {"value": "AU", "label": "Australie"},
                        {"value": "AT", "label": "Autriche"},
                        {"value": "AZ", "label": "Azerbaïdjan"},
                        {"value": "BS", "label": "Bahamas"},
                        {"value": "BH", "label": "Bahreïn"},
                        {"value": "BD", "label": "Bangladesh"},
                        {"value": "BB", "label": "Barbados"},
                        {"value": "BY", "label": "Biélorussie"},
                        {"value": "BE", "label": "Belgique"},
                        {"value": "BZ", "label": "Belize"},
                        {"value": "BJ", "label": "Bénin"},
                        {"value": "BM", "label": "Bermuda"},
                        {"value": "BT", "label": "Bhoutan"},
                        {"value": "BO", "label": "Bolivie"},
                        {"value": "BQ", "label": "Bonaire, Saint-Eustache et Saba"},
                        {"value": "BA", "label": "Bosnie-Herzégovine"},
                        {"value": "BW", "label": "Botswana"},
                        {"value": "BV", "label": "Île Bouvet"},
                        {"value": "BR", "label": "Brésil"},
                        {"value": "IO", "label": "Territoire britannique de l'océan Indien"},
                        {"value": "BN", "label": "Brunei Darussalam"},
                        {"value": "BG", "label": "Bulgarie"},
                        {"value": "BF", "label": "Burkina Faso"},
                        {"value": "BI", "label": "Burundi"},
                        {"value": "KH", "label": "Cambodge"},
                        {"value": "CM", "label": "Cameroun"},
                        {"value": "CA", "label": "Canada"},
                        {"value": "CV", "label": "Cap-Vert"},
                        {"value": "KY", "label": "Îles Caïmanes"},
                        {"value": "CF", "label": "République centrafricaine"},
                        {"value": "TD", "label": "Tchad"},
                        {"value": "CL", "label": "Chili"},
                        {"value": "CN", "label": "Chine"},
                        {"value": "CX", "label": "Île Christmas"},
                        {"value": "CC", "label": "Îles Cocos"},
                        {"value": "CO", "label": "Colombie"},
                        {"value": "KM", "label": "Comores"},
                        {"value": "CG", "label": "Congo"},
                        {"value": "CD", "label": "Congo, the Democratic Republic of the"},
                        {"value": "CK", "label": "Îles Cook"},
                        {"value": "CR", "label": "Costa Rica"},
                        {"value": "CI", "label": "Côte d'Ivoire"},
                        {"value": "HR", "label": "Croatie"},
                        {"value": "CU", "label": "Cuba"},
                        {"value": "CW", "label": "Curaçao"},
                        {"value": "CY", "label": "Chypre"},
                        {"value": "CZ", "label": "Czech Republic"},
                        {"value": "DK", "label": "Danemark"},
                        {"value": "DJ", "label": "Djibouti"},
                        {"value": "DM", "label": "Dominique"},
                        {"value": "DO", "label": "République Tchèque"},
                        {"value": "EC", "label": "Equateur"},
                        {"value": "EG", "label": "Egypte"},
                        {"value": "SV", "label": "El Salvador"},
                        {"value": "GQ", "label": "Guinée équatoriale"},
                        {"value": "ER", "label": "Eritrea"},
                        {"value": "EE", "label": "Estonie"},
                        {"value": "ET", "label": "Ethiopie"},
                        {"value": "FK", "label": "Falkland Islands"},
                        {"value": "FO", "label": "Îles Féroé"},
                        {"value": "FJ", "label": "Fidji"},
                        {"value": "FI", "label": "Finlande"},
                        {"value": "FR", "label": "France"},
                        {"value": "GF", "label": "Guyane française"},
                        {"value": "PF", "label": "Polynésie Française"},
                        {"value": "TF", "label": "Terres Australes Françaises"},
                        {"value": "GA", "label": "Gabon"},
                        {"value": "GM", "label": "Gambie"},
                        {"value": "GE", "label": "Georgie"},
                        {"value": "DE", "label": "Allemagne"},
                        {"value": "GH", "label": "Ghana"},
                        {"value": "GI", "label": "Gibraltar"},
                        {"value": "GR", "label": "Greece"},
                        {"value": "GL", "label": "Groenland"},
                        {"value": "GD", "label": "Grenada"},
                        {"value": "GP", "label": "Guadeloupe"},
                        {"value": "GU", "label": "Guam"},
                        {"value": "GT", "label": "Guatemala"},
                        {"value": "GG", "label": "Guernesey"},
                        {"value": "GN", "label": "Guinée"},
                        {"value": "GW", "label": "Guinée-Bissau"},
                        {"value": "GY", "label": "Guyane"},
                        {"value": "HT", "label": "Haïti"},
                        {"value": "HM", "label": "Îles Heard et Îles McDonald"},
                        {"value": "VA", "label": "Saint-Siège (État de la Cité du Vatican)"},
                        {"value": "HN", "label": "Honduras"},
                        {"value": "HK", "label": "Hong Kong"},
                        {"value": "HU", "label": "Hongrie"},
                        {"value": "IS", "label": "Iceland"},
                        {"value": "IN", "label": "Inde"},
                        {"value": "ID", "label": "Indonésie"},
                        {"value": "IR", "label": "Iran"},
                        {"value": "IQ", "label": "Iraq"},
                        {"value": "IE", "label": "Irelande"},
                        {"value": "IM", "label": "Île de Man"},
                        {"value": "IL", "label": "Israel"},
                        {"value": "IT", "label": "Italie"},
                        {"value": "JM", "label": "Jamaique"},
                        {"value": "JP", "label": "Japon"},
                        {"value": "JE", "label": "Jersey"},
                        {"value": "JO", "label": "Jordan"},
                        {"value": "KZ", "label": "Kazakhstan"},
                        {"value": "KE", "label": "Kenya"},
                        {"value": "KI", "label": "Kiribati"},
                        {"value": "KP", "label": "Corée, République populaire démocratique de"},
                        {"value": "KR", "label": "Corée, République de"},
                        {"value": "KW", "label": "Kuwait"},
                        {"value": "KG", "label": "Kirghizistan"},
                        {"value": "LA", "label": "République démocratique populaire lao"},
                        {"value": "LV", "label": "Lettonie"},
                        {"value": "LB", "label": "Liban"},
                        {"value": "LS", "label": "Lesotho"},
                        {"value": "LR", "label": "Liberia"},
                        {"value": "LY", "label": "Libya"},
                        {"value": "LI", "label": "Liechtenstein"},
                        {"value": "LT", "label": "Lituanie"},
                        {"value": "LU", "label": "Luxembourg"},
                        {"value": "MO", "label": "Macao"},
                        {"value": "MK", "label": "Macédoine, ex-République yougoslave de"},
                        {"value": "MG", "label": "Madagascar"},
                        {"value": "MW", "label": "Malawi"},
                        {"value": "MY", "label": "Malaysie"},
                        {"value": "MV", "label": "Maldives"},
                        {"value": "ML", "label": "Mali"},
                        {"value": "MT", "label": "Malte"},
                        {"value": "MH", "label": "Îles Marshall"},
                        {"value": "MQ", "label": "Martinique"},
                        {"value": "MR", "label": "Mauritania"},
                        {"value": "MU", "label": "Mauritius"},
                        {"value": "YT", "label": "Mayotte"},
                        {"value": "MX", "label": "Mexique"},
                        {"value": "FM", "label": "Micronésie, États fédérés de"},
                        {"value": "MD", "label": "Moldavie, République de"},
                        {"value": "MC", "label": "Monaco"},
                        {"value": "MN", "label": "Mongolie"},
                        {"value": "ME", "label": "Monténégro"},
                        {"value": "MS", "label": "Montserrat"},
                        {"value": "MA", "label": "Maroc"},
                        {"value": "MZ", "label": "Mozambique"},
                        {"value": "MM", "label": "Myanmar"},
                        {"value": "NA", "label": "Namibie"},
                        {"value": "NR", "label": "Nauru"},
                        {"value": "NP", "label": "Nepal"},
                        {"value": "NL", "label": "Pays-Bas"},
                        {"value": "NC", "label": "Nouvelle-Calédonie"},
                        {"value": "NZ", "label": "Nouvelle-Zélande"},
                        {"value": "NI", "label": "Nicaragua"},
                        {"value": "NE", "label": "Niger"},
                        {"value": "NG", "label": "Nigeria"},
                        {"value": "NU", "label": "Niue"},
                        {"value": "NF", "label": "Île Norfolk"},
                        {"value": "MP", "label": "Îles Mariannes du Nord"},
                        {"value": "NO", "label": "Norvège"},
                        {"value": "OM", "label": "Oman"},
                        {"value": "PK", "label": "Pakistan"},
                        {"value": "PW", "label": "Palau"},
                        {"value": "PS", "label": "Territoire palestinien"},
                        {"value": "PA", "label": "Panama"},
                        {"value": "PG", "label": "Papouasie-Nouvelle-Guinée"},
                        {"value": "PY", "label": "Paraguay"},
                        {"value": "PE", "label": "Pérou"},
                        {"value": "PH", "label": "Philippines"},
                        {"value": "PN", "label": "Pitcairn"},
                        {"value": "PL", "label": "Pologne"},
                        {"value": "PT", "label": "Portugal"},
                        {"value": "PR", "label": "Puerto Rico"},
                        {"value": "QA", "label": "Qatar"},
                        {"value": "RE", "label": "Réunion"},
                        {"value": "RO", "label": "Roumanie"},
                        {"value": "RU", "label": "Russie"},
                        {"value": "RW", "label": "Rwanda"},
                        {"value": "BL", "label": "Saint Barthélemy"},
                        {"value": "SH", "label": "Sainte-Hélène, Ascension et Tristan da Cunha"},
                        {"value": "KN", "label": "Saint Kitts et Nevis"},
                        {"value": "LC", "label": "Sainte Lucie"},
                        {"value": "MF", "label": "Saint Martin (partie française)"},
                        {"value": "PM", "label": "Saint Pierre et Miquelon"},
                        {"value": "VC", "label": "Saint-Vincent-et-les Grenadines"},
                        {"value": "WS", "label": "Samoa"},
                        {"value": "SM", "label": "Saint-Marin"},
                        {"value": "ST", "label": "Sao Tomé-et-Principe"},
                        {"value": "SA", "label": "Arabie Saoudite"},
                        {"value": "SN", "label": "Sénégal"},
                        {"value": "RS", "label": "Serbie"},
                        {"value": "SC", "label": "Seychelles"},
                        {"value": "SL", "label": "Sierra Leone"},
                        {"value": "SG", "label": "Singapour"},
                        {"value": "SX", "label": "Antilles Néerlandaises"},
                        {"value": "SK", "label": "Slovaquie"},
                        {"value": "SI", "label": "Slovénie"},
                        {"value": "SB", "label": "Îles Salomon"},
                        {"value": "SO", "label": "Somalie"},
                        {"value": "ZA", "label": "Afrique du Sud"},
                        {"value": "GS", "label": "Géorgie du Sud et îles Sandwich du Sud"},
                        {"value": "SS", "label": "Soudan du Sud"},
                        {"value": "ES", "label": "Espagne"},
                        {"value": "LK", "label": "Sri Lanka"},
                        {"value": "SD", "label": "Sudan"},
                        {"value": "SR", "label": "Suriname"},
                        {"value": "SJ", "label": "Svalbard et Jan Mayen"},
                        {"value": "SZ", "label": "Swaziland"},
                        {"value": "SE", "label": "Suède"},
                        {"value": "CH", "label": "Suisse"},
                        {"value": "SY", "label": "République arabe syrienne"},
                        {"value": "TW", "label": "Taiwan, Province of China"},
                        {"value": "TJ", "label": "Tadjikistan"},
                        {"value": "TZ", "label": "Tanzanie, République-Unie de"},
                        {"value": "TH", "label": "Thailande"},
                        {"value": "TL", "label": "Timor-Leste"},
                        {"value": "TG", "label": "Togo"},
                        {"value": "TK", "label": "Tokelau"},
                        {"value": "TO", "label": "Tonga"},
                        {"value": "TT", "label": "Trinidad and Tobago"},
                        {"value": "TN", "label": "Tunisie"},
                        {"value": "TR", "label": "Turquie"},
                        {"value": "TM", "label": "Turkménistan"},
                        {"value": "TC", "label": "Iles Turques et Caïques"},
                        {"value": "TV", "label": "Tuvalu"},
                        {"value": "UG", "label": "Uganda"},
                        {"value": "UA", "label": "Ukraine"},
                        {"value": "AE", "label": "Émirats Arabes Unis"},
                        {"value": "GB", "label": "Royaume-Uni"},
                        {"value": "US", "label": "États-Unis"},
                        {"value": "UM", "label": "Îles mineures éloignées des États-Unis"},
                        {"value": "UY", "label": "Uruguay"},
                        {"value": "UZ", "label": "Ouzbékistan"},
                        {"value": "VU", "label": "Vanuatu"},
                        {"value": "VE", "label": "Venezuela, République bolivarienne du"},
                        {"value": "VN", "label": "Vietnam"},
                        {"value": "VG", "label": "Îles Vierges Britanniques"},
                        {"value": "VI", "label": "Îles Vierges des États-Unis"},
                        {"value": "WF", "label": "Wallis et Futuna"},
                        {"value": "EH", "label": "Ouest Sahara"},
                        {"value": "YE", "label": "Yémen"},
                        {"value": "ZM", "label": "Zambie"},
                        {"value": "ZW", "label": "Zimbabwe"}
            ]
        },
		es: {
			accountBank:	"Código postal",
			accountHolder:	"Nombre del titular de la tarjeta",
			accountId:		"Id",
			accountNumber:	"Número de cuenta",
			accountVerification: "Account verification",
			bankName:		"Nombre del banco",
			brand:			"Tipo de tarjeta",
			cancel:			"Atrás",
			cardHolder:		"Nombre del titular de la tarjeta",
			cardNumber:		"Número de la tarjeta",
			country:		"País",
			cvv:			"Código de control",
			expiryDate:		"Expira",
            taxNumber:      "Tax Identification Number",
			submit:			"Pagar",
			nextStep:		"Seguir",
			moreBrands:     "More",
			givenName:      "nombre de pila",
			surname:        "apellido",
			billingAgreement: "Invoice terms and conditions",
			accountBankError:	"Número de cuenta y código bancario no válidos",
			accountHolderError:	"Titular de la cuenta no válido",
			accountNumberError:	"Número de cuenta no válido",
			accountIbanError:   "IBAN inválido",
			cardHolderError:	"Titular de tarjeta no válido",
			surNameError:		"Invalid surname",
			givenNameError:		"Invalid given name",
			cardNumberError:	"Número de tarjeta no válido",
			cvvError:			"Número de control de tarjeta no válido",
			expiryMonthError:	"Expiración no válida",
			expiryYearError:	"Expiración no válida",
            taxNumberError:     "Invalid Tax Identification Number",
			generalTermsAndConditionsError:  "Por favor, acepte el consentimiento para la transmisión de datos",
			emailOrAccountId:	"Dirección de correo electrónico o ID de cuenta",
			secureId:			"Secure Id",
			learnMore:			"Más información",
			mmyy:				"MM / YY",
			ddmmyyyy:			"DD / MM / YYYY",
			mobile:				"Mobile Phone",
			qrcode: 			"QR-Code",
			paymentMode:		"Please select your preferred payment method:",
			customerMobile:				"Número de teléfono móvil (+78000001774)",
			register:		"Regístrate ahora",
			billingCountryError: "País incorrecto",
			billingStateError: "Provincia incorrecta",
			billingCityError: "Ciudad incorrecta",
			billingStreetError: "Calle incorrecta",
			billingStreetError2: "Calle incorrecta",
			billingPostCodeError: "Código postal incorrecto",
            billingAddress: "Dirección de facturación",
			mobilePhoneError: "Phone number is required.",
			noSelectionError: "Select one of the two options.",
			mobileError: "Invalid mobile number",
			mobileContryCodeError: "Invalid country code",
			birthDateError: "Invalid birth date. DD/MM/YYYY expected",
			showOtherPaymentMethods: "Mostrar otros medios de pago",
			cvvHint: "Los 3 dígitos que se encuentran en el reverso de la tarjeta.",
            cvvHintAmex: "Los 4 dígitos que se encuentran en el frontal de la tarjeta.",
            cvvHintMaestro: "Los 3 dígitos que se encuentran en el reverso de la tarjeta, si están disponibles.",
            billingCountryPlaceholder: "Por favor, seleccione",
            billingStatePlaceholder: "Provincia",
            billingCityPlaceholder: "Ciudad",
            billingPostCodePlaceholder: "Código postal",
            billingStreet1Placeholder: "Dirección",
            billingStreet2Placeholder: "Dirección (cont.)",
            billingStreet2PlaceholderMandatory: "Dirección",
            supportMessage:"Payment cannot be completed.<br/>Please contact support with following information:<br/>{{message}}<br/>ndc: {{ndc}}<br/>timestamp: {{timestamp}}",
            nationalIdentifier: "National Identifier",
			nationalIdentifierError: "Invalid National Identifier",
			ikanoOpenInvoiceTermsAndCondition: "Terms and Conditions",
			ikanoOpenInvoiceAccept: "I have read and agree the Terms and Conditions",
			ikanoOpenInvoiceAcceptError: "Please accept the Terms and Conditions",
			insertCode: "Insert code here",
			mandateAuthorization: "By signing this mandate form, I authorize the creditor to send an instruction to my bank to debit my account in accordance with the instruction from the creditor.",
			mandateEntitlement: "As part of my rights, I am entitled to a refund from my bank under the terms and conditions of my agreement with my bank. A refund must be claimed within 8 weeks starting from the date on which my account was debited.",
			mandateConfirmation: "I confirm to be authorized for the aforementioned account to sign a mandate. I agree to the reduced direct debit pre-notification period of 1 calendar day. I certify that the mandate information provided is complete and accurate.",
			mandateConfirmationError: "Please agree to all the terms and conditions before continuing.",
			countryCodes: [
                {"value": "", "label": "Por favor, seleccione"},
                {"value": "AF", "label": "Afganistán"},
                {"value": "AX", "label": "Islas Aland"},
                {"value": "AL", "label": "Albania"},
                {"value": "DZ", "label": "Argelia"},
                {"value": "AS", "label": " Samoa Americana"},
                {"value": "AD", "label": "Andorra"},
                {"value": "AO", "label": "Angola"},
                {"value": "AI", "label": "Anguila"},
                {"value": "AQ", "label": "Antártida"},
                {"value": "AG", "label": "Antigua y Barbuda"},
                {"value": "AR", "label": "Argentina"},
                {"value": "AM", "label": "Armenia"},
                {"value": "AW", "label": "Aruba"},
                {"value": "AU", "label": "Australia"},
                {"value": "AT", "label": "Austria"},
                {"value": "AZ", "label": "Azerbaiyán"},
                {"value": "BS", "label": "Bahamas"},
                {"value": "BH", "label": "Baréin"},
                {"value": "BD", "label": "Bangladesh"},
                {"value": "BB", "label": "Barbados"},
                {"value": "BY", "label": "Bielorrusia"},
                {"value": "BE", "label": "Bélgica"},
                {"value": "BZ", "label": "Belice"},
                {"value": "BJ", "label": "Benin"},
                {"value": "BM", "label": "Bermudas"},
                {"value": "BT", "label": "Bután"},
                {"value": "BO", "label": "Bolivia, Estado Plurinacional de"},
                {"value": "BQ", "label": "Bonaire, Sint Eustatius y Saba"},
                {"value": "BA", "label": "Bosnia y Herzegovina"},
                {"value": "BW", "label": "Botswana"},
                {"value": "BV", "label": "Isla Bouvet"},
                {"value": "BR", "label": "Brasil"},
                {"value": "IO", "label": "Territorio Británico del Océano Índico"},
                {"value": "BN", "label": "Brunei Darussalam"},
                {"value": "BG", "label": "Bulgaria"},
                {"value": "BF", "label": "Burkina Faso"},
                {"value": "BI", "label": "Burundi"},
                {"value": "KH", "label": "Camboya"},
                {"value": "CM", "label": "Camerún"},
                {"value": "CA", "label": "Canadá"},
                {"value": "CV", "label": "Cabo Verde"},
                {"value": "KY", "label": "Islas Caimán"},
                {"value": "CF", "label": "República Centroafricana"},
                {"value": "TD", "label": "Chad"},
                {"value": "CL", "label": "Chile"},
                {"value": "CN", "label": "China"},
                {"value": "CX", "label": "Isla Christmas"},
                {"value": "CC", "label": "Islas Cocos (Keeling)"},
                {"value": "CO", "label": "Colombia"},
                {"value": "KM", "label": "Comoras"},
                {"value": "CG", "label": "Congo"},
                {"value": "CD", "label": "Congo, República Democrática del"},
                {"value": "CK", "label": "Islas Cook"},
                {"value": "CR", "label": "Costa Rica"},
                {"value": "CI", "label": "Costa de Marfil"},
                {"value": "HR", "label": "Croacia"},
                {"value": "CU", "label": "Cuba"},
                {"value": "CW", "label": "Curazao"},
                {"value": "CY", "label": "Chipre"},
                {"value": "CZ", "label": "República Checa"},
                {"value": "DK", "label": "Dinamarca"},
                {"value": "DJ", "label": "Yibuti"},
                {"value": "DM", "label": "Dominica"},
                {"value": "DO", "label": "República Dominicana"},
                {"value": "EC", "label": "Ecuador"},
                {"value": "EG", "label": "Egipto"},
                {"value": "SV", "label": "El Salvador"},
                {"value": "GQ", "label": "Guinea Ecuatorial"},
                {"value": "ER", "label": "Eritrea"},
                {"value": "EE", "label": "Estonia"},
                {"value": "ET", "label": "Etiopía"},
                {"value": "FK", "label": "Islas Malvinas (Falkland Islands)"},
                {"value": "FO", "label": "Islas Feroe"},
                {"value": "FJ", "label": "Fiji"},
                {"value": "FI", "label": "Finlandia"},
                {"value": "FR", "label": "Francia"},
                {"value": "GF", "label": "Guayana Francesa"},
                {"value": "PF", "label": "Polinesia francesa"},
                {"value": "TF", "label": "Territorios Australes Franceses"},
                {"value": "GA", "label": "Gabón"},
                {"value": "GM", "label": "Gambia"},
                {"value": "GE", "label": "Georgia"},
                {"value": "DE", "label": "Alemania"},
                {"value": "GH", "label": "Ghana"},
                {"value": "GI", "label": "Gibraltar"},
                {"value": "GR", "label": "Grecia"},
                {"value": "GL", "label": "Groenlandia"},
                {"value": "GD", "label": "Granada"},
                {"value": "GP", "label": "Guadalupe"},
                {"value": "GU", "label": "Guam"},
                {"value": "GT", "label": "Guatemala"},
                {"value": "GG", "label": "Guernsey"},
                {"value": "GN", "label": "Guinea"},
                {"value": "GW", "label": "Guinea-Bissau"},
                {"value": "GY", "label": "Guyana"},
                {"value": "HT", "label": "Haití"},
                {"value": "HM", "label": "Islas Heard y McDonald"},
                {"value": "VA", "label": "Santa Sede (Estado de la Ciudad del Vaticano)"},
                {"value": "HN", "label": "Honduras"},
                {"value": "HK", "label": "Hong Kong"},
                {"value": "HU", "label": "Hungría"},
                {"value": "IS", "label": "Islandia"},
                {"value": "IN", "label": "India"},
                {"value": "ID", "label": "Indonesia"},
                {"value": "IR", "label": "Irán, República Islámica de"},
                {"value": "IQ", "label": "Iraq"},
                {"value": "IE", "label": "Irlanda"},
                {"value": "IM", "label": "Isla de Man"},
                {"value": "IL", "label": "Israel"},
                {"value": "IT", "label": "Italia"},
                {"value": "JM", "label": "Jamaica"},
                {"value": "JP", "label": "Japón"},
                {"value": "JE", "label": "Jersey"},
                {"value": "JO", "label": "Jordania"},
                {"value": "KZ", "label": "Kazajstán"},
                {"value": "KE", "label": "Kenia"},
                {"value": "KI", "label": "Kiribati"},
                {"value": "KP", "label": "Corea, República Popular Democrática de"},
                {"value": "KR", "label": "Corea, República de"},
                {"value": "KW", "label": "Kuwait"},
                {"value": "KG", "label": "Kirguistán"},
                {"value": "LA", "label": "República Democrática Popular Lao"},
                {"value": "LV", "label": "Letonia"},
                {"value": "LB", "label": "Líbano"},
                {"value": "LS", "label": "Lesotho"},
                {"value": "LR", "label": "Liberia"},
                {"value": "LY", "label": "Libia"},
                {"value": "LI", "label": "Liechtenstein"},
                {"value": "LT", "label": "Lituania"},
                {"value": "LU", "label": "Luxemburgo"},
                {"value": "MO", "label": "Macao"},
                {"value": "MK", "label": "Macedonia, la ex República Yugoslava de"},
                {"value": "MG", "label": "Madagascar"},
                {"value": "MW", "label": "Malawi"},
                {"value": "MY", "label": "Malasia"},
                {"value": "MV", "label": "Maldivas"},
                {"value": "ML", "label": "Mali"},
                {"value": "MT", "label": "Malta"},
                {"value": "MH", "label": "Islas Marshall"},
                {"value": "MQ", "label": "Martinica"},
                {"value": "MR", "label": "Mauritania"},
                {"value": "MU", "label": "Mauricio"},
                {"value": "YT", "label": "Mayotte"},
                {"value": "MX", "label": "México"},
                {"value": "FM", "label": "Micronesia, Estados Federados de"},
                {"value": "MD", "label": "Moldavia, República de"},
                {"value": "MC", "label": "Mónaco"},
                {"value": "MN", "label": "Mongolia"},
                {"value": "ME", "label": "Montenegro"},
                {"value": "MS", "label": "Montserrat"},
                {"value": "MA", "label": "Marruecos"},
                {"value": "MZ", "label": "Mozambique"},
                {"value": "MM", "label": "Myanmar"},
                {"value": "NA", "label": "Namibia"},
                {"value": "NR", "label": "Nauru"},
                {"value": "NP", "label": "Nepal"},
                {"value": "NL", "label": "Países Bajos"},
                {"value": "NC", "label": "Nueva Caledonia"},
                {"value": "NZ", "label": "Nueva Zelanda"},
                {"value": "NI", "label": "Nicaragua"},
                {"value": "NE", "label": "Níger"},
                {"value": "NG", "label": "Nigeria"},
                {"value": "NU", "label": "Niue"},
                {"value": "NF", "label": "Isla Norfolk"},
                {"value": "MP", "label": "Islas Marianas del Norte"},
                {"value": "NO", "label": "Noruega"},
                {"value": "OM", "label": "Omán"},
                {"value": "PK", "label": "Pakistán"},
                {"value": "PW", "label": "Palau"},
                {"value": "PS", "label": "Territorio Palestino, Ocupado"},
                {"value": "PA", "label": "Panamá"},
                {"value": "PG", "label": "Papua Nueva Guinea"},
                {"value": "PY", "label": "Paraguay"},
                {"value": "PE", "label": "Perú"},
                {"value": "PH", "label": "Filipinas"},
                {"value": "PN", "label": "Islas Pitcairn"},
                {"value": "PL", "label": "Polonia"},
                {"value": "PT", "label": "Portugal"},
                {"value": "PR", "label": "Puerto Rico"},
                {"value": "QA", "label": "Qatar"},
                {"value": "RE", "label": "Reunión"},
                {"value": "RO", "label": "Rumania"},
                {"value": "RU", "label": "Federación de Rusia"},
                {"value": "RW", "label": "Ruanda"},
                {"value": "BL", "label": "San Bartolomé"},
                {"value": "SH", "label": "Santa Elena, Ascensión y Tristán da Cunha"},
                {"value": "KN", "label": "San Cristóbal y Nieves"},
                {"value": "LC", "label": "Santa Lucía"},
                {"value": "MF", "label": "San Martín (parte francesa)"},
                {"value": "PM", "label": "San Pedro y Miquelón"},
                {"value": "VC", "label": "San Vicente y las Granadinas"},
                {"value": "WS", "label": "Samoa"},
                {"value": "SM", "label": "San Marino"},
                {"value": "ST", "label": "Santo Tomé y Príncipe"},
                {"value": "SA", "label": "Arabia Saudita"},
                {"value": "SN", "label": "Senegal"},
                {"value": "RS", "label": "Serbia"},
                {"value": "SC", "label": "Seychelles"},
                {"value": "SL", "label": "Sierra Leona"},
                {"value": "SG", "label": "Singapur"},
                {"value": "SX", "label": "San Martín (parte holandesa)"},
                {"value": "SK", "label": "Eslovaquia"},
                {"value": "SI", "label": "Eslovenia"},
                {"value": "SB", "label": "Islas Salomón"},
                {"value": "SO", "label": "Somalia"},
                {"value": "ZA", "label": "Sudáfrica"},
                {"value": "GS", "label": "Islas Georgias del Sur y Sandwich del Sur"},
                {"value": "SS", "label": "Sudán del Sur"},
                {"value": "ES", "label": "España"},
                {"value": "LK", "label": "Sri Lanka"},
                {"value": "SD", "label": "Sudán"},
                {"value": "SR", "label": "Surinam"},
                {"value": "SJ", "label": "Svalbard y Jan Mayen"},
                {"value": "SZ", "label": "Swazilandia"},
                {"value": "SE", "label": "Suecia"},
                {"value": "CH", "label": "Suiza"},
                {"value": "SY", "label": "República Árabe Siria"},
                {"value": "TW", "label": "Taiwán, provincia de China"},
                {"value": "TJ", "label": "Tayikistán"},
                {"value": "TZ", "label": "Tanzania, República Unida de"},
                {"value": "TH", "label": "Tailandia"},
                {"value": "TL", "label": "Timor-Leste"},
                {"value": "TG", "label": "Togo"},
                {"value": "TK", "label": "Tokelau"},
                {"value": "TO", "label": "Tonga"},
                {"value": "TT", "label": "Trinidad y Tobago"},
                {"value": "TN", "label": "Túnez"},
                {"value": "TR", "label": "Turquía"},
                {"value": "TM", "label": "Turkmenistán"},
                {"value": "TC", "label": "Islas Turcas y Caicos"},
                {"value": "TV", "label": "Tuvalu"},
                {"value": "UG", "label": "Uganda"},
                {"value": "UA", "label": "Ucrania"},
                {"value": "AE", "label": "Emiratos Árabes Unidos"},
                {"value": "GB", "label": "Reino Unido"},
                {"value": "US", "label": "Estados Unidos"},
                {"value": "UM", "label": "Islas menores alejadas de los Estados Unidos"},
                {"value": "UY", "label": "Uruguay"},
                {"value": "UZ", "label": "Uzbekistán"},
                {"value": "VU", "label": "Vanuatu"},
                {"value": "VE", "label": "Venezuela, República Bolivariana de"},
                {"value": "VN", "label": "Vietnam"},
                {"value": "VG", "label": "Islas Vírgenes Británicas"},
                {"value": "VI", "label": "Islas Vírgenes, EE. UU."},
                {"value": "WF", "label": "Wallis y Futuna"},
                {"value": "EH", "label": "Sáhara Occidental"},
                {"value": "YE", "label": "Yemen"},
                {"value": "ZM", "label": "Zambia"},
                {"value": "ZW", "label": "Zimbabue"}
            ]
		},
		it: {
			accountBank:	"codice della banca",
			accountHolder:	"Titolare",
			accountId:		"Id",
			accountNumber:	"Numero del conto corrente",
			accountVerification: "Account verification",
			bankName:		"Nome della banca",
			brand:			"Tipo di carta",
			cancel:			"Tornare indietro",
			cardHolder:		"Titolare",
			cardNumber:		"Numero della carta",
			country:		"Paese",
			cvv:			"Codice di Verifica (CVV)",
			expiryDate:		"Scadenza",
            taxNumber:      "Tax Identification Number",
			submit:			"Paga",
			nextStep:			"Continuare",
			moreBrands:     "More",
			givenName:      "nome di battesimo",
			surname:        "cognome",
			billingAgreement: "Invoice terms and conditions",
			accountBankError:	"Code ABI non valido",
			accountHolderError:	"Titolare del conto non valido",
			accountNumberError:	"Numero di conto non valido",
			cardHolderError:	"Titolare della carta non valida",
			surNameError:		"Invalid surname",
			givenNameError:		"Invalid given name",
			cardNumberError:	"Numero di carta non valido",
			cvvError:			"Codice di verifica non valido",
			expiryMonthError:	"Data di scadenza non valida",
			expiryYearError:	"Data di scadenza non valida",
            taxNumberError:     "Invalid Tax Identification Number",
			generalTermsAndConditionsError:  "Si prega di accettare il consenso per la trasmissione dati",
			emailOrAccountId:	"Indirizzo email o ID conto",
			secureId:			"Secure Id",
			learnMore:			"Altre informazioni",
			mmyy:				"MM / YY",
			ddmmyyyy:			"DD / MM / YYYY",
			mobile:				"Mobile Phone",
			qrcode: 			"QR-Code",
			paymentMode:		"Please select your preferred payment method:",
			customerMobile:				"Numero di cellulare (+78000001774)",
			register:		"Register now",
			billingCountryError: "Nazione Errata",
			billingStateError: "Stato errato",
			billingCityError: "Città errata",
			billingStreetError: "Indirizzo errato",
			billingStreetError2: "Indirizzo erratto",
			billingPostCodeError: "CAP non valido",
			mobilePhoneError: "Phone number is required.",
			noSelectionError: "Select one of the two options.",
			mobileError: "Invalid mobile number",
			mobileContryCodeError: "Invalid country code",
			birthDateError: "Invalid birth date. DD/MM/YYYY expected",
			showOtherPaymentMethods: "Mostra altri metodi di pagamento",
            cvvHint: "Le 3 cifre sul retro della carta.",
            cvvHintAmex: "Le 4 cifre sul fronte della carta.",
            cvvHintMaestro: "Le 3 cifre sul retro della carta se specificato.",
            billingAddress: "Indirizzo per la fatturazione",
            billingCountryPlaceholder: "Selezione",
            billingStatePlaceholder: "Stato/Regione",
            billingCityPlaceholder: "Città",
            billingPostCodePlaceholder: "CAP",
            billingStreet1Placeholder: "Inidirizzo 1",
            billingStreet2Placeholder: "Indirizzo 2 (Opzionale)",
            billingStreet2PlaceholderMandatory: "Indirizzo 2",
            supportMessage:"Payment cannot be completed.<br/>Please contact support with following information:<br/>{{message}}<br/>ndc: {{ndc}}<br/>timestamp: {{timestamp}}",
            nationalIdentifier: "National Identifier",
			nationalIdentifierError: "Invalid National Identifier",
			ikanoOpenInvoiceTermsAndCondition: "Terms and Conditions",
			ikanoOpenInvoiceAccept: "I have read and agree the Terms and Conditions",
			ikanoOpenInvoiceAcceptError: "Please accept the Terms and Conditions",
			insertCode: "Insert code here",
			mandateAuthorization: "By signing this mandate form, I authorize the creditor to send an instruction to my bank to debit my account in accordance with the instruction from the creditor.",
			mandateEntitlement: "As part of my rights, I am entitled to a refund from my bank under the terms and conditions of my agreement with my bank. A refund must be claimed within 8 weeks starting from the date on which my account was debited.",
			mandateConfirmation: "I confirm to be authorized for the aforementioned account to sign a mandate. I agree to the reduced direct debit pre-notification period of 1 calendar day. I certify that the mandate information provided is complete and accurate.",
			mandateConfirmationError: "Please agree to all the terms and conditions before continuing."
		},
		nl: {
			accountBank:	"Bankcode",
			accountHolder:	"Eigenaar",
			accountId:		"Id",
			accountNumber:	"Rekeningsnr.",
			accountVerification: "Account verification",
			bankName:		"Naam van de bank",
			brand:			"Kaart-type",
			cancel:			"Terug",
			cardHolder:		"Naam op uw kaart",
			cardNumber:		"Kaartnummer",
			country:		"Land",
			cvv:			"Kaart verificatie code",
			expiryDate:		"Vervalt",
            taxNumber:      "Tax Identification Number",
			submit:			"Bestelling afronden",
			nextStep:		"Doorgaan met",
			moreBrands:     "More",
			givenName:      "gegeven naam",
			surname:        "achternaam",
			billingAgreement: "Factuurvoorwaarden",
			accountBankError:	"Ongeldige bankcode",
			accountHolderError:	"Ongeldig eigenaar",
			accountNumberError:	"Ongeldig accountnummer",
			cardHolderError:	"Ongeldige kaarthouder",
			surNameError:		"Invalid surname",
			givenNameError:		"Invalid given name",
			cardNumberError:	"Ongeldig kaart-nummer",
			cvvError:			"Ongeldig CVC-nummer",
			expiryMonthError:	"Ongeldige geldigheidsduur",
			expiryYearError:	"Ongeldige geldigheidsduur",
            taxNumberError:     "Invalid Tax Identification Number",
			generalTermsAndConditionsError:			"Accepteer aub de gegevensoverdracht",
			emailOrAccountId:	"Email or Account Id",
			secureId:			"Secure Id",
			learnMore:			"Meer informatie",
			mmyy:				"MM / YY",
			ddmmyyyy:			"DD / MM / YYYY",
			mobile:				"Mobile Phone",
			qrcode: 			"QR-Code",
			paymentMode:		"Please select your preferred payment method:",
			customerMobile:				"Mobile phone number (+78000001774)",
			register:		"Registreer nu",
			billingCountryError: "Ongeldig land",
			billingStateError: "Ongeldige staat",
			billingCityError: "Ongeldige stad",
			billingStreetError: "Ongeldige straat",
			billingStreetError2: "Ongeldige straat",
			billingPostCodeError: "Ongeldige postcode",
			mobilePhoneError: "Phone number is required.",
			noSelectionError: "Select one of the two options.",
			mobileError: "Ongeldig mobiel nummer",
			mobileContryCodeError: "Ongeldige landcode",
			birthDateError: "Invalid birth date. DD/MM/YYYY expected",
			showOtherPaymentMethods: "Toon andere betaalmethoden",
			cvvHint: "De 3 cijfers op de achterzijde van uw kaart.",
            cvvHintAmex: "De 4 cijfers op de voorzijde van uw kaart.",
            cvvHintMaestro: "De 3 cijfers op de achterzijde van uw kaart, indien gespecificeerd.",
			billingAddress: "Rekeningsadres",
			billingCountryPlaceholder: "Gelieve te selecteren",
			billingStatePlaceholder: "Staat/Provincie",
			billingCityPlaceholder: "Stad",
			billingPostCodePlaceholder: "Postcode",
			billingStreet1Placeholder: "Straat lijn 1",
			billingStreet2Placeholder: "Straat lijn 2 (optioneel)",
			billingStreet2PlaceholderMandatory: "Straat lijn 2",
            supportMessage:"Payment cannot be completed.<br/>Please contact support with following information:<br/>{{message}}<br/>ndc: {{ndc}}<br/>timestamp: {{timestamp}}",
            nationalIdentifier: "National Identifier",
			nationalIdentifierError: "Invalid National Identifier",
			ikanoOpenInvoiceTermsAndCondition: "Terms and Conditions",
			ikanoOpenInvoiceAccept: "I have read and agree the Terms and Conditions",
			ikanoOpenInvoiceAcceptError: "Please accept the Terms and Conditions",
			insertCode: "Insert code here",
			mandateAuthorization: "By signing this mandate form, I authorize the creditor to send an instruction to my bank to debit my account in accordance with the instruction from the creditor.",
			mandateEntitlement: "As part of my rights, I am entitled to a refund from my bank under the terms and conditions of my agreement with my bank. A refund must be claimed within 8 weeks starting from the date on which my account was debited.",
			mandateConfirmation: "I confirm to be authorized for the aforementioned account to sign a mandate. I agree to the reduced direct debit pre-notification period of 1 calendar day. I certify that the mandate information provided is complete and accurate.",
			mandateConfirmationError: "Please agree to all the terms and conditions before continuing."
		},
		da: {
			accountBank:	"Bankkode",
			accountHolder:	"Kontoindehaver",
			accountId:		"Id",
			accountNumber:	"Kontonummer",
			accountVerification: "Account verification",
			bankName:		"Navn bank",
			brand:			"Kortmærke",
			cancel:			"Tilbage",
			cardHolder:		"Navn på kortindehaver",
			cardNumber:		"Kortnummer",
			country:		"Land",
			cvv:			"Kontrolnummer",
			expiryDate:		"Udløber",
            taxNumber:      "Tax Identification Number",
			submit:			"Betal nu",
			nextStep:		"Continue",
			moreBrands:     "More",
			givenName:      "givet navn",
			surname:        "efternavn",
			billingAgreement: "Vilkår for faktura",
			accountBankError:	"Ugyldigt kontonummer eller bankkode",
			accountHolderError:	"Ugyldig kontoindehaver",
			accountNumberError:	"Ugyldigt kontonummer",
			cardHolderError:	"Ugyldig kortholderen",
			surNameError:		"Invalid surname",
			givenNameError:		"Invalid given name",
			cardNumberError:	"Ugyldigt kortnummer",
			cvvError:			"Ugyldig CVC",
			expiryMonthError:	"Ugyldig udløbsdato",
			expiryYearError:	"Ugyldig udløbsdato",
            taxNumberError:     "Invalid Tax Identification Number",
			generalTermsAndConditionsError:  "Bedes acceptere samtykke til datatransmission",
			emailOrAccountId:	"E-mail-adresse eller konto-id",
			secureId:			"Secure Id",
			learnMore:			"Learn more",
			mmyy:				"MM / YY",
			ddmmyyyy:			"DD / MM / YYYY",
			mobile:				"Mobile Phone",
			qrcode: 			"QR-Code",
			paymentMode:		"Please select your preferred payment method:",
			customerMobile:				"Mobile phone number (+78000001774)",
			register:		"Register now",
			billingCountryError: "Invalid country",
			billingStateError: "Invalid state",
			billingCityError: "Invalid city",
			billingStreetError: "Invalid street",
			billingStreetError2: "Invalid street",
			billingPostCodeError: "Invalid postcode",
			mobilePhoneError: "Phone number is required.",
			noSelectionError: "Select one of the two options.",
			mobileError: "Invalid mobile number",
			mobileContryCodeError: "Invalid country code",
			birthDateError: "Invalid birth date. DD/MM/YYYY expected",
			showOtherPaymentMethods: "Show other payment methods",
			cvvHint: "De 3 cifre på bagsiden af dit kort.",
            cvvHintAmex: "De 4 cifre på forsiden af dit kort.",
            cvvHintMaestro: "De 3 cifre på bagsiden af dit kort, hvis angivet.",
            billingAddress: "Faktureringsadresse",
            billingCountryPlaceholder: "Vælg venligst",
            billingStatePlaceholder: "Region",
            billingCityPlaceholder: "By",
            billingPostCodePlaceholder: "Postnummer",
            billingStreet1Placeholder: "Adresse Linje 1",
            billingStreet2Placeholder: "Adresse Linje 2 (Ikke obligatorisk)",
            billingStreet2PlaceholderMandatory: "Adresse Linje 2",
            supportMessage:"Payment cannot be completed.<br/>Please contact support with following information:<br/>{{message}}<br/>ndc: {{ndc}}<br/>timestamp: {{timestamp}}",
            nationalIdentifier: "National Identifier",
			nationalIdentifierError: "Invalid National Identifier",
			ikanoOpenInvoiceTermsAndCondition: "Terms and Conditions",
			ikanoOpenInvoiceAccept: "I have read and agree the Terms and Conditions",
			ikanoOpenInvoiceAcceptError: "Please accept the Terms and Conditions",
			insertCode: "Insert code here",
			mandateAuthorization: "By signing this mandate form, I authorize the creditor to send an instruction to my bank to debit my account in accordance with the instruction from the creditor.",
			mandateEntitlement: "As part of my rights, I am entitled to a refund from my bank under the terms and conditions of my agreement with my bank. A refund must be claimed within 8 weeks starting from the date on which my account was debited.",
			mandateConfirmation: "I confirm to be authorized for the aforementioned account to sign a mandate. I agree to the reduced direct debit pre-notification period of 1 calendar day. I certify that the mandate information provided is complete and accurate.",
			mandateConfirmationError: "Please agree to all the terms and conditions before continuing."
		},
		fi: {
			accountBank:	"Pankin tunnus",
			accountHolder:	"Tilinhaltija",
			accountId:		"Id",
			accountNumber:	"Tilinumero",
			accountVerification: "Account verification",
			bankName:		"Pankki",
			brand:			"Kortin tyyppi",
			cancel:			"Peruuta",
			cardHolder:		"Tilinhaltija",
			cardNumber:		"Kortin numero",
			country:		"Maa",
			cvv:			"Tarkistusnumero",
			expiryDate:		"Erääntymispäivä",
            taxNumber:      "Tax Identification Number",
			submit:			"Maksa nyt",
			nextStep:		"Continue",
			moreBrands:     "More",
			givenName:      "etunimi",
			surname:        "sukunimi",
			billingAgreement: "Laskuehdot",
			accountBankError:	"Väärä tilinumero tai pankin tunnus",
			accountHolderError:	"Virheellinen tilin haltijan",
			accountNumberError:	"Virheellinen tilinumero",
			cardHolderError:	"Virheellinen kortin haltija",
			surNameError:		"Invalid surname",
			givenNameError:		"Invalid given name",
			cardNumberError:	"Tarkista kortin numero",
			cvvError:			"Tarkista CVV numero",
			expiryMonthError:	"Tarkista voimassaoloaika",
			expiryYearError:	"Tarkista voimassaoloaika",
            taxNumberError:     "Invalid Tax Identification Number",
			generalTermsAndConditionsError:  "Ottakaa vastaan suostumuksen tiedonsiirtoon",
			emailOrAccountId:	"Email or Account Id",
			secureId:			"Secure Id",
			learnMore:			"Learn more",
			mmyy:				"MM / YY",
			ddmmyyyy:			"DD / MM / YYYY",
			mobile:				"Mobile Phone",
			qrcode: 			"QR-Code",
			paymentMode:		"Please select your preferred payment method:",
			customerMobile:				"matkapuhelinnumero (+78000001774)",
			register:		"Register now",
			billingCountryError: "Virheellinen maa",
			billingStateError: "Virheellinen tila",
			billingCityError: "Virheellinen kaupunki",
			billingStreetError: "Virheellinen katu",
			billingStreetError2: "Virheellinen katu",
			billingPostCodeError: "Virheellinen postinumero",
			mobilePhoneError: "Phone number is required.",
			noSelectionError: "Select one of the two options.",
			mobileError: "Invalid mobile number",
			mobileContryCodeError: "Invalid country code",
			birthDateError: "Invalid birth date. DD/MM/YYYY expected",
            showOtherPaymentMethods: "Näytä muut maksutavat",
            cvvHint: "Kolme numeroa kortin taustapuolella.",
            cvvHintAmex: "Neljä numeroa kortin etupuolella.",
            cvvHintMaestro: "Kolme numeroa kortin taustapuolella, jos sellaiset on merkitty.",
            billingAddress: "Laskutusosoite",
            billingCountryPlaceholder: "Valitse",
            billingStatePlaceholder: "osavaltio / provinssi",
            billingCityPlaceholder: "Kaupunki",
            billingPostCodePlaceholder: "Postinumero",
            billingStreet1Placeholder: "Katuosoite 1",
            billingStreet2Placeholder: "Katuosoite 2 (valinnainen)",
            billingStreet2PlaceholderMandatory: "Katuosoite 2",
            supportMessage:"Payment cannot be completed.<br/>Please contact support with following information:<br/>{{message}}<br/>ndc: {{ndc}}<br/>timestamp: {{timestamp}}",
            nationalIdentifier: "Henkilöturvatunnus",
			nationalIdentifierError: "Henkilötunnus on virheellinen. Tarkista tunnus ja yritä uudestaan.",
			ikanoOpenInvoiceTermsAndCondition: "IKEA-laskun ehdot",
			ikanoOpenInvoiceAccept: "Olen lukenut ja hyväksyn IKEA-laskun sopimusehdot",
			ikanoOpenInvoiceAcceptError: "Please accept the Terms and Conditions",
			insertCode: "Insert code here",
			mandateAuthorization: "By signing this mandate form, I authorize the creditor to send an instruction to my bank to debit my account in accordance with the instruction from the creditor.",
			mandateEntitlement: "As part of my rights, I am entitled to a refund from my bank under the terms and conditions of my agreement with my bank. A refund must be claimed within 8 weeks starting from the date on which my account was debited.",
			mandateConfirmation: "I confirm to be authorized for the aforementioned account to sign a mandate. I agree to the reduced direct debit pre-notification period of 1 calendar day. I certify that the mandate information provided is complete and accurate.",
			mandateConfirmationError: "Please agree to all the terms and conditions before continuing."
		},
		sv: {
			accountBank:	"Bankkod",
			accountHolder:	"Kontoinnehavare",
			accountId:		"Id",
			accountNumber:	"Kontonummer",
			accountVerification: "Account verification",
			bankName:		"Bankens namn",
			brand:			"Korttyp",
			cancel:			"Bakåt",
			cardHolder:		"Kortinnehavare",
			cardNumber:		"Kortnummer",
			country:		"Land",
			cvv:			"CVV/CVC-kod",
			expiryDate:		"Giltigt till",
            taxNumber:      "Tax Identification Number",
			submit:			"Betala nu",
			nextStep:		"Continue",
			moreBrands:     "More",
			givenName:      "förnamn",
			surname:        "efternamn",
			billingAgreement: "Villkor för faktura",
			accountBankError:	"Ogiltigt kontonummer eller bankkod",
			accountHolderError:	"Ogiltigt kontoinnehavaren",
			accountNumberError:	"Ogiltigt kontonummer",
			cardHolderError:	"Ogiltigt namn",
			surNameError:		"Invalid surname",
			givenNameError:		"Invalid given name",
			cardNumberError:	"Ogiltigt nummer",
			cvvError:			"Ogiltig kod",
			expiryMonthError:	"Felaktigt datum",
			expiryYearError:	"Felaktigt datum",
            taxNumberError:     "Invalid Tax Identification Number",
			generalTermsAndConditionsError:  "Vänligen acceptera samtycke för dataöverföring",
			emailOrAccountId:	"E-postadress eller konto-ID",
			secureId:			"Secure Id",
			learnMore:			"Ta reda på mer",
			mmyy:				"MM / YY",
			ddmmyyyy:			"DD / MM / YYYY",
			mobile:				"Mobile Phone",
			qrcode: 			"QR-Code",
			paymentMode:		"Please select your preferred payment method:",
			customerMobile:				"mobiltelefonnumret (+78000001774)",
			register:		"Register now",
			billingCountryError: "Ogiltigt land",
			billingStateError: "Ogiltigt tillstånd",
			billingCityError: "Ogiltig stad",
			billingStreetError: "Ogiltig gata",
			billingStreetError2: "Ogiltig gata",
			billingPostCodeError: "Ogiltigt postnummer",
			mobilePhoneError: "Phone number is required.",
			noSelectionError: "Select one of the two options.",
			mobileError: "Invalid mobile number",
			mobileContryCodeError: "Invalid country code",
			birthDateError: "Invalid birth date. DD/MM/YYYY expected",
			showOtherPaymentMethods: "Använd ett annat kort",
			cvvHint: "De 3 siffrorna på baksidan av ditt kort",
			cvvHintAmex: "De 4 siffrorna på framsidan av ditt kort",
			cvvHintMaestro: "De 3 siffrorna på baksidan av ditt kort om de är angivna",
            billingAddress: "Faktureringsadress",
            billingCountryPlaceholder: "Välj",
            billingStatePlaceholder: "Stat / provins",
            billingCityPlaceholder: "Stad",
            billingPostCodePlaceholder: "Postnummer",
            billingStreet1Placeholder: "Gatuadressrad 1",
            billingStreet2Placeholder: "Gatuadressrad 2 (valfritt)",
            billingStreet2PlaceholderMandatory: "Gatuadressrad 2",
            supportMessage:"Payment cannot be completed.<br/>Please contact support with following information:<br/>{{message}}<br/>ndc: {{ndc}}<br/>timestamp: {{timestamp}}",
            nationalIdentifier: "Personnummer",
			nationalIdentifierError: "Invalid National Identifier",
			ikanoOpenInvoiceTermsAndCondition: "IKANO Faktura köp- och leveransvillkor",
			ikanoOpenInvoiceAccept: "Jag har tagit del av allmänna köp- och leveransvillkor",
			ikanoOpenInvoiceAcceptError: "Please accept the Terms and Conditions",
			insertCode: "Insert code here",
			mandateAuthorization: "By signing this mandate form, I authorize the creditor to send an instruction to my bank to debit my account in accordance with the instruction from the creditor.",
			mandateEntitlement: "As part of my rights, I am entitled to a refund from my bank under the terms and conditions of my agreement with my bank. A refund must be claimed within 8 weeks starting from the date on which my account was debited.",
			mandateConfirmation: "I confirm to be authorized for the aforementioned account to sign a mandate. I agree to the reduced direct debit pre-notification period of 1 calendar day. I certify that the mandate information provided is complete and accurate.",
			mandateConfirmationError: "Please agree to all the terms and conditions before continuing."
		},
		tr: {
			accountBank:	"Banka Kodu",
			accountHolder:	"Hesap Sahibi",
			accountId:		"Bank ID",
			accountNumber:	"Hesap Numarası",
			accountVerification: "Account verification",
			bankName:		"Bankanın İsmi",
			brand:			"Marka",
			cancel:			"Geri",
			cardHolder:		"Kart Sahibinin Adı ve Soyadı",
			cardNumber:		"Kart Numarası",
			cvv:			"CVV",
			country:		"Ülke",
			expiryDate:		"Son Kullanma Tarihi",
            taxNumber:      "Tax Identification Number",
			submit:			"Öde",
			nextStep:		"Continue",
			moreBrands:     "More",
			givenName:      "isim",
			surname:        "soyadı",
			billingAgreement: "Invoice terms and conditions",
			accountBankError:	"Geçersiz Banka Kodu",
			accountHolderError:	"Geçersiz Hesap Sahibi"	,
			accountNumberError:	"Geçersiz Hesap Numarası",
			cardHolderError:	"Geçersiz Kart Sahibi",
			surNameError:		"Invalid surname",
			givenNameError:		"Invalid given name",
			cardNumberError:	"Geçersiz Kart Numarası",
			cvvError:			"Geçersiz CVV",
			expiryMonthError:	"Geçersiz Son Kullanma Tarihi",
			expiryYearError:	"Geçersiz Son Kullanma Tarihi",
            taxNumberError:     "Invalid Tax Identification Number",
			generalTermsAndConditionsError:  "Veri iletimi için izin kabul edin",
			emailOrAccountId:	"E-posta adresi veya Hesap Kimliği",
			secureId:			"Secure Id",
			learnMore:			"Learn more",
			mmyy:				"MM / YY",
			ddmmyyyy:			"DD / MM / YYYY",
			mobile:				"Mobile Phone",
			qrcode: 			"QR-Code",
			paymentMode:		"Please select your preferred payment method:",
			customerMobile:				"Mobile phone number (+78000001774)",
			register:		"Register now",
			billingCountryError: "Invalid country",
			billingStateError: "Invalid state",
			billingCityError: "Invalid city",
			billingStreetError: "Invalid street",
			billingStreetError2: "Invalid street",
			billingPostCodeError: "Invalid postcode",
			mobilePhoneError: "Phone number is required.",
			noSelectionError: "Select one of the two options.",
			mobileError: "Invalid mobile number",
			mobileContryCodeError: "Invalid country code",
			birthDateError: "Invalid birth date. DD/MM/YYYY expected",
			showOtherPaymentMethods: "Show other payment methods",
			cvvHint: "Kartınızın arkasındaki 3 rakam.",
            cvvHintAmex: "Kartınızın önündeki 4 rakam.",
            cvvHintMaestro: "Belirtildiyse kartınızın arkasındaki 3 rakam.",
            billingAddress: "Billing address",
            billingCountryPlaceholder: "Please select",
            billingStatePlaceholder: "State/Province",
            billingCityPlaceholder: "City",
            billingPostCodePlaceholder: "ZIP/Postal Code",
            billingStreet1Placeholder: "Street Address Line 1",
            billingStreet2Placeholder: "Street Address Line 2 (Optional)",
            billingStreet2PlaceholderMandatory: "Street Address Line 2",
            supportMessage:"Payment cannot be completed.<br/>Please contact support with following information:<br/>{{message}}<br/>ndc: {{ndc}}<br/>timestamp: {{timestamp}}",
            nationalIdentifier: "National Identifier",
			nationalIdentifierError: "Invalid National Identifier",
			ikanoOpenInvoiceTermsAndCondition: "Terms and Conditions",
			ikanoOpenInvoiceAccept: "I have read and agree the Terms and Conditions",
			ikanoOpenInvoiceAcceptError: "Please accept the Terms and Conditions",
			insertCode: "Insert code here",
			mandateAuthorization: "By signing this mandate form, I authorize the creditor to send an instruction to my bank to debit my account in accordance with the instruction from the creditor.",
			mandateEntitlement: "As part of my rights, I am entitled to a refund from my bank under the terms and conditions of my agreement with my bank. A refund must be claimed within 8 weeks starting from the date on which my account was debited.",
			mandateConfirmation: "I confirm to be authorized for the aforementioned account to sign a mandate. I agree to the reduced direct debit pre-notification period of 1 calendar day. I certify that the mandate information provided is complete and accurate.",
			mandateConfirmationError: "Please agree to all the terms and conditions before continuing."
		},
		ja: {
			accountBank:	"銀行コード",
			accountHolder:  "口座名義人",
			accountId:"ID",
			accountNumber:  "口座番号",
			accountVerification: "Account verification",
			bankName: "銀行の名前",
			brand:	"カード会社",
			cancel:		"戻る",
			cardHolder:	"カード所有者の名前",
			cardNumber:	"カード番号",
			cvv:			"セキュリティコード",
			country:		"国",
			expiryDate:	"有効期限",
            taxNumber:      "Tax Identification Number",
			submit:		"送信する",
			nextStep:		"Continue",
			moreBrands:     "More",
			givenName:      "名",
			surname:        "姓",
			billingAgreement: "Invoice terms and conditions",
			accountBankError:   "銀行コードが無効です",
			accountHolderError: "口座名義人が無効です" ,
			accountNumberError: "口座番号が無効です",
			cardHolderError:	"カード所有者名が無効です",
			surNameError:		"Invalid surname",
			givenNameError:		"Invalid given name",
			cardNumberError:	"カード番号かカード会社が無効です",
			cvvError:"セキュリティコードが無効です",
			expiryMonthError:   "有効期限が正しくありません",
			expiryYearError:	"有効期限が正しくありません",
            taxNumberError:     "Invalid Tax Identification Number",
			generalTermsAndConditionsError:  "Please accept the consent for data transmission",
			emailOrAccountId:	"E メール アドレスまたは口座 ID",
			secureId:			"Secure Id",
			learnMore:			"Learn more",
			mmyy:				"MM / YY",
			ddmmyyyy:			"DD / MM / YYYY",
			mobile:				"Mobile Phone",
			qrcode: 			"QR-Code",
			paymentMode:		"Please select your preferred payment method:",
			customerMobile:				"Mobile phone number (+78000001774)",
			register:		"Register now",
			billingCountryError: "Invalid country",
			billingStateError: "Invalid state",
			billingCityError: "Invalid city",
			billingStreetError: "Invalid street",
			billingStreetError2: "Invalid street",
			billingPostCodeError: "Invalid postcode",
			mobilePhoneError: "Phone number is required.",
			noSelectionError: "Select one of the two options.",
			mobileError: "Invalid mobile number",
			mobileContryCodeError: "Invalid country code",
			birthDateError: "Invalid birth date. DD/MM/YYYY expected",
			showOtherPaymentMethods: "他の支払い方法を表示する",
			cvvHint: "カード裏面の 3 桁。",
            cvvHintAmex: "カード表面の 4 桁。",
            cvvHintMaestro: "カード裏面の 3 桁（ある場合）。",
            billingAddress: "Billing address",
            billingCountryPlaceholder: "Please select",
            billingStatePlaceholder: "State/Province",
            billingCityPlaceholder: "City",
            billingPostCodePlaceholder: "ZIP/Postal Code",
            billingStreet1Placeholder: "Street Address Line 1",
            billingStreet2Placeholder: "Street Address Line 2 (Optional)",
            billingStreet2PlaceholderMandatory: "Street Address Line 2",
            supportMessage:"Payment cannot be completed.<br/>Please contact support with following information:<br/>{{message}}<br/>ndc: {{ndc}}<br/>timestamp: {{timestamp}}",
            nationalIdentifier: "National Identifier",
			nationalIdentifierError: "Invalid National Identifier",
			ikanoOpenInvoiceTermsAndCondition: "Terms and Conditions",
			ikanoOpenInvoiceAccept: "I have read and agree the Terms and Conditions",
			ikanoOpenInvoiceAcceptError: "Please accept the Terms and Conditions",
			insertCode: "Insert code here",
			mandateAuthorization: "By signing this mandate form, I authorize the creditor to send an instruction to my bank to debit my account in accordance with the instruction from the creditor.",
			mandateEntitlement: "As part of my rights, I am entitled to a refund from my bank under the terms and conditions of my agreement with my bank. A refund must be claimed within 8 weeks starting from the date on which my account was debited.",
			mandateConfirmation: "I confirm to be authorized for the aforementioned account to sign a mandate. I agree to the reduced direct debit pre-notification period of 1 calendar day. I certify that the mandate information provided is complete and accurate.",
			mandateConfirmationError: "Please agree to all the terms and conditions before continuing."
		},
		sl: {
			accountBank:	"Koda banke",
			accountHolder:  "Ime lastnika",
			accountId:"Identifikacija",
			accountNumber:  "številka racuna",
			accountVerification: "Account verification",
			bankName: "Banka",
			brand:	"Znamka kartice",
			cancel:		"Nazaj",
			cardHolder:	"Ime lastnika",
			cardNumber:	"Številka kartice",
			cvv:			"CVV številka",
			country:		"Drzava",
			expiryDate:	"Datum veljavnosti",
            taxNumber:      "Tax Identification Number",
			submit:		"Placaj",
			nextStep:		"Continue",
			moreBrands:     "More",
			givenName:      "imeName",
			surname:        "priimek",
			billingAgreement:"Invoice terms and conditions",
			accountBankError:"Napacna koda banke",
			accountHolderError:"Vnesite vrednosti za Ime lastnika",
			accountNumberError:"Napacna številka racuna ali kode banke",
			cardHolderError:"Vnesite vrednosti za Ime lastnika",
			surNameError:		"Invalid surname",
			givenNameError:		"Invalid given name",
			cardNumberError:"Številka kartice neveljavna",
			cvvError:"Napačen CVV",
			expiryMonthError:"Napačen datum veljavnosti",
			expiryYearError:"Napačen datum veljavnosti",
            taxNumberError:     "Invalid Tax Identification Number",
			generalTermsAndConditionsError:"Please accept the consent for data transmission",
			emailOrAccountId:	"Email or Account Id",
			secureId:			"Secure Id",
			learnMore:			"Learn more",
			mmyy:				"MM / YY",
			ddmmyyyy:			"DD / MM / YYYY",
			mobile:				"Mobile Phone",
			qrcode: 			"QR-Code",
			paymentMode:		"Please select your preferred payment method:",
			customerMobile:				"Mobile phone number (+78000001774)",
			register:		"Register now",
			billingCountryError: "Invalid country",
			billingStateError: "Invalid state",
			billingCityError: "Invalid city",
			billingStreetError: "Invalid street",
			billingStreetError2: "Invalid street",
			billingPostCodeError: "Invalid postcode",
			mobilePhoneError: "Phone number is required.",
			noSelectionError: "Select one of the two options.",
			mobileError: "Invalid mobile number",
			mobileContryCodeError: "Invalid country code",
			birthDateError: "Invalid birth date. DD/MM/YYYY expected",
			showOtherPaymentMethods: "Show other payment methods",
			cvvHint: "Tri števke na hrbtni strani kartice.",
            cvvHintAmex: "Štiri števke na sprednji strani kartice.",
            cvvHintMaestro: "Tri števke na hrbtni strani kartice, če so navedene.",
            billingAddress: "Billing address",
            billingCountryPlaceholder: "Please select",
            billingStatePlaceholder: "State/Province",
            billingCityPlaceholder: "City",
            billingPostCodePlaceholder: "ZIP/Postal Code",
            billingStreet1Placeholder: "Street Address Line 1",
            billingStreet2Placeholder: "Street Address Line 2 (Optional)",
            billingStreet2PlaceholderMandatory: "Street Address Line 2",
            supportMessage:"Payment cannot be completed.<br/>Please contact support with following information:<br/>{{message}}<br/>ndc: {{ndc}}<br/>timestamp: {{timestamp}}",
            nationalIdentifier: "National Identifier",
			nationalIdentifierError: "Invalid National Identifier",
			ikanoOpenInvoiceTermsAndCondition: "Terms and Conditions",
			ikanoOpenInvoiceAccept: "I have read and agree the Terms and Conditions",
			ikanoOpenInvoiceAcceptError: "Please accept the Terms and Conditions",
			insertCode: "Insert code here",
			mandateAuthorization: "By signing this mandate form, I authorize the creditor to send an instruction to my bank to debit my account in accordance with the instruction from the creditor.",
			mandateEntitlement: "As part of my rights, I am entitled to a refund from my bank under the terms and conditions of my agreement with my bank. A refund must be claimed within 8 weeks starting from the date on which my account was debited.",
			mandateConfirmation: "I confirm to be authorized for the aforementioned account to sign a mandate. I agree to the reduced direct debit pre-notification period of 1 calendar day. I certify that the mandate information provided is complete and accurate.",
			mandateConfirmationError: "Please agree to all the terms and conditions before continuing."
		},
		pt: {
			 accountBank: "Código do banco",
             accountHolder:"Titular da conta",
             accountId:"Nome do usuário / Id",
             accountNumber:"Número da conta",
             accountVerification: "Account verification",
             bankName:"Banco",
             brand:"Cartão",
             cancel:"Voltar",
             cardHolder:"Titular do cartão",
             cardNumber:"Número do cartão",
             cvv:"Cód. de segurança",
             country:"País",
             expiryDate:"Data de validade",
             taxNumber:"CPF",
             submit:"Pague agora",
             nextStep: "Continuar",
             moreBrands: "Mais",
             givenName: "nome",
             surname: "sobrenome",
             billingAgreement:"Termos e condições da cobrança",
             accountBankError:"Código do banco inválido",
             accountHolderError:"Por favor insira um valor para o Titular da conta",
             accountNumberError:"Número da conta ou código do banco inválidos",
             cardHolderError:"Por favor insira um valor para o Titular do cartão",
             surNameError: "Sobrenome Inválido",
             givenNameError: "Nome Inválido",
             cardNumberError:"O Número do cartão é inválido",
             cvvError:"CVV inválido",
             expiryMonthError:"Data de validade incorreta",
             expiryYearError:"Data de validade incorreta",
             taxNumberError: "CPF inválido",
             generalTermsAndConditionsError:"Por favor, dê o consentimento para transmissão de dados",
             emailOrAccountId: "Endereço de e-mail ou número da conta",
             secureId: "Id Seguro",
             learnMore: "Saiba mais",
             mmyy: "MM / AA",
             ddmmyyyy: "DD / MM / AAAA",
             mobile: "Celular",
             qrcode: "QR-Code",
             paymentMode: "Por favor, escolha o método de pagamento:",
             customerMobile: "Número de celular (+78000001774)",
             register: "Registre agora",
             billingCountryError: "País inválido",
             billingStateError: "Estado inválido",
             billingCityError: "Cidade inválida",
             billingStreetError: "Endereço inválido",
             billingStreetError2: "Complemento inválido",
             billingPostCodeError: "Código Postal/CEP inválido",
             or: "ou",
             pushNotification: "Será enviada uma notificação para o seu telemóvel",
             pleaseAccept: "Aceite a transação com o seu PIN MB WAY",
             countryCodePhone: "Indicativo de país",
             mobilePhone: "Número de telemóvel",
             mobilePhoneError: "Telefone é obrigatório.",
             noSelectionError: "Escolha uma opção.",
             mobileError: "Número de telefone inválido",
             mobileContryCodeError: "Código de país inválido",
             birthDateError: "Nascimento inválido. Use o formato DD/MM/AAAA",
             showOtherPaymentMethods: "Mostrar outras formas de pagamento",
             cvvHint: "Os três números na parte de trás do seu cartão.",
             cvvHintAmex: "Os quatro números na parte da frente do seu cartão.",
             cvvHintMaestro: "Os três números na parte de trás do seu cartão, se estiverem indicados.",
             mbwayEmailOrPhoneMandatory: "Por favor preencha o campo de email ou nº de telemóvel",
             billingAddress: "Endereço de Cobrança",
             billingCountryPlaceholder: "Escolha por favor",
             billingStatePlaceholder: "Estado/Distrito",
             billingCityPlaceholder: "Cidade",
             billingPostCodePlaceholder: "Código Postal/CEP",
             billingStreet1Placeholder: "Endereço",
             billingStreet2Placeholder: "Complemento (Opcional)",
             billingStreet2PlaceholderMandatory: "Complemento",
             supportMessage:"O pagamento não pode ser concluído.<br/>Por favor use a seguinte informação quando entrar em contato com o suporte:<br/>message<br/>ndc: ndc<br/>timestamp: timestamp",
             nationalIdentifier: "Número de Identidade",
             nationalIdentifierError: "Número de Identidade inválido",
             ikanoOpenInvoiceTermsAndCondition: "Termos e Condições",
             ikanoOpenInvoiceAccept: "Li e aceito os Termos e Condições",
             ikanoOpenInvoiceAcceptError: "Por favor aceite os Termos e Condições",
             insertCode: "Insira o código aqui",
             mandateAuthorization: "Ao assinar este formulário de mandato, eu autorizo o credor a enviar uma instrução ao meu banco para debitar da minha conta de acordo com a instrução do credor.",
             mandateEntitlement: "Como parte dos meus direitos, tenho direito a um reembolso do meu banco de acordo com os termos e condições do meu contrato com o meu banco. O reembolso deve ser solicitado dentro de 8 semanas a partir da data na qual minha conta foi debitada.",
             mandateConfirmation: "Confirmo que estou autorizado a assinar um mandato para a referida conta. Eu concordo com o período reduzido de pré-notificação de débito direto de 1 dia de calendário. Certifico que as informações fornecidas no mandato são completas e precisas.",
             mandateConfirmationError: "Por favor, concorde com todos os termos e condições antes de continuar."
		},
		pl: {
			accountBank:	"Kod banku",
			accountHolder:"Imię i nazwisko",
			accountId:"Nazwa użytkownika / identyfikator",
			accountNumber:"Nr konta",
			accountVerification: "Account verification",
			bankName:"Bank",
			brand:"Rodzaj karty",
			cancel:"Wstecz",
			cardHolder:"Imię i nazwisko",
			cardNumber:"Numer karty",
			cvv:"CVV",
			country:"Kraj",
			expiryDate:"Data ważności",
            taxNumber:"Tax Identification Number",
			submit:"Zapłać teraz",
			nextStep:"Kontynuować coś",
			moreBrands:     "More",
			givenName:      "nadane imię",
			surname:        "nazwisko",
			billingAgreement:"Invoice terms and conditions",
			accountBankError:"Nieprawidłowy kod banku",
			accountHolderError:"Nazwisko właściciela nie może być puste",
			accountNumberError:"Nieprawidłowy nr konta lub kod banku",
			cardHolderError:"Nazwisko właściciela nie może być puste",
			surNameError:		"Invalid surname",
			givenNameError:		"Invalid given name",
			cardNumberError:"Nieprawidłowy numer karty",
			cvvError:"Nieprawidłowy CVD",
			expiryMonthError:"Nieprawidłowa data ważności",
			expiryYearError:"Nieprawidłowa data ważności",
            taxNumberError:     "Invalid Tax Identification Number",
			generalTermsAndConditionsError:"Please accept the consent for data transmission",
			emailOrAccountId:	"Adres e-mail lub identyfikator rachunku",
			secureId:			"Secure Id",
			learnMore:			"Learn more",
			mmyy:				"MM / RR",
			ddmmyyyy:			"DD / MM / YYYY",
			mobile:				"Mobile Phone",
			qrcode: 			"QR-Code",
			paymentMode:		"Please select your preferred payment method:",
			customerMobile:				"numer telefonu (+78000001774)",
			register:		"Register now",
			billingCountryError: "Nieprawidłowy kraj",
			billingStateError: "Nieprawidłowe województwo",
			billingCityError: "Nieprawidłowe miasto",
			billingStreetError: "Nieprawidłowa ulica",
			billingStreetError2: "Nieprawidłowa ulica",
			billingPostCodeError: "Nieprawidłowy kod pocztowy",
			mobilePhoneError: "Phone number is required.",
			noSelectionError: "Select one of the two options.",
			mobileError: "Invalid mobile number",
			mobileContryCodeError: "Invalid country code",
			birthDateError: "Invalid birth date. DD/MM/YYYY expected",
			showOtherPaymentMethods: "Show other payment methods",
            cvvHint: "3 cyfry na tylnej stronie karty.",
            cvvHintAmex: "4 cyfry na przedniej strony karty.",
            cvvHintMaestro: "3 cyfry na tylnej stronie karty, jeśli są określone.",
            billingAddress: "Adres do faktury",
            billingCountryPlaceholder: "Proszę wybrać",
            billingStatePlaceholder: "Województwo",
            billingCityPlaceholder: "Miasto",
            billingPostCodePlaceholder: "Kod pocztowy",
            billingStreet1Placeholder: "Ulica",
            billingStreet2Placeholder: "Ulica - dodatkowe dane (opcjonalnie)",
            billingStreet2PlaceholderMandatory: "Ulica - dodatkowe dane",
            supportMessage:"Payment cannot be completed.<br/>Please contact support with following information:<br/>{{message}}<br/>ndc: {{ndc}}<br/>timestamp: {{timestamp}}",
            nationalIdentifier: "National Identifier",
            nationalIdentifierError: "Invalid National Identifier",
			ikanoOpenInvoiceTermsAndCondition: "Terms and Conditions",
			ikanoOpenInvoiceAccept: "I have read and agree the Terms and Conditions",
			ikanoOpenInvoiceAcceptError: "Please accept the Terms and Conditions",
			insertCode: "Insert code here",
			mandateAuthorization: "By signing this mandate form, I authorize the creditor to send an instruction to my bank to debit my account in accordance with the instruction from the creditor.",
			mandateEntitlement: "As part of my rights, I am entitled to a refund from my bank under the terms and conditions of my agreement with my bank. A refund must be claimed within 8 weeks starting from the date on which my account was debited.",
			mandateConfirmation: "I confirm to be authorized for the aforementioned account to sign a mandate. I agree to the reduced direct debit pre-notification period of 1 calendar day. I certify that the mandate information provided is complete and accurate.",
			mandateConfirmationError: "Please agree to all the terms and conditions before continuing."
		},
		cz: {
			accountBank:	"Kód banky",
			accountHolder:"Majitel účtu",
			accountId:"Uživatelské jméno / číslo",
			accountNumber:"Číslo účtu",
			accountVerification: "Account verification",
			bankName:"Banka",
			brand:"Typ karty",
			cancel:"Zpět",
			cardHolder:"Držitel karty",
			cardNumber:"Číslo karty",
			cvv:"Verifikační číslo",
			country:"Země",
			expiryDate:"Platnost do",
            taxNumber:"Tax Identification Number",
			submit:"Zaplatit",
			nextStep:		"Pokračovat",
			moreBrands:     "More",
			givenName:      "křestní jméno",
			surname:        "příjmení",
			billingAgreement:"Invoice terms and conditions",
			accountBankError:"Neplatný kód banky",
			accountHolderError:"Zadejte prosím hodnotu Majitel účtu",
			accountNumberError:"Neplatné číslo účtu nebo kód banky",
			cardHolderError:"Zadejte prosím hodnotu Držitel karty",
			surNameError:		"Invalid surname",
			givenNameError:		"Invalid given name",
			cardNumberError:"číslo karty neplatné",
			cvvError:"Neplatné CVD",
			expiryMonthError:"Neplatné datum platnosti",
			expiryYearError:"Neplatné datum platnosti ",
            taxNumberError:     "Invalid Tax Identification Number",
			generalTermsAndConditionsError:"Please accept the consent for data transmission",
			emailOrAccountId:	"Email or Account Id",
			secureId:			"Secure Id",
			learnMore:			"Learn more",
			mmyy:				"MM / YY",
			ddmmyyyy:			"DD / MM / YYYY",
			mobile:				"Mobile Phone",
			qrcode: 			"QR-Code",
			paymentMode:		"Please select your preferred payment method:",
			customerMobile:				"Mobile phone number (+78000001774)",
			register:		"Register now",
			billingCountryError: "Invalid country",
			billingStateError: "Invalid state",
			billingCityError: "Invalid city",
			billingStreetError: "Invalid street",
			billingStreetError2: "Invalid street",
			billingPostCodeError: "Invalid postcode",
			mobilePhoneError: "Phone number is required.",
			noSelectionError: "Select one of the two options.",
			mobileError: "Invalid mobile number",
			mobileContryCodeError: "Invalid country code",
			birthDateError: "Invalid birth date. DD/MM/YYYY expected",
			showOtherPaymentMethods: "Show other payment methods",
			cvvHint: "Tři číslice na zadní straně vaší karty.",
            cvvHintAmex: "Čtyři číslice na zadní straně vaší karty.",
            cvvHintMaestro: "Tři číslice na zadní straně vaší karty, pokud je určeno.",
            billingAddress: "Billing address",
            billingCountryPlaceholder: "Please select",
            billingStatePlaceholder: "State/Province",
            billingCityPlaceholder: "City",
            billingPostCodePlaceholder: "ZIP/Postal Code",
            billingStreet1Placeholder: "Street Address Line 1",
            billingStreet2Placeholder: "Street Address Line 2 (Optional)",
            billingStreet2PlaceholderMandatory: "Street Address Line 2",
            supportMessage:"Payment cannot be completed.<br/>Please contact support with following information:<br/>{{message}}<br/>ndc: {{ndc}}<br/>timestamp: {{timestamp}}",
            nationalIdentifier: "National Identifier",
			nationalIdentifierError: "Invalid National Identifier",
			ikanoOpenInvoiceTermsAndCondition: "Terms and Conditions",
			ikanoOpenInvoiceAccept: "I have read and agree the Terms and Conditions",
			ikanoOpenInvoiceAcceptError: "Please accept the Terms and Conditions",
			insertCode: "Insert code here",
			mandateAuthorization: "By signing this mandate form, I authorize the creditor to send an instruction to my bank to debit my account in accordance with the instruction from the creditor.",
			mandateEntitlement: "As part of my rights, I am entitled to a refund from my bank under the terms and conditions of my agreement with my bank. A refund must be claimed within 8 weeks starting from the date on which my account was debited.",
			mandateConfirmation: "I confirm to be authorized for the aforementioned account to sign a mandate. I agree to the reduced direct debit pre-notification period of 1 calendar day. I certify that the mandate information provided is complete and accurate.",
			mandateConfirmationError: "Please agree to all the terms and conditions before continuing."
		},
		hu: {
			accountBank:	"bank kód",
			accountHolder: "Számlatulajdonos",
			accountId: "Felhasználónév",
			accountNumber: "Számlaszám",
			accountVerification: "Account verification",
			bankName: "Banknév",
			brand: "Márka",
			cancel: "Vissza",
			cardHolder: "Kártyatulajdonos",
			cardNumber: "Kártyaszám",
			cvv: "Ellenőrző kód",
			country: "Ország",
			expiryDate: "Lejárati dátum",
            taxNumber:"Tax Identification Number",
			submit: "Fizetek most",
			nextStep: "Tovább",
			moreBrands:     "More",
			givenName:      "keresztnév",
			surname:        "vezetéknév",
			billingAgreement:"Invoice terms and conditions",
			accountBankError:"A bank kód érvénytelen",
			accountHolderError:"Kérjük, adja meg a következőt fiók jogosult",
			accountNumberError:"Érvénytelen számla száma vagy banki kód",
			cardHolderError:"Kérjük adja meg a kártyatulajdonos nevét",
			surNameError:		"Invalid surname",
			givenNameError:		"Invalid given name",
			cardNumberError:"A kártya érvénytelen",
			cvvError:"A CVD érvénytelen",
			expiryMonthError:"A lejárati idő érvénytelen",
			expiryYearError:"A lejárati idő érvénytelen",
            taxNumberError:     "Invalid Tax Identification Number",
			generalTermsAndConditionsError:"Please accept the consent for data transmission",
			emailOrAccountId:	"Email or Account Id",
			secureId:			"Secure Id",
			learnMore:			"Learn more",
			mmyy: "HH / ÉÉ",
			ddmmyyyy:			"DD / MM / YYYY",
			mobile:				"Mobile Phone",
			qrcode: 			"QR-Code",
			paymentMode:		"Please select your preferred payment method:",
			customerMobile:				"mobil telefonszám (+78000001774)",
			register: "Regisztrálok",
			billingCountryError: "Invalid country",
			billingStateError: "Invalid state",
			billingCityError: "Invalid city",
			billingStreetError: "Invalid street",
			billingStreetError2: "Invalid street",
			billingPostCodeError: "Invalid postcode",
			mobilePhoneError: "Phone number is required.",
			noSelectionError: "Select one of the two options.",
			mobileError: "Invalid mobile number",
			mobileContryCodeError: "Invalid country code",
			birthDateError: "Invalid birth date. DD/MM/YYYY expected",
			showOtherPaymentMethods: "Show other payment methods",
			cvvHint: "A kártyád hátulján található háromjegyű szám.",
            cvvHintAmex: "A kártyája elején található 4 számjegy.",
            cvvHintMaestro: "A kártyája hátoldalán található 3 számjegy, ha fel van tüntetve.",
            billingAddress: "Billing address",
            billingCountryPlaceholder: "Please select",
            billingStatePlaceholder: "State/Province",
            billingCityPlaceholder: "City",
            billingPostCodePlaceholder: "ZIP/Postal Code",
            billingStreet1Placeholder: "Street Address Line 1",
            billingStreet2Placeholder: "Street Address Line 2 (Optional)",
            billingStreet2PlaceholderMandatory: "Street Address Line 2",
            supportMessage:"Payment cannot be completed.<br/>Please contact support with following information:<br/>{{message}}<br/>ndc: {{ndc}}<br/>timestamp: {{timestamp}}",
            nationalIdentifier: "National Identifier",
			nationalIdentifierError: "Invalid National Identifier",
			ikanoOpenInvoiceTermsAndCondition: "Terms and Conditions",
			ikanoOpenInvoiceAccept: "I have read and agree the Terms and Conditions",
			ikanoOpenInvoiceAcceptError: "Please accept the Terms and Conditions",
			insertCode: "Insert code here",
			mandateAuthorization: "By signing this mandate form, I authorize the creditor to send an instruction to my bank to debit my account in accordance with the instruction from the creditor.",
			mandateEntitlement: "As part of my rights, I am entitled to a refund from my bank under the terms and conditions of my agreement with my bank. A refund must be claimed within 8 weeks starting from the date on which my account was debited.",
			mandateConfirmation: "I confirm to be authorized for the aforementioned account to sign a mandate. I agree to the reduced direct debit pre-notification period of 1 calendar day. I certify that the mandate information provided is complete and accurate.",
			mandateConfirmationError: "Please agree to all the terms and conditions before continuing."
		},
		bg: {
			accountBank:	"Банков код",
			accountHolder:"Титуляр на сметката",
			accountId:"Лична карта No. (IDCard)",
			accountNumber:"Потребителско име / Id",
			accountVerification: "Account verification",
			bankName:"банка",
			brand:"Вид на картата",
			cancel:"Назад",
			cardHolder:"Титуляр на картата",
			cardNumber:"Карта No.",
			cvv:"Верификационен номер",
			country:"Държава",
			expiryDate:"Дата на валидност",
            taxNumber:"Tax Identification Number",
			submit:"Плати сега",
			nextStep:		"Continue",
			moreBrands:     "More",
			givenName:      "собствено име",
			surname:        "фамилно име",
			billingAgreement:"Invoice terms and conditions",
			accountBankError:"Невалиден банков код",
			accountHolderError:"Моля въведете стойност за Титуляр на сметката",
			accountNumberError:"Невалидни сметка No. или банков код",
			cardHolderError:"Моля въведете стойност за Титуляр на картата",
			surNameError:		"Invalid surname",
			givenNameError:		"Invalid given name",
			cardNumberError:"номер на карта за невалидна (invalid CC.-nr)",
			cvvError:"Невалиден CVD",
			expiryMonthError:"Невалидна дата на валидност",
			expiryYearError:"Невалидна дата на валидност",
            taxNumberError:     "Invalid Tax Identification Number",
			generalTermsAndConditionsError:"Please accept the consent for data transmission",
			emailOrAccountId:	"Email or Account Id",
			secureId:			"Secure Id",
			learnMore:			"Learn more",
			mmyy:				"MM / YY",
			ddmmyyyy:			"DD / MM / YYYY",
			mobile:				"Mobile Phone",
			qrcode: 			"QR-Code",
			paymentMode:		"Please select your preferred payment method:",
			customerMobile:				"Мобилен номер (+78000001774)",
			register:		"Register now",
			billingCountryError: "Invalid country",
			billingStateError: "Invalid state",
			billingCityError: "Invalid city",
			billingStreetError: "Invalid street",
			billingStreetError2: "Invalid street",
			billingPostCodeError: "Invalid postcode",
			mobilePhoneError: "Phone number is required.",
			noSelectionError: "Select one of the two options.",
			mobileError: "Invalid mobile number",
			mobileContryCodeError: "Invalid country code",
			birthDateError: "Invalid birth date. DD/MM/YYYY expected",
			showOtherPaymentMethods: "Show other payment methods",
			cvvHint: "3-те цифри на гърба на Вашата карта.",
            cvvHintAmex: "4-те цифри от предната страна на Вашата карта.",
            cvvHintMaestro: "3-те цифри на гърба на Вашата карта, ако са указани.",
            billingAddress: "Billing address",
            billingCountryPlaceholder: "Please select",
            billingStatePlaceholder: "State/Province",
            billingCityPlaceholder: "City",
            billingPostCodePlaceholder: "ZIP/Postal Code",
            billingStreet1Placeholder: "Street Address Line 1",
            billingStreet2Placeholder: "Street Address Line 2 (Optional)",
            billingStreet2PlaceholderMandatory: "Street Address Line 2",
            supportMessage:"Payment cannot be completed.<br/>Please contact support with following information:<br/>{{message}}<br/>ndc: {{ndc}}<br/>timestamp: {{timestamp}}",
            nationalIdentifier: "National Identifier",
			nationalIdentifierError: "Invalid National Identifier",
			ikanoOpenInvoiceTermsAndCondition: "Terms and Conditions",
			ikanoOpenInvoiceAccept: "I have read and agree the Terms and Conditions",
			ikanoOpenInvoiceAcceptError: "Please accept the Terms and Conditions",
			insertCode: "Insert code here",
			mandateAuthorization: "By signing this mandate form, I authorize the creditor to send an instruction to my bank to debit my account in accordance with the instruction from the creditor.",
			mandateEntitlement: "As part of my rights, I am entitled to a refund from my bank under the terms and conditions of my agreement with my bank. A refund must be claimed within 8 weeks starting from the date on which my account was debited.",
			mandateConfirmation: "I confirm to be authorized for the aforementioned account to sign a mandate. I agree to the reduced direct debit pre-notification period of 1 calendar day. I certify that the mandate information provided is complete and accurate.",
			mandateConfirmationError: "Please agree to all the terms and conditions before continuing."
		},
		ro: {
			accountBank:	"Codul bancii",
			accountHolder:"Detinatorul contului",
			accountId:"Nume de utilizator / Id",
			accountNumber:"Numarul contului",
			accountVerification: "Account verification",
			bankName:"Banca",
			brand:"Tipul cardului",
			cancel:"Inapoi",
			cardHolder:"Titularul cardului",
			cardNumber:"Numarul cardului",
			cvv:"Codul de securitate al cardului",
			country:"Tara",
			expiryDate:"Data de expirare a cardului",
            taxNumber:"Tax Identification Number",
			submit:"Plateste acum",
			nextStep:		"Continua",
			moreBrands:     "More",
			givenName:      "nume dat",
			surname:        "nume de familie",
			billingAgreement:"Invoice terms and conditions",
			accountBankError:"Codul bancii nu este valid",
			accountHolderError:"Vă rugăm să introduceți o valoare pentru Detinatorul contului",
			accountNumberError:"Numarul de cont sau codul bancii nu este valid",
			cardHolderError:"Vă rugăm să introduceți o valoare pentru Titularul cardului",
			surNameError:		"Invalid surname",
			givenNameError:		"Invalid given name",
			cardNumberError:"Numărul cardului este invalid",
			cvvError:"Codul de securitate nu este valid",
			expiryMonthError:"Data de expirare a cardului nu este valida",
			expiryYearError:"Data de expirare a cardului nu este valida",
            taxNumberError:     "Invalid Tax Identification Number",
			generalTermsAndConditionsError:"Please accept the consent for data transmission",
			emailOrAccountId:	"Email sau Account Id",
			secureId:			"Secure Id",
			learnMore:			"Learn more",
			mmyy:				"MM / YY",
			ddmmyyyy:			"DD / MM / YYYY",
			mobile:				"Mobile Phone",
			qrcode: 			"QR-Code",
			paymentMode:		"Please select your preferred payment method:",
			customerMobile:				"Numarul de telefon mobil (+78000001774)",
			register:		"Register now",
			billingCountryError: "Invalid country",
			billingStateError: "Invalid state",
			billingCityError: "Invalid city",
			billingStreetError: "Invalid street",
			billingStreetError2: "Invalid street",
			billingPostCodeError: "Invalid postcode",
			mobilePhoneError: "Phone number is required.",
			noSelectionError: "Select one of the two options.",
			mobileError: "Invalid mobile number",
			mobileContryCodeError: "Invalid country code",
			birthDateError: "Invalid birth date. DD/MM/YYYY expected",
			showOtherPaymentMethods: "Afiseaza metode de plata alternative",
			cvvHint: "Cele 3 cifre de pe spatele cardului.",
            cvvHintAmex: "Cele 4 cifre de pe spatele cardului.",
            cvvHintMaestro: "Cele 3 cifre de pe spatele cardului, dacă există.",
            billingAddress: "Billing address",
            billingCountryPlaceholder: "Please select",
            billingStatePlaceholder: "State/Province",
            billingCityPlaceholder: "City",
            billingPostCodePlaceholder: "ZIP/Postal Code",
            billingStreet1Placeholder: "Street Address Line 1",
            billingStreet2Placeholder: "Street Address Line 2 (Optional)",
            billingStreet2PlaceholderMandatory: "Street Address Line 2",
            supportMessage:"Payment cannot be completed.<br/>Please contact support with following information:<br/>{{message}}<br/>ndc: {{ndc}}<br/>timestamp: {{timestamp}}",
            nationalIdentifier: "National Identifier",
			nationalIdentifierError: "Invalid National Identifier",
			ikanoOpenInvoiceTermsAndCondition: "Terms and Conditions",
			ikanoOpenInvoiceAccept: "I have read and agree the Terms and Conditions",
			ikanoOpenInvoiceAcceptError: "Please accept the Terms and Conditions",
			insertCode: "Insert code here",
			mandateAuthorization: "By signing this mandate form, I authorize the creditor to send an instruction to my bank to debit my account in accordance with the instruction from the creditor.",
			mandateEntitlement: "As part of my rights, I am entitled to a refund from my bank under the terms and conditions of my agreement with my bank. A refund must be claimed within 8 weeks starting from the date on which my account was debited.",
			mandateConfirmation: "I confirm to be authorized for the aforementioned account to sign a mandate. I agree to the reduced direct debit pre-notification period of 1 calendar day. I certify that the mandate information provided is complete and accurate.",
			mandateConfirmationError: "Please agree to all the terms and conditions before continuing."
		},
		ru: {
			accountBank:	"Код банка",
			accountHolder:"Владелец счета",
			accountId:"Имя пользователя / Id",
			accountNumber:"№ счета",
			accountVerification: "Account verification",
			bankName:"Банк",
			brand:"Карта",
			cancel:"Назад",
			cardHolder:"Владелец карты",
			cardNumber:"Номер карты",
			cvv:"Секретный номер",
			country:"Страна",
			expiryDate:"Срок истечения карты",
            taxNumber:"ИНН",
			submit:"Оплатить",
			nextStep:"Далее",
			moreBrands:     "More",
			givenName:      "собственное имя",
			surname:        "фамилия",
			billingAgreement:"Invoice terms and conditions",
			accountBankError:"Недействительный код банка",
			accountHolderError:"Пожалуйста, введите владелеца счета",
			accountNumberError:"Недействительный номер счета или код банка",
			cardHolderError:"Пожалуйста, введите владельца карты",
			surNameError:		"Неверная фамилия",
			givenNameError:		"Неверное имя",
			cardNumberError:"Недействительный номер карты",
			cvvError:"Недействительный секретный номер",
			expiryMonthError:"Недействительный срок действия карты",
			expiryYearError:"Недействительный срок действия карты",
            taxNumberError:     "Неверный ИНН",
			generalTermsAndConditionsError:"Please accept the consent for data transmission",
			emailOrAccountId:	"Адрес электронной почты или идентификатор учетной записи",
			secureId:			"Secure Id",
			learnMore:			"Learn more",
			mmyy:				"MM / YY",
			ddmmyyyy:			"DD / MM / YYYY",
			mobile:				"Mobile Phone",
			qrcode: 			"QR-Code",
			paymentMode:		"Please select your preferred payment method:",
			customerMobile:				"Номер мобильного телефона (+78000001774)",
			register:		"Register now",
			billingCountryError: "Invalid country",
			billingStateError: "Invalid state",
			billingCityError: "Invalid city",
			billingStreetError: "Invalid street",
			billingStreetError2: "Invalid street",
			billingPostCodeError: "Invalid postcode",
			mobilePhoneError: "Phone number is required.",
			noSelectionError: "Select one of the two options.",
			mobileError: "Invalid mobile number",
			mobileContryCodeError: "Invalid country code",
			birthDateError: "Invalid birth date. DD/MM/YYYY expected",
			showOtherPaymentMethods: "Показать другие способы оплаты",
			cvvHint: "3 цифры на обратной стороне вашей карты.",
            cvvHintAmex: "4 цифры на лицевой стороне вашей карты.",
            cvvHintMaestro: "3 цифры на обратной стороне вашей карты, при наличии.",
            billingAddress: "Платежный адрес",
            billingCountryPlaceholder: "Пожалуйста, выберите",
            billingStatePlaceholder: "Штат",
            billingCityPlaceholder: "Город",
            billingPostCodePlaceholder: "Почтовый индекс",
            billingStreet1Placeholder: "Адрес",
            billingStreet2Placeholder: "Дополнительные данные адреса (не обязательно)",
            billingStreet2PlaceholderMandatory: "Дополнительные данные адреса",
            supportMessage:"Payment cannot be completed.<br/>Please contact support with following information:<br/>{{message}}<br/>ndc: {{ndc}}<br/>timestamp: {{timestamp}}",
            nationalIdentifier: "National Identifier",
			nationalIdentifierError: "Invalid National Identifier",
			ikanoOpenInvoiceTermsAndCondition: "Terms and Conditions",
			ikanoOpenInvoiceAccept: "I have read and agree the Terms and Conditions",
			ikanoOpenInvoiceAcceptError: "Please accept the Terms and Conditions",
			insertCode: "Insert code here",
			mandateAuthorization: "By signing this mandate form, I authorize the creditor to send an instruction to my bank to debit my account in accordance with the instruction from the creditor.",
			mandateEntitlement: "As part of my rights, I am entitled to a refund from my bank under the terms and conditions of my agreement with my bank. A refund must be claimed within 8 weeks starting from the date on which my account was debited.",
			mandateConfirmation: "I confirm to be authorized for the aforementioned account to sign a mandate. I agree to the reduced direct debit pre-notification period of 1 calendar day. I certify that the mandate information provided is complete and accurate.",
			mandateConfirmationError: "Please agree to all the terms and conditions before continuing."
		},
		cn: {
			accountBank:	"银行代码",
			accountHolder:"开户人",
			accountId:"用户名/Id",
			accountNumber:"账号",
			accountVerification: "Account verification",
			bankName:"银行",
			brand:"银行卡品牌",
			cancel:"返回",
			cardHolder:"持卡人",
			cardNumber:"卡号",
			cvv:"安全码",
            cvvPlaceholder:"CVV",
			country:"国家",
			expiryDate:"有效期限",
            taxNumber:"税号",
			submit:"立即支付",
			nextStep:"继续",
			moreBrands:     "More",
			givenName:      "给定的名称",
			surname:        "姓",
			billingAgreement:"Invoice terms and conditions",
			accountBankError:"无效的银行代码",
			accountHolderError:"请输入开户人姓名",
			accountNumberError:"无效账号或银行代码",
			cardHolderError:"请输入持卡人姓名",
			surNameError:		"无效的姓",
			givenNameError:		"无效的名",
			cardNumberError:"无效卡号",
			cvvError:"请输入验证码",
			expiryMonthError:"无效的有效期",
			expiryYearError:"无效的有效期",
            taxNumberError:     "无效税号",
			generalTermsAndConditionsError:"Please accept the consent for data transmission",
			emailOrAccountId:	"Email or Account Id",
			secureId:			"Secure Id",
			learnMore:			"了解更多信息",
			mmyy:				"MM / YY",
			ddmmyyyy:			"DD / MM / YYYY",
			customerMobile:				"手机号码  (+78000001774)",
			countryCodePhone:   "国家代号",
			mobile:				"Mobile Phone",
			qrcode: 			"QR-Code",
			paymentMode:		"Please select your preferred payment method:",
			mobilePhone:		"手机号码",
			register:		"注册",
			billingCountryError: "无效国家",
			billingStateError: "无效省份",
			billingCityError: "无效城市",
			billingStreetError: "无效街道",
			billingStreetError2: "无效街道2",
			billingPostCodeError: "无效邮编",
			mobilePhoneError: "Phone number is required.",
			noSelectionError: "Select one of the two options.",
			mobileError: "无效手机号码",
			mobileContryCodeError: "无效国家代码",
			birthDateError: "Invalid birth date. DD/MM/YYYY expected",
			showOtherPaymentMethods: "显示其他付款方式",
			cvvHint: "卡背面的 3 位数字。",
            cvvHintAmex: "卡正面的 4 位数字。",
            cvvHintMaestro: "卡背面的 3 位数字（如果指定的话）。",
            billingAddress: "帐单地址",
            billingCountryPlaceholder: "请选择",
            billingStatePlaceholder: "省份",
            billingCityPlaceholder: "城市",
            billingPostCodePlaceholder: "邮编",
            billingStreet1Placeholder: "街道1",
            billingStreet2Placeholder: "街道2(可选)",
            billingStreet2PlaceholderMandatory: "街道2",
            supportMessage:"交易失败.<br/>请联系技术支持，原因如下:<br/>{{message}}<br/>ndc: {{ndc}}<br/>交易时间: {{timestamp}}",
            nationalIdentifier: "National Identifier",
			nationalIdentifierError: "Invalid National Identifier",
			ikanoOpenInvoiceTermsAndCondition: "Terms and Conditions",
			ikanoOpenInvoiceAccept: "I have read and agree the Terms and Conditions",
			ikanoOpenInvoiceAcceptError: "Please accept the Terms and Conditions",
			insertCode: "Insert code here",
			mandateAuthorization: "By signing this mandate form, I authorize the creditor to send an instruction to my bank to debit my account in accordance with the instruction from the creditor.",
			mandateEntitlement: "As part of my rights, I am entitled to a refund from my bank under the terms and conditions of my agreement with my bank. A refund must be claimed within 8 weeks starting from the date on which my account was debited.",
			mandateConfirmation: "I confirm to be authorized for the aforementioned account to sign a mandate. I agree to the reduced direct debit pre-notification period of 1 calendar day. I certify that the mandate information provided is complete and accurate.",
			mandateConfirmationError: "Please agree to all the terms and conditions before continuing."
		},
		zh: {
			accountBank:	"開戶銀行",
			accountHolder:"開戶人",
			accountId:"賬戶編號",
			accountNumber:"開戶賬號",
			accountVerification: "Account verification",
			bankName:"銀行名稱",
			brand:"卡種",
			cancel:"取消",
			cardHolder:"持卡人",
			cardNumber:"卡號",
			cvv:"安全碼",
			cvvPlaceholder:"CVV",
			country:"國家/地區",
			expiryDate:"有效期限",
            taxNumber:"Tax Identification Number",
			submit:"立即支付",
			nextStep:"继续",
			moreBrands:     "More",
			givenName:      "给定的名称",
			surname:        "姓",
			billingAgreement:"賬單協議	“發票條款和條件”",
			accountBankError:"開戶銀行錯誤",
			accountHolderError:"開戶人姓名錯誤",
			accountNumberError:"銀行賬號錯誤",
			cardHolderError:"持卡人姓名錯誤",
			surNameError:		"Invalid surname",
			givenNameError:		"Invalid given name",
			cardNumberError:"卡號錯誤",
			cvvError:"驗證碼錯誤",
			expiryMonthError:"到期月份錯誤",
			expiryYearError:"到期年份錯誤",
            taxNumberError:     "Invalid Tax Identification Number",
			generalTermsAndConditionsError:"一般條款和條件錯誤		“請接受同意數據傳輸”",
			emailOrAccountId:	"郵箱或賬戶編號",
			secureId:			"安全編號",
			learnMore:			"了解更多",
			mmyy:				"MM / YY",
			ddmmyyyy:			"DD / MM / YYYY",
			customerMobile:				"Mobile phone number (+78000001774)",
			countryCodePhone:   "國家代號",
			mobile:				"Mobile Phone",
			qrcode: 			"QR-Code",
			paymentMode:		"Please select your preferred payment method:",
			mobilePhone:		"手機號碼",
			register:		"Register now",
			billingCountryError: "Invalid country",
			billingStateError: "Invalid state",
			billingCityError: "Invalid city",
			billingStreetError: "Invalid street",
			billingStreetError2: "Invalid street",
			billingPostCodeError: "Invalid postcode",
			mobilePhoneError: "Phone number is required.",
			noSelectionError: "Select one of the two options.",
			mobileError: "Invalid mobile number",
			mobileContryCodeError: "Invalid country code",
			birthDateError: "Invalid birth date. DD/MM/YYYY expected",
			showOtherPaymentMethods: "Show other payment methods",
			cvvHint: "卡片背面的 3 碼數字。",
            cvvHintAmex: "卡片正面的 4 碼數字。",
            cvvHintMaestro: "如有指定，卡片背面的 3 碼數字。",
            billingAddress: "Billing address",
            billingCountryPlaceholder: "Please select",
            billingStatePlaceholder: "State/Province",
            billingCityPlaceholder: "City",
            billingPostCodePlaceholder: "ZIP/Postal Code",
            billingStreet1Placeholder: "Street Address Line 1",
            billingStreet2Placeholder: "Street Address Line 2 (Optional)",
            billingStreet2PlaceholderMandatory: "Street Address Line 2",
            supportMessage:"交易失败.<br/>请联系技术支持，原因如下:<br/>{{message}}<br/>ndc: {{ndc}}<br/>交易时间: {{timestamp}}",
            nationalIdentifier: "National Identifier",
			nationalIdentifierError: "Invalid National Identifier",
			ikanoOpenInvoiceTermsAndCondition: "Terms and Conditions",
			ikanoOpenInvoiceAccept: "I have read and agree the Terms and Conditions",
			ikanoOpenInvoiceAcceptError: "Please accept the Terms and Conditions",
			insertCode: "Insert code here",
			mandateAuthorization: "By signing this mandate form, I authorize the creditor to send an instruction to my bank to debit my account in accordance with the instruction from the creditor.",
			mandateEntitlement: "As part of my rights, I am entitled to a refund from my bank under the terms and conditions of my agreement with my bank. A refund must be claimed within 8 weeks starting from the date on which my account was debited.",
			mandateConfirmation: "I confirm to be authorized for the aforementioned account to sign a mandate. I agree to the reduced direct debit pre-notification period of 1 calendar day. I certify that the mandate information provided is complete and accurate.",
			mandateConfirmationError: "Please agree to all the terms and conditions before continuing."
		},
		gr: {
			accountBank:	"Κωδικός Τράπεζας",
			accountHolder:"κάτοχος λογαριασμού",
			accountId:"Όνομα χρήστη / Id",
			accountNumber:"Αρ. Λογαριασμού",
			accountVerification: "Account verification",
			bankName:"Τράπεζα",
			brand:"Κάρτα Μάρκα",
			cancel:"Πίσω",
			cardHolder:"κάτοχο της κάρτας",
			cardNumber:"Αρ. Κάρτας",
			cvv:"Αριθμός Επαλήθευση",
			country:"Χώρα",
			expiryDate:"Ημερομηνία λήξης",
            taxNumber:"Tax Identification Number",
			submit:"Πληρώνουν τώρα",
			nextStep:		"Continue",
			moreBrands:     "More",
			givenName:      "Ονομα",
			surname:        "επώνυμο",
			billingAgreement:"Invoice terms and conditions",
			accountBankError:"Áκυρα Τράπεζα κώδικα",
			accountHolderError:"Παρακαλώ εισάγετε μια τιμή για κάτοχος λογαριασμού",
			accountNumberError:"Áκυρα Αρ. Λογαριασμού ή Κωδικός Τράπεζας",
			cardHolderError:"Παρακαλώ εισάγετε μια τιμή για κάτοχο της κάρτας",
			surNameError:		"Invalid surname",
			givenNameError:		"Invalid given name",
			cardNumberError:"Ο αριθμός της κάρτας δεν είναι έγκυρος",
			cvvError:"Áκυρα CVD",
			expiryMonthError:"Áκυρα ημερομηνία λήξης",
			expiryYearError:"Áκυρα ημερομηνία λήξης",
            taxNumberError:     "Invalid Tax Identification Number",
			generalTermsAndConditionsError:"Please accept the consent for data transmission",
			emailOrAccountId:	"Διεύθυνση email ή ID λογαριασμού",
			secureId:			"Secure Id",
			learnMore:			"Learn more",
			mmyy:				"MM / YY",
			ddmmyyyy:			"DD / MM / YYYY",
			mobile:				"Mobile Phone",
			qrcode: 			"QR-Code",
			paymentMode:		"Please select your preferred payment method:",
			customerMobile:				"Mobile phone number (+78000001774)",
			register:		"Register now",
			billingCountryError: "Invalid country",
			billingStateError: "Invalid state",
			billingCityError: "Invalid city",
			billingStreetError: "Invalid street",
			billingStreetError2: "Invalid street",
			billingPostCodeError: "Invalid postcode",
			mobilePhoneError: "Phone number is required.",
			noSelectionError: "Select one of the two options.",
			mobileError: "Invalid mobile number",
			mobileContryCodeError: "Invalid country code",
			birthDateError: "Invalid birth date. DD/MM/YYYY expected",
			showOtherPaymentMethods: "Show other payment methods",
		    cvvHint: "Τα 3 ψηφία στο πίσω μέρος της κάρτας σας.",
            cvvHintAmex: "Τα 4 ψηφία στο εμπρός μέρος της κάρτας σας.",
            cvvHintMaestro: "Τα 3 ψηφία στο πίσω μέρος της κάρτας σας αν καθορίζεται.",
            billingAddress: "Billing address",
            billingCountryPlaceholder: "Please select",
            billingStatePlaceholder: "State/Province",
            billingCityPlaceholder: "City",
            billingPostCodePlaceholder: "ZIP/Postal Code",
            billingStreet1Placeholder: "Street Address Line 1",
            billingStreet2Placeholder: "Street Address Line 2 (Optional)",
            billingStreet2PlaceholderMandatory: "Street Address Line 2",
            supportMessage:"Payment cannot be completed.<br/>Please contact support with following information:<br/>{{message}}<br/>ndc: {{ndc}}<br/>timestamp: {{timestamp}}",
            nationalIdentifier: "National Identifier",
			nationalIdentifierError: "Invalid National Identifier",
			ikanoOpenInvoiceTermsAndCondition: "Terms and Conditions",
			ikanoOpenInvoiceAccept: "I have read and agree the Terms and Conditions",
			ikanoOpenInvoiceAcceptError: "Please accept the Terms and Conditions",
			insertCode: "Insert code here",
			mandateAuthorization: "By signing this mandate form, I authorize the creditor to send an instruction to my bank to debit my account in accordance with the instruction from the creditor.",
			mandateEntitlement: "As part of my rights, I am entitled to a refund from my bank under the terms and conditions of my agreement with my bank. A refund must be claimed within 8 weeks starting from the date on which my account was debited.",
			mandateConfirmation: "I confirm to be authorized for the aforementioned account to sign a mandate. I agree to the reduced direct debit pre-notification period of 1 calendar day. I certify that the mandate information provided is complete and accurate.",
			mandateConfirmationError: "Please agree to all the terms and conditions before continuing."
		},
		no: {
			accountBank:	"Bankkode",
			accountHolder:"Kontoinnehaver",
			accountId:"Brukernavn/ID",
			accountNumber:"Kontonr.",
			accountVerification: "Account verification",
			bankName:"Bank",
			brand:"Betalingsmåte",
			cancel:"Tilbake",
			cardHolder:"Kortinnehaver",
			cardNumber:"Kortnummer",
			cvv:"CVC-kode",
			country:"Land",
			expiryDate:"Utløpsdato",
            taxNumber:"Tax Identification Number",
			submit:"Betal nå",
			nextStep:		"Continue",
			moreBrands:     "More",
			givenName:      "fornavn",
			surname:        "etternavn",
			billingAgreement:"Vilkår for faktura",
			accountBankError:"Ugyldig bankkode",
			accountHolderError:"Vennligst skriv inn en verdi for Kontoinnehaver",
			accountNumberError:"Ugyldig kontonr. eller bankkode",
			cardHolderError:"Vennligst skriv inn en verdi for Kortinnehaver",
			surNameError:		"Invalid surname",
			givenNameError:		"Invalid given name",
			cardNumberError:"Ugyldig kortnummer",
			cvvError:"Ugyldig CVC-kode",
			expiryMonthError:"Ugyldig utløpsdato",
			expiryYearError:"Ugyldig utløpsdato",
            taxNumberError:     "Invalid Tax Identification Number",
			generalTermsAndConditionsError:"Please accept the consent for data transmission",
			emailOrAccountId:	"E-postadresse eller konto-ID",
			secureId:			"Secure Id",
			learnMore:			"Learn more",
			mmyy:				"MM / YY",
			ddmmyyyy:			"DD / MM / YYYY",
			mobile:				"Mobile Phone",
			qrcode: 			"QR-Code",
			paymentMode:		"Please select your preferred payment method:",
			customerMobile:				"mobiltelefonnummer (+78000001774)",
			register:		"Register now",
			billingCountryError: "Invalid country",
			billingStateError: "Invalid state",
			billingCityError: "Invalid city",
			billingStreetError: "Invalid street",
			billingStreetError2: "Invalid street",
			billingPostCodeError: "Invalid postcode",
			mobilePhoneError: "Phone number is required.",
			noSelectionError: "Select one of the two options.",
			mobileError: "Invalid mobile number",
			mobileContryCodeError: "Invalid country code",
			birthDateError: "Invalid birth date. DD/MM/YYYY expected",
			showOtherPaymentMethods: "Show other payment methods",
			cvvHint: "De tre sifrene bak på kortet.",
            cvvHintAmex: "De fire sifrene foran på kortet.",
            cvvHintMaestro: "De tre sifrene bak på kortet hvis spesifisert.",
            billingAddress: "Billing address",
            billingCountryPlaceholder: "Please select",
            billingStatePlaceholder: "State/Province",
            billingCityPlaceholder: "City",
            billingPostCodePlaceholder: "ZIP/Postal Code",
            billingStreet1Placeholder: "Street Address Line 1",
            billingStreet2Placeholder: "Street Address Line 2 (Optional)",
            billingStreet2PlaceholderMandatory: "Street Address Line 2",
            supportMessage:"Payment cannot be completed.<br/>Please contact support with following information:<br/>{{message}}<br/>ndc: {{ndc}}<br/>timestamp: {{timestamp}}",
            nationalIdentifier: "National Identifier",
			nationalIdentifierError: "Invalid National Identifier",
			ikanoOpenInvoiceTermsAndCondition: "Kjøpsvilkår IKANO faktura",
			ikanoOpenInvoiceAccept: "Jeg forstår og godtar kjøpsvilkårene",
			ikanoOpenInvoiceAcceptError: "Vennligst aksepter kjøpsvilkår for IKANO faktura",
			insertCode: "Insert code here",
			mandateAuthorization: "By signing this mandate form, I authorize the creditor to send an instruction to my bank to debit my account in accordance with the instruction from the creditor.",
			mandateEntitlement: "As part of my rights, I am entitled to a refund from my bank under the terms and conditions of my agreement with my bank. A refund must be claimed within 8 weeks starting from the date on which my account was debited.",
			mandateConfirmation: "I confirm to be authorized for the aforementioned account to sign a mandate. I agree to the reduced direct debit pre-notification period of 1 calendar day. I certify that the mandate information provided is complete and accurate.",
			mandateConfirmationError: "Please agree to all the terms and conditions before continuing."
		},
		sk: {
			accountBank:	"Kód banky",
			accountHolder:"Majiteľ účtu",
			accountId:"Užívateľské meno / číslo",
			accountNumber:"Číslo účtu",
			accountVerification: "Account verification",
			bankName:"Banka",
			brand:"Typ karty",
			cancel:"Späť",
			cardHolder:"Držiteľ karty",
			cardNumber:"Číslo karty",
			cvv:"Verifikačné číslo",
			country:"Krajina",
			expiryDate:"Platnosť do",
            taxNumber:"Tax Identification Number",
			submit:"Zaplatiť",
			nextStep:		"Continue",
			moreBrands:     "More",
			givenName:      "krstné meno",
			surname:        "priezvisko",
			billingAgreement:"Invoice terms and conditions",
			accountBankError:"Neplatný kód banky",
			accountHolderError:"Zadajte prosím hodnotu Majiteľ účtu",
			accountNumberError:"Neplatné číslo účtu alebo kód banky",
			cardHolderError:"Zadajte prosím hodnotu Držiteľ karty",
			surNameError:		"Invalid surname",
			givenNameError:		"Invalid given name",
			cardNumberError:"cislo karty neplatne",
			cvvError:"Neplatné CVD",
			expiryMonthError:"Neplatný dátum platnosti",
			expiryYearError:"Neplatný dátum platnosti",
            taxNumberError:     "Invalid Tax Identification Number",
			generalTermsAndConditionsError:"Please accept the consent for data transmission",
			emailOrAccountId:	"Email or Account Id",
			secureId:			"Secure Id",
			learnMore:			"Learn more",
			mmyy:				"MM / YY",
			ddmmyyyy:			"DD / MM / YYYY",
			mobile:				"Mobile Phone",
			qrcode: 			"QR-Code",
			paymentMode:		"Please select your preferred payment method:",
			customerMobile:				"Mobile phone number (+78000001774)",
			register:		"Zaregistrovať",
			billingCountryError: "Invalid country",
			billingStateError: "Invalid state",
			billingCityError: "Invalid city",
			billingStreetError: "Invalid street",
			billingStreetError2: "Invalid street",
			billingPostCodeError: "Invalid postcode",
			mobilePhoneError: "Phone number is required.",
			noSelectionError: "Select one of the two options.",
			mobileError: "Invalid mobile number",
			mobileContryCodeError: "Invalid country code",
			birthDateError: "Invalid birth date. DD/MM/YYYY expected",
			showOtherPaymentMethods: "Show other payment methods",
			cvvHint: "3 číslice na zadnej strane vašej karty.",
            cvvHintAmex: "4 číslice na prednej strane vašej karty.",
            cvvHintMaestro: "Ak je určené, 3 číslice na zadnej strane vašej karty.",
            billingAddress: "Billing address",
            billingCountryPlaceholder: "Please select",
            billingStatePlaceholder: "State/Province",
            billingCityPlaceholder: "City",
            billingPostCodePlaceholder: "ZIP/Postal Code",
            billingStreet1Placeholder: "Street Address Line 1",
            billingStreet2Placeholder: "Street Address Line 2 (Optional)",
            billingStreet2PlaceholderMandatory: "Street Address Line 2",
            supportMessage:"Payment cannot be completed.<br/>Please contact support with following information:<br/>{{message}}<br/>ndc: {{ndc}}<br/>timestamp: {{timestamp}}",
            nationalIdentifier: "National Identifier",
			nationalIdentifierError: "Invalid National Identifier",
			ikanoOpenInvoiceTermsAndCondition: "Terms and Conditions",
			ikanoOpenInvoiceAccept: "I have read and agree the Terms and Conditions",
			ikanoOpenInvoiceAcceptError: "Please accept the Terms and Conditions",
			insertCode: "Insert code here",
			mandateAuthorization: "By signing this mandate form, I authorize the creditor to send an instruction to my bank to debit my account in accordance with the instruction from the creditor.",
			mandateEntitlement: "As part of my rights, I am entitled to a refund from my bank under the terms and conditions of my agreement with my bank. A refund must be claimed within 8 weeks starting from the date on which my account was debited.",
			mandateConfirmation: "I confirm to be authorized for the aforementioned account to sign a mandate. I agree to the reduced direct debit pre-notification period of 1 calendar day. I certify that the mandate information provided is complete and accurate.",
			mandateConfirmationError: "Please agree to all the terms and conditions before continuing."
		},
		et: {
        	accountBank:	"Panga kood",
        	accountBankBic: "BIC või panga kood",
        	accountBic:	    "BIC",
        	accountHolder:	"Konto omanik",
        	accountId:		"Id",
        	accountNumber:	"Konto number",
        	accountNumberIban: "IBAN või konto number",
        	accountIban:	"IBAN",
			accountVerification: "Account verification",
        	bankName:		"Panga nimi",
        	brand:			"Bränd",
        	cancel:			"Tagasi",
        	cardHolder:		"Kaardi omanik",
        	cardNumber:		"Kaardi number",
        	cvv:			"CVV",
        	country:		"Riik",
        	expiryDate:		"Kehtivusaja lõpp",
        	taxNumber:      "Maksukohustuslase number",
        	submit:			"Maksa kohe",
        	nextStep:		"Jätka",
        	moreBrands:     "More",
        	givenName:      "antud nimi",
        	surname:        "perekonnanimi",
        	billingAgreement: "Arve tingimused",
        	accountBankError:	"Kehtetu panga kood",
        	accountBankBicError: "Kehtetu BIC või panga kood",
        	accountBicError:	"Kehtetu BIC",
        	accountHolderError:	"Kehtetu konto omanik",
        	accountNumberError:	"Kehtetu konto number",
       		accountNumberIbanError: "Kehtetu IBAN või konto number",
        	accountIbanError:   "Kehtetu IBAN",
        	cardHolderError:	"Kehtetu kaardi omanik",
        	surNameError:		"Kehtetu perekonnanimi",
        	givenNameError:		"Kehtetu eesnimi",
        	cardNumberError:	"Kehtetu kaardi number või bränd",
        	cvvError:			"Kehtetu CVV",
        	expiryMonthError:	"Kehtetu kehtivusaja lõpp",
        	expiryYearError:	"Kehtetu kehtivusaja lõpp",
        	taxNumberError:     "Kehtetu maksukohustuslase number",
        	generalTermsAndConditionsError:			"Palun andke nõusolek andmete edastamiseks",
        	emailOrAccountId:	"E-post või konto ID",
        	secureId:			"Turvatõend",
        	learnMore:			"Täpsem teave",
        	mmyy:				"KK / AA",
			ddmmyyyy:			"DD / MM / YYYY",
        	customerMobile:		"Mobiiltelefoni number (+78000001774)",
        	countryCodePhone:   "Riigi kood",
			mobile:				"Mobile Phone",
			qrcode: 			"QR-Code",
			paymentMode:		"Please select your preferred payment method:",
			mobilePhone:		"Mobiiltelefoni number",
			customerEmail:		"E-post",
        	register:		"Registreerige kohe",
        	billingCountryError: "Kehtetu riik",
        	billingStateError: "Kehtetu osariik",
        	billingCityError: "Kehtetu linn",
        	billingStreetError: "Kehtetu tänav",
        	billingStreetError2: "Kehtetu tänav",
			billingPostCodeError: "Kehtetu postiindeks",
			mobilePhoneError: "Phone number is required.",
			noSelectionError: "Select one of the two options.",
        	mobileError: "Kehtetu mobiilinumber",
			mobileContryCodeError: "Kehtetu riigi kood",
			birthDateError: "Invalid birth date. DD/MM/YYYY expected",
        	showOtherPaymentMethods: "Näita muid makseviise",
        	olpId: "SADAD konto ID",
        	birthDate: "Sünniaeg",
        	cvvHint: "3 numbrit teie kaardi tagaküljel.",
        	cvvHintAmex: "4 numbrit teie kaardi esiküljel.",
        	cvvHintMaestro: "3 numbrit teie kaardi tagaküljel, kui on määratud.",
        	mbwayEmailOrPhoneMandatory: "Palun täitke üks väljadest “e-post” või “Mobiiltelefoni number”",
            billingAddress: "Arve aadress",
        	billingCountryPlaceholder: "Palun valige",
        	billingStatePlaceholder: "Osariik/maakond",
        	billingCityPlaceholder: "Linn",
        	billingPostCodePlaceholder: "Postiindeks",
        	billingStreet1Placeholder: "Tänav aadressi rida 1",
        	billingStreet2Placeholder: "Tänav aadressi rida 2 (valikuline)",
        	billingStreet2PlaceholderMandatory: "Tänav aadressi rida 2",
        	supportMessage:"Makset ei saa teostada.<br/>Palun pöörduge klienditoe poole järgmise teabega:<br/>{{message}}<br/>ndc: {{ndc}}<br/>ajatempel: {{timestamp}}",
        	nationalIdentifier: "Riigi tunnuskood",
        	nationalIdentifierError: "Kehtetu riigi tunnuskood",
        	ikanoOpenInvoiceTermsAndCondition: "Tingimused",
        	ikanoOpenInvoiceAccept: "Olen lugenud ja nõustun tingimustega",
        	ikanoOpenInvoiceAcceptError: "Palun nõustuge tingimustega",
			insertCode: "Insert code here",
			mandateAuthorization: "By signing this mandate form, I authorize the creditor to send an instruction to my bank to debit my account in accordance with the instruction from the creditor.",
			mandateEntitlement: "As part of my rights, I am entitled to a refund from my bank under the terms and conditions of my agreement with my bank. A refund must be claimed within 8 weeks starting from the date on which my account was debited.",
			mandateConfirmation: "I confirm to be authorized for the aforementioned account to sign a mandate. I agree to the reduced direct debit pre-notification period of 1 calendar day. I certify that the mandate information provided is complete and accurate.",
			mandateConfirmationError: "Please agree to all the terms and conditions before continuing."
        },
        lv: {
        	accountBank:	"Bankas kods",
        	accountBankBic: "BIC jeb bankas kods",
        	accountBic:	    "BIC",
        	accountHolder:	"Konta turētājs",
        	accountId:		"ID",
        	accountNumber:	"Konta numurs",
        	accountNumberIban: "IBAN jeb konta numurs",
        	accountIban:	"IBAN",
			accountVerification: "Account verification",
        	bankName:		"Bankas nosaukums",
        	brand:			"Zīmols",
        	cancel:			"Atpakaļ",
        	cardHolder:		"Kartes turētājs",
        	cardNumber:		"Kartes numurs",
        	cvv:			"CVV",
        	country:		"Valsts",
        	expiryDate:		"Derīguma termiņš",
        	taxNumber:      "Nodokļu maksātāja numurs",
        	submit:			"Maksāt tūlīt",
        	nextStep:		"Turpināt",
        	moreBrands:     "More",
        	givenName:      "vārds",
        	surname:        "uzvārds",
        	billingAgreement: "Rēķinu noteikumi",
        	accountBankError:	"Nederīgs bankas kods",
        	accountBankBicError: "Nederīgs BIC jeb bankas kods",
        	accountBicError:	"Nederīgs BIC",
        	accountHolderError:	"Neatbilstošs konta turētājs",
        	accountNumberError:	"Nederīgs konta numurs",
        	accountNumberIbanError: "Nederīgs IBAN jeb konta numurs",
        	accountIbanError:   "Nederīgs IBAN",
        	cardHolderError:	"Neatbilstošs kartes turētājs",
        	surNameError:		"Neatbilstošs uzvārds",
        	givenNameError:		"Neatbilstošs vārds",
        	cardNumberError:	"Nederīgs kartes numurs vai zīmols",
        	cvvError:			"Nederīgs CVV",
        	expiryMonthError:	"Neatbilstošs derīguma termiņš",
        	expiryYearError:	"Neatbilstošs derīguma termiņš",
        	taxNumberError:     "Nederīgs nodokļu maksātāja numurs",
        	generalTermsAndConditionsError:			"Lūdzu, sniedziet savu piekrišanu datu nosūtīšanai",
        	emailOrAccountId:	"E-pasts vai konta ID",
        	secureId:			"Drošs ID",
        	learnMore:			"Uzzināt vairāk",
        	mmyy:				"MM / GG",
			ddmmyyyy:			"DD / MM / YYYY",
        	customerMobile:		"Mobilā tālruņa numurs (+78000001774)",
        	countryCodePhone:   "Valsts kods",
			mobile:				"Mobile Phone",
			qrcode: 			"QR-Code",
			paymentMode:		"Please select your preferred payment method:",
			mobilePhone:		"Mobilā tālruņa numurs",
			customerEmail:		"E-pasts",
        	register:		    "Reģistrēties tūlīt",
        	billingCountryError: "Neatbilstoša valsts",
        	billingStateError: "Neatbilstoša pašvaldība",
        	billingCityError: "Neatbilstoša pilsēta",
        	billingStreetError: "Neatbilstoša iela",
        	billingStreetError2: "Neatbilstoša iela",
			billingPostCodeError: "Neatbilstošs pasta indekss",
			mobilePhoneError: "Phone number is required.",
			noSelectionError: "Select one of the two options.",
        	mobileError: "Neatbilstošs mobilā tālruņa numurs",
			mobileContryCodeError: "Neatbilstošs valsts kods",
			birthDateError: "Invalid birth date. DD/MM/YYYY expected",
        	showOtherPaymentMethods: "Rādīt citus apmaksas veidus",
        	olpId: "SADAD konta ID",
        	birthDate: "Dzimšanas datums",
        	cvvHint: "3 cipari jūsu kartes aizmugurē.",
        	cvvHintAmex: "4 cipari jūsu kartes priekšpusē.",
        	cvvHintMaestro: "3 cipari jūsu kartes aizmugurē, ja norādīti.",
        	mbwayEmailOrPhoneMandatory: "Lūdzu, aizpildiet lauku “e-pasts” vai “mobilā tālruņa numurs”",
            billingAddress: "Rēķina nosūtīšanas adrese",
        	billingCountryPlaceholder: "Lūdzu, izvēlieties",
        	billingStatePlaceholder: "Pašvaldība/ciemats",
        	billingCityPlaceholder: "Pilsēta",
        	billingPostCodePlaceholder: "Pasta indekss",
        	billingStreet1Placeholder: "Ielas adrese, 1. rinda",
        	billingStreet2Placeholder: "Ielas adrese, 2. rinda (nav obligāti)",
        	billingStreet2PlaceholderMandatory: "Ielas adrese, 2. rinda",
        	supportMessage:"Maksājumu nav iespējams pabeigt.<br/>Lūdzu, sazinieties ar klientu atbalstu un sniedziet šo informāciju:<br/>{{message}}<br/>ndc: {{ndc}}<br/>laikspiedols: {{timestamp}}",
        	nationalIdentifier: "Valsts identifikators",
        	nationalIdentifierError: "Nederīgs valsts identifikators",
        	ikanoOpenInvoiceTermsAndCondition: "Noteikumi",
        	ikanoOpenInvoiceAccept: "Es izlasījis un piekrītu Noteikumiem",
        	ikanoOpenInvoiceAcceptError: "Lūdzu apstipriniet, ka piekrītat Noteikumiem",
			insertCode: "Insert code here",
			mandateAuthorization: "By signing this mandate form, I authorize the creditor to send an instruction to my bank to debit my account in accordance with the instruction from the creditor.",
			mandateEntitlement: "As part of my rights, I am entitled to a refund from my bank under the terms and conditions of my agreement with my bank. A refund must be claimed within 8 weeks starting from the date on which my account was debited.",
			mandateConfirmation: "I confirm to be authorized for the aforementioned account to sign a mandate. I agree to the reduced direct debit pre-notification period of 1 calendar day. I certify that the mandate information provided is complete and accurate.",
			mandateConfirmationError: "Please agree to all the terms and conditions before continuing."
        },
        lt: {
        	accountBank:	"Banko kodas",
        	accountBankBic: "BIC arba banko kodas",
        	accountBic:	    "BIC",
        	accountHolder:	"Sąskaitos turėtojas",
        	accountId:		"Identifikatorius",
        	accountNumber:	"Sąskaitos numeris",
        	accountNumberIban: "IBAN arba sąskaitos numeris",
        	accountIban:	"IBAN",
			accountVerification: "Account verification",
        	bankName:		"Banko pavadinimas",
        	brand:			"Rūšis",
        	cancel:			"Atgal",
        	cardHolder:		"Kortelės turėtojas",
        	cardNumber:		"Kortelės numeris",
        	cvv:			"Kortelės patvirtinimo numeris",
        	country:		"Šalis",
        	expiryDate:		"Galiojimo data",
        	taxNumber:      "Mokesčių mokėtojo identifikavimo kodas",
        	submit:			"Mokėti dabar",
        	nextStep:		"Tęsti",
        	moreBrands:     "More",
        	givenName:      "duotas vardas",
        	surname:        "pavardė",
        	billingAgreement: "Sąskaitos faktūros išrašymo sąlygos",
        	accountBankError:	"Neteisingas banko kodas",
        	accountBankBicError: "Neteisingas BIC arba banko kodas",
        	accountBicError:	"Neteisingas BIC",
        	accountHolderError:	"Neteisingas sąskaitos turėtojas",
        	accountNumberError:	"Neteisingas sąskaitos numeris",
        	accountNumberIbanError: "Neteisingas IBAN arba sąskaitos numeris",
        	accountIbanError:   "Neteisingas IBAN",
        	cardHolderError:	"Neteisingas sąskaitos turėtojas",
        	surNameError:		"Neteisinga pavardė",
        	givenNameError:		"Neteisingas vardas",
        	cardNumberError:	"Neteisingas kortelės numeris ar rūšis",
        	cvvError:			"Neteisingas kortelės patvirtinimo numeris",
        	expiryMonthError:	"Neteisinga galiojimo pabaigos data",
        	expiryYearError:	"Neteisinga galiojimo pabaigos data",
        	taxNumberError:     "Neteisingas mokesčių mokėtojo identifikavimo kodas",
        	generalTermsAndConditionsError:			"Prašome patvirtinti sutikimą duomenų perdavimui",
        	emailOrAccountId:	"El. paštas ar paskyros identifikatorius",
        	secureId:			"Saugusis identifikatorius",
        	learnMore:			"Sužinoti daugiau",
        	mmyy:				"MM / mm",
			ddmmyyyy:			"DD / MM / YYYY",
        	customerMobile:				"Mob. telefono numeris  (+78000001774)",
        	countryCodePhone:   "Šalies kodas",
			mobile:				"Mobile Phone",
			qrcode: 			"QR-Code",
			paymentMode:		"Please select your preferred payment method:",
			mobilePhone:		"Mob. telefono numeris",
			customerEmail:		"El. paštas",
        	register:		"Registruotis dabar",
        	billingCountryError: "Neteisinga šalis",
        	billingStateError: "Neteisinga valstija",
        	billingCityError: "Neteisingas miestas",
        	billingStreetError: "Neteisinga gatvė",
        	billingStreetError2: "Neteisinga gatvė",
			billingPostCodeError: "Neteisingas pašto kodas",
			mobilePhoneError: "Phone number is required.",
			noSelectionError: "Select one of the two options.",
        	mobileError: "Neteisingas mob. telefono numeris",
			mobileContryCodeError: "Neteisingas šalies kodas",
			birthDateError: "Invalid birth date. DD/MM/YYYY expected",
        	showOtherPaymentMethods: "Rodyti kitus mokėjimo būdus",
        	olpId: "SADAD paskyros identifikatorius",
        	birthDate: "Gimimo data",
        	cvvHint: "3 skaitmenys galinėje jūsų kortelės pusėje.",
        	cvvHintAmex: "4 skaitmenys priekinėje jūsų kortelės pusėje.",
        	cvvHintMaestro: "3 skaitmenys galinėje jūsų kortelės pusėje, jei nurodyta.",
        	mbwayEmailOrPhoneMandatory: "Užpildykite vieną iš laukelių: “el. paštas“ ar “mob. telefono numeris“",
            billingAddress: "Atsiskaitymo adresas",
        	billingCountryPlaceholder: "Pasirinkite",
        	billingStatePlaceholder: "Valstija / provincija",
        	billingCityPlaceholder: "Miestas",
        	billingPostCodePlaceholder: "Pašto kodas",
        	billingStreet1Placeholder: "1 adreso eilutė",
        	billingStreet2Placeholder: "2 adreso eilutė (pasirinktinai)",
        	billingStreet2PlaceholderMandatory: "2 adreso eilutė",
        	supportMessage:"Mokėjimo negalima užbaigti.<br/>Susisiekite su klientų aptarnavimo skyriumi ir pateikite šią informaciją:<br/>{{message}}<br/>ndc: {{ndc}}<br/>laiko žymė: {{timestamp}}",
        	nationalIdentifier: "Nacionalinis identifikatorius",
        	nationalIdentifierError: "Neteisingas nacionalinis identifikatorius",
        	ikanoOpenInvoiceTermsAndCondition: "Taisyklės ir sąlygos",
        	ikanoOpenInvoiceAccept: "Perskaičiau ir sutinku su taisyklėmis ir sąlygomis",
        	ikanoOpenInvoiceAcceptError: "Prašome patvirtinti taisykles ir sąlygas",
			insertCode: "Insert code here",
			mandateAuthorization: "By signing this mandate form, I authorize the creditor to send an instruction to my bank to debit my account in accordance with the instruction from the creditor.",
			mandateEntitlement: "As part of my rights, I am entitled to a refund from my bank under the terms and conditions of my agreement with my bank. A refund must be claimed within 8 weeks starting from the date on which my account was debited.",
			mandateConfirmation: "I confirm to be authorized for the aforementioned account to sign a mandate. I agree to the reduced direct debit pre-notification period of 1 calendar day. I certify that the mandate information provided is complete and accurate.",
			mandateConfirmationError: "Please agree to all the terms and conditions before continuing."
        },
        ca: {
        	accountBank:	"Codi bancari",
            accountBankBic: "BIC o codi bancari",
            accountBic:	    "BIC",
            accountHolder:	"Titular del compte",
            accountId:		"Identificador",
            accountNumber:	"Número de compte",
            accountNumberIban: "IBAN o número de compte",
            accountIban:	"IBAN",
			accountVerification: "Account verification",
            bankName:		"Nom del banc",
            brand:			"Tipus",
            cancel:			"Enrere",
            cardHolder:		"Titular de la targeta",
            cardNumber:		"Número de targeta",
            cvv:			"CVV",
            country:		"País",
            expiryDate:		"Data de caducitat",
            taxNumber:      "Número d’identificació fiscal",
            submit:			"Paga ara",
            nextStep:		"Continua",
            givenName:      "donat nom",
            surname:        "cognom",
            billingAgreement: "Termes i condicions de la factura",
            accountBankError:	"Codi bancari no vàlid",
            accountBankBicError: "BIC o codi bancari no vàlid",
            accountBicError:	"BIC no vàlid",
            accountHolderError:	"Titular del compte no vàlid",
            accountNumberError:	"Número de compte no vàlid",
            accountNumberIbanError: "IBAN o número de compte no vàlid",
            accountIbanError:   "IBAN no vàlid",
            cardHolderError:	"Titular de la targeta no vàlid",
            surNameError:		"Cognom no vàlid",
            givenNameError:		"Nom no vàlid",
            cardNumberError:	"Número o tipus de targeta no vàlid",
            cvvError:			"CVV no vàlid",
            expiryMonthError:	"Data de caducitat no vàlida",
            expiryYearError:	"Data de caducitat no vàlida",
            taxNumberError:     "Número d’identificació fiscal no vàlid",
            generalTermsAndConditionsError:			"Autoritzeu la transmissió de dades",
            emailOrAccountId:	"Correu electrònic o identificador del compte",
            secureId:			"Identificador segur",
            learnMore:			"Més informació",
            mmyy:				"MM / AA",
			ddmmyyyy:			"DD / MM / YYYY",
            customerMobile:				"Número de telèfon mòbil (+78000001774)",
            countryCodePhone:   "Codi de país",
			mobile:				"Mobile Phone",
			qrcode: 			"QR-Code",
			paymentMode:		"Please select your preferred payment method:",
			mobilePhone:		"Número de telèfon mòbil ",
			customerEmail:		"Correu electrònic",
            register:		"Registreu-vos",
            billingCountryError: "País no vàlid",
            billingStateError: "Estat no vàlid",
            billingCityError: "Ciutat no vàlida",
            billingStreetError: "Adreça no vàlida",
            billingStreetError2: "Adreça no vàlida",
			billingPostCodeError: "Codi postal no vàlid",
			mobilePhoneError: "Phone number is required.",
			noSelectionError: "Select one of the two options.",
            mobileError: "Número de telèfon mòbil no vàlid",
			mobileContryCodeError: "Codi de país no vàlid",
			birthDateError: "Invalid birth date. DD/MM/YYYY expected",
            showOtherPaymentMethods: "Mostra altres mètodes de pagament",
            olpId: "Identificador de compte SADAD",
            birthDate: "Data de naixement",
            cvvHint: "Els 3 dígits del revers de la targeta.",
            cvvHintAmex: "Els 4 dígits de l’anvers de la targeta.",
            cvvHintMaestro: "Els 3 dígits del revers de la targeta si us ho indiquen.",
            mbwayEmailOrPhoneMandatory: "Empleneu un dels camps «Correu electrònic» o «Número de telèfon mòbil»",
            billingAddress: "Adreça de facturació",
            billingCountryPlaceholder: "Seleccioneu",
            billingStatePlaceholder: "Estat/província",
            billingCityPlaceholder: "Ciutat",
            billingPostCodePlaceholder: "Codi postal",
            billingStreet1Placeholder: "Línia 1 adreça postal",
            billingStreet2Placeholder: "Línia 2 adreça postal (opcional)",
            billingStreet2PlaceholderMandatory: "Línia 2 adreça postal",
            supportMessage:"El pagament no s’ha pogut completar.<br/>Poseu-vos en contacte amb el servei d'ajuda i faciliteu-los les dades següents:<br/>{{message}}<br/>ndc: {{ndc}}<br/>timestamp: {{timestamp}}",
            nationalIdentifier: "Identificador nacional",
            nationalIdentifierError: "Identificador nacional no vàlid",
            ikanoOpenInvoiceTermsAndCondition: "Termes i condicions",
            ikanoOpenInvoiceAccept: "He llegit els termes i condicions i els accepto",
            ikanoOpenInvoiceAcceptError: "Accepteu els termes i condicions",
			insertCode: "Insert code here",
			mandateAuthorization: "By signing this mandate form, I authorize the creditor to send an instruction to my bank to debit my account in accordance with the instruction from the creditor.",
			mandateEntitlement: "As part of my rights, I am entitled to a refund from my bank under the terms and conditions of my agreement with my bank. A refund must be claimed within 8 weeks starting from the date on which my account was debited.",
			mandateConfirmation: "I confirm to be authorized for the aforementioned account to sign a mandate. I agree to the reduced direct debit pre-notification period of 1 calendar day. I certify that the mandate information provided is complete and accurate.",
			mandateConfirmationError: "Please agree to all the terms and conditions before continuing."
        },
        eu: {
			accountBank:	"Bankuaren kodea",
            accountBankBic: "BIC edo bankuaren kodea",
            accountBic:	    "BIC kodea",
            accountHolder:	"Kontuaren titularra",
            accountId:		"IDa",
            accountNumber:	"Kontuaren zenbakia",
            accountNumberIban: "IBAN edo kontuaren zenbakia",
            accountIban:	"IBAN kodea",
			accountVerification: "Account verification",
            bankName:		"Bankuaren izena",
            brand:			"Marka",
            cancel:			"Atzera",
            cardHolder:		"Txartelaren titularra",
            cardNumber:		"Txartelaren zenbakia",
            cvv:			"CVV kodea",
            country:		"Herrialdea",
            expiryDate:		"Iraungitze-data",
            taxNumber:      "Identifikazio fiskaleko zenbakia",
            submit:			"Ordaindu orain",
            nextStep:		"Egin aurrera",
            givenName:      "emandako izena",
            surname:        "abizenak",
            billingAgreement: "Fakturaren baldintzak",
            accountBankError:	"Bankuaren kodea ez da zuzena",
            accountBankBicError: "BIC edo bankuaren kodea ez da zuzena",
            accountBicError:	"BIC kodea ez da zuzena",
            accountHolderError:	"Kontuaren titularra ez da zuzena",
            accountNumberError:	"Kontuaren zenbakia ez da zuzena",
            accountNumberIbanError: "IBAN edo kontuaren zenbakia ez da zuzena",
            accountIbanError:   "IBAN kodea ez da zuzena",
            cardHolderError:	"Txartelaren titularra ez da zuzena",
            surNameError:		"Abizena ez da zuzena",
            givenNameError:		"Zehaztutako izena ez da zuzena",
            cardNumberError:	"Txartelaren zenbakia edo marka ez da zuzena",
            cvvError:			"CVV kodea ez da zuzena",
            expiryMonthError:	"Iraungitze-data ez da zuzena",
            expiryYearError:	"Iraungitze-data ez da zuzena",
            taxNumberError:     "Identifikazio fiskaleko zenbakia ez da zuzena",
            generalTermsAndConditionsError:			"Eman baimena datuak transferitzeko",
            emailOrAccountId:	"Helbide elektronikoa edo kontuaren IDa",
            secureId:			"ID segurua",
            learnMore:			"Lortu informazio gehiago",
            mmyy:				"YY / MM",
			ddmmyyyy:			"DD / MM / YYYY",
            customerMobile:				"Telefono mugikorraren zenbakia (+78000001774)",
            countryCodePhone:   "Herrialdeko kodea",
			mobile:				"Mobile Phone",
			qrcode: 			"QR-Code",
			paymentMode:		"Please select your preferred payment method:",
			mobilePhone:		"Telefono mugikorraren zenbakia",
			customerEmail:		"Helbide elektronikoa",
            register:		"Eman izena orain",
            billingCountryError: "Herrialdea ez da zuzena",
            billingStateError: "Estatua ez da zuzena",
            billingCityError: "Herria ez da zuzena",
            billingStreetError: "Kalea ez da zuzena",
            billingStreetError2: "Kalea ez da zuzena",
			billingPostCodeError: "Posta-kodea ez da zuzena",
			mobilePhoneError: "Phone number is required.",
			noSelectionError: "Select one of the two options.",
            mobileError: "Telefono mugikorraren zenbakia ez da zuzena",
			mobileContryCodeError: "Herrialdeko kodea ez da zuzena",
			birthDateError: "Invalid birth date. DD/MM/YYYY expected",
            showOtherPaymentMethods: "Erakutsi ordaintzeko beste bide batzuk",
            olpId: "SADAD kontuaren IDa",
            birthDate: "Jaiotze-data",
            cvvHint: "Txartelaren atzealdean dauden hiru digituak.",
            cvvHintAmex: "Txartelaren aurrealdean dauden lau digituak.",
            cvvHintMaestro: "Txartelaren atzeko aldean dauden hiru digituak, hala badagokio.",
            mbwayEmailOrPhoneMandatory: "Bete “Helbide elektronikoa” edo “Telefono mugikorraren zenbakia” eremuak",
            billingAddress: "Fakturazio-helbidea",
            billingCountryPlaceholder: "Hautatu",
            billingStatePlaceholder: "Estatua/probintzia",
            billingCityPlaceholder: "Herria",
            billingPostCodePlaceholder: "ZIP/Posta-kodea",
            billingStreet1Placeholder: "Helbidea idazteko 1. lerroa",
            billingStreet2Placeholder: "Helbidea idazteko 2. lerroa (aukerakoa)",
            billingStreet2PlaceholderMandatory: "Helbidea idazteko 2. lerroa",
            supportMessage:"Ezin da osatu ordainketa.<br/>Jarri laguntza-zerbitzuarekin harremanetan eta erabili informazio hau:<br/>{{message}}<br/>ndc: {{ndc}}<br/>timestamp: {{timestamp}}",
            nationalIdentifier: "Identifikadore nazionala",
            nationalIdentifierError: "Identifikadore nazionala ez da zuzena",
            ikanoOpenInvoiceTermsAndCondition: "Baldintzak",
            ikanoOpenInvoiceAccept: "Baldintzak irakurri ditut eta onartu egiten dut",
            ikanoOpenInvoiceAcceptError: "Onartu Baldintzak",
			insertCode: "Insert code here",
			mandateAuthorization: "By signing this mandate form, I authorize the creditor to send an instruction to my bank to debit my account in accordance with the instruction from the creditor.",
			mandateEntitlement: "As part of my rights, I am entitled to a refund from my bank under the terms and conditions of my agreement with my bank. A refund must be claimed within 8 weeks starting from the date on which my account was debited.",
			mandateConfirmation: "I confirm to be authorized for the aforementioned account to sign a mandate. I agree to the reduced direct debit pre-notification period of 1 calendar day. I certify that the mandate information provided is complete and accurate.",
			mandateConfirmationError: "Please agree to all the terms and conditions before continuing."
		},
      id:   {
            brand: 		 "Merek",
            cardNumber:  "Nomor Kartu",
            expiryDate:  "Tanggal Kedaluwarsa",
            cardHolder:  "Pemegang Kartu",
            submit: 	 "Bayar Sekarang",
            mmyy:        "MM / YY",
            cvv:  		 "CVV",
            cancel:      "Kembali",
            nextStep:    "Lanjutkan",
            cardHolderError: "Pemegang kartu tak valid",
            surNameError: "Nama belakang tak valid",
            givenNameError:   "Nama depan tak valid",
            cardNumberError:  "Nomor atau merek kartu tak valid",
            cvvError:     "CVV tak valid",
            expiryMonthError:  "Tanggal kedaluwarsa tak valid",
            expiryYearError:   "Tanggal kedaluwarsa tak valid",
            cvvHint:      "3 digit di bagian belakang kartu.",
            cvvHintAmex:  "4 digit di bagian depan kartu.",
            cvvHintMaestro:    "3 digit di bagian belakang kartu jika disebutkan.",
            supportMessage:    "Pembayaran tak bisa diselesaikan.<br/>Hubungi layanan dukungan dengan informasi berikut:<br/>{{message}}<br/>ndc: {{ndc}}<br/>timestamp: {{timestamp}}"
        },
      th:   {
            brand: 		 "ประเภทของบัตร",
            cardNumber:  "หมายเลขบัตร",
            expiryDate:  "วันหมดอายุ",
            cardHolder:  "ชื่อผู้ถือบัตร",
            submit: 	 "ชำระเงินทันที",
            mmyy:        "ดด / ปป",
            cvv:  		 "CVV"
      },
      vi:   {
            brand: 		 "Loại thẻ",
            cardNumber:  "Số thẻ",
            expiryDate:  "Ngày hết hạn",
            cardHolder:  "Tên chủ thẻ",
            submit: 	 "Thanh toán",
            mmyy:        "MM / YY",
            cvv:  		 "CVV"
      }
	};
    Language.el = Language.gr;
    //Backwards compatibility
	Language.dk = Language.da;
    Language.se = Language.sv;
    Language["in"] = Language.id;

	return Language;
});
define('module/Locale',['require','module/Options'],function(require){
    var Options = require('module/Options');
    var languageCountryRegex = /^[a-z]{2}-[A-Z]{2}$/g;
    var languageRegex = /^[a-z]{2}$/g;

    var Locale = {};

    Locale.update = function(){
        Locale.language = 'en';
        Locale.country = 'US';
        var localeInput = Options.locale;
        if(localeInput){
            if(languageCountryRegex.test(localeInput)){
                var split = localeInput.split('-');
                Locale.language = split[0];
                Locale.country = split[1];
            }
            else if(languageRegex.test(localeInput)){
                Locale.language = localeInput;
            }
        }
    };
    Locale.update();
	return Locale;
});

//     Underscore.js 1.7.0
//     http://underscorejs.org
//     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    concat           = ArrayProto.concat,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind;

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.7.0';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var createCallback = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      case 2: return function(value, other) {
        return func.call(context, value, other);
      };
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  // A mostly-internal function to generate callbacks that can be applied
  // to each element in a collection, returning the desired result — either
  // identity, an arbitrary callback, a property matcher, or a property accessor.
  _.iteratee = function(value, context, argCount) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return createCallback(value, context, argCount);
    if (_.isObject(value)) return _.matches(value);
    return _.property(value);
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    if (obj == null) return obj;
    iteratee = createCallback(iteratee, context);
    var i, length = obj.length;
    if (length === +length) {
      for (i = 0; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    if (obj == null) return [];
    iteratee = _.iteratee(iteratee, context);
    var keys = obj.length !== +obj.length && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length),
        currentKey;
    for (var index = 0; index < length; index++) {
      currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  var reduceError = 'Reduce of empty array with no initial value';

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = function(obj, iteratee, memo, context) {
    if (obj == null) obj = [];
    iteratee = createCallback(iteratee, context, 4);
    var keys = obj.length !== +obj.length && _.keys(obj),
        length = (keys || obj).length,
        index = 0, currentKey;
    if (arguments.length < 3) {
      if (!length) throw new TypeError(reduceError);
      memo = obj[keys ? keys[index++] : index++];
    }
    for (; index < length; index++) {
      currentKey = keys ? keys[index] : index;
      memo = iteratee(memo, obj[currentKey], currentKey, obj);
    }
    return memo;
  };

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = function(obj, iteratee, memo, context) {
    if (obj == null) obj = [];
    iteratee = createCallback(iteratee, context, 4);
    var keys = obj.length !== + obj.length && _.keys(obj),
        index = (keys || obj).length,
        currentKey;
    if (arguments.length < 3) {
      if (!index) throw new TypeError(reduceError);
      memo = obj[keys ? keys[--index] : --index];
    }
    while (index--) {
      currentKey = keys ? keys[index] : index;
      memo = iteratee(memo, obj[currentKey], currentKey, obj);
    }
    return memo;
  };

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var result;
    predicate = _.iteratee(predicate, context);
    _.some(obj, function(value, index, list) {
      if (predicate(value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    if (obj == null) return results;
    predicate = _.iteratee(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(_.iteratee(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    if (obj == null) return true;
    predicate = _.iteratee(predicate, context);
    var keys = obj.length !== +obj.length && _.keys(obj),
        length = (keys || obj).length,
        index, currentKey;
    for (index = 0; index < length; index++) {
      currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    if (obj == null) return false;
    predicate = _.iteratee(predicate, context);
    var keys = obj.length !== +obj.length && _.keys(obj),
        length = (keys || obj).length,
        index, currentKey;
    for (index = 0; index < length; index++) {
      currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given value (using `===`).
  // Aliased as `include`.
  _.contains = _.include = function(obj, target) {
    if (obj == null) return false;
    if (obj.length !== +obj.length) obj = _.values(obj);
    return _.indexOf(obj, target) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      return (isFunc ? method : value[method]).apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matches(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matches(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = obj.length === +obj.length ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value > result) {
          result = value;
        }
      }
    } else {
      iteratee = _.iteratee(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = obj.length === +obj.length ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value < result) {
          result = value;
        }
      }
    } else {
      iteratee = _.iteratee(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var set = obj && obj.length === +obj.length ? obj : _.values(obj);
    var length = set.length;
    var shuffled = Array(length);
    for (var index = 0, rand; index < length; index++) {
      rand = _.random(0, index);
      if (rand !== index) shuffled[index] = shuffled[rand];
      shuffled[rand] = set[index];
    }
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (obj.length !== +obj.length) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    iteratee = _.iteratee(iteratee, context);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iteratee(value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iteratee, context) {
      var result = {};
      iteratee = _.iteratee(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key]++; else result[key] = 1;
  });

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = _.iteratee(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = low + high >>> 1;
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (obj.length === +obj.length) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return obj.length === +obj.length ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(obj, predicate, context) {
    predicate = _.iteratee(predicate, context);
    var pass = [], fail = [];
    _.each(obj, function(value, key, obj) {
      (predicate(value, key, obj) ? pass : fail).push(value);
    });
    return [pass, fail];
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[0];
    if (n < 0) return [];
    return slice.call(array, 0, n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N. The **guard** check allows it to work with
  // `_.map`.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array. The **guard** check allows it to work with `_.map`.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return slice.call(array, Math.max(array.length - n, 0));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array. The **guard**
  // check allows it to work with `_.map`.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, output) {
    if (shallow && _.every(input, _.isArray)) {
      return concat.apply(output, input);
    }
    for (var i = 0, length = input.length; i < length; i++) {
      var value = input[i];
      if (!_.isArray(value) && !_.isArguments(value)) {
        if (!strict) output.push(value);
      } else if (shallow) {
        push.apply(output, value);
      } else {
        flatten(value, shallow, strict, output);
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false, []);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (array == null) return [];
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = _.iteratee(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = array.length; i < length; i++) {
      var value = array[i];
      if (isSorted) {
        if (!i || seen !== value) result.push(value);
        seen = value;
      } else if (iteratee) {
        var computed = iteratee(value, i, array);
        if (_.indexOf(seen, computed) < 0) {
          seen.push(computed);
          result.push(value);
        }
      } else if (_.indexOf(result, value) < 0) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(flatten(arguments, true, true, []));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    if (array == null) return [];
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = array.length; i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      for (var j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = flatten(slice.call(arguments, 1), true, true, []);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function(array) {
    if (array == null) return [];
    var length = _.max(arguments, 'length').length;
    var results = Array(length);
    for (var i = 0; i < length; i++) {
      results[i] = _.pluck(arguments, i);
    }
    return results;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    if (list == null) return {};
    var result = {};
    for (var i = 0, length = list.length; i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function(array, item, isSorted) {
    if (array == null) return -1;
    var i = 0, length = array.length;
    if (isSorted) {
      if (typeof isSorted == 'number') {
        i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;
      } else {
        i = _.sortedIndex(array, item);
        return array[i] === item ? i : -1;
      }
    }
    for (; i < length; i++) if (array[i] === item) return i;
    return -1;
  };

  _.lastIndexOf = function(array, item, from) {
    if (array == null) return -1;
    var idx = array.length;
    if (typeof from == 'number') {
      idx = from < 0 ? idx + from + 1 : Math.min(idx, from + 1);
    }
    while (--idx >= 0) if (array[idx] === item) return idx;
    return -1;
  };

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = step || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Reusable constructor function for prototype setting.
  var Ctor = function(){};

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    var args, bound;
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    args = slice.call(arguments, 2);
    bound = function() {
      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
      Ctor.prototype = func.prototype;
      var self = new Ctor;
      Ctor.prototype = null;
      var result = func.apply(self, args.concat(slice.call(arguments)));
      if (_.isObject(result)) return result;
      return self;
    };
    return bound;
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    return function() {
      var position = 0;
      var args = boundArgs.slice();
      for (var i = 0, length = args.length; i < length; i++) {
        if (args[i] === _) args[i] = arguments[position++];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return func.apply(this, args);
    };
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var i, length = arguments.length, key;
    if (length <= 1) throw new Error('bindAll must be passed function names');
    for (i = 1; i < length; i++) {
      key = arguments[i];
      obj[key] = _.bind(obj[key], obj);
    }
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = hasher ? hasher.apply(this, arguments) : key;
      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){
      return func.apply(null, args);
    }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = function(func) {
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
  };

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        clearTimeout(timeout);
        timeout = null;
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;

      if (last < wait && last > 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed after being called N times.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed before being called N times.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      } else {
        func = null;
      }
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  // Object Functions
  // ----------------

  // Retrieve the names of an object's properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = function(obj) {
    if (!_.isObject(obj)) return obj;
    var source, prop;
    for (var i = 1, length = arguments.length; i < length; i++) {
      source = arguments[i];
      for (prop in source) {
        if (hasOwnProperty.call(source, prop)) {
            obj[prop] = source[prop];
        }
      }
    }
    return obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(obj, iteratee, context) {
    var result = {}, key;
    if (obj == null) return result;
    if (_.isFunction(iteratee)) {
      iteratee = createCallback(iteratee, context);
      for (key in obj) {
        var value = obj[key];
        if (iteratee(value, key, obj)) result[key] = value;
      }
    } else {
      var keys = concat.apply([], slice.call(arguments, 1));
      obj = new Object(obj);
      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];
        if (key in obj) result[key] = obj[key];
      }
    }
    return result;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj, iteratee, context) {
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
    } else {
      var keys = _.map(concat.apply([], slice.call(arguments, 1)), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  };

  // Fill in a given object with default properties.
  _.defaults = function(obj) {
    if (!_.isObject(obj)) return obj;
    for (var i = 1, length = arguments.length; i < length; i++) {
      var source = arguments[i];
      for (var prop in source) {
        if (obj[prop] === void 0) obj[prop] = source[prop];
      }
    }
    return obj;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
    }
    if (typeof a != 'object' || typeof b != 'object') return false;
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }
    // Objects with different constructors are not equivalent, but `Object`s
    // from different frames are.
    var aCtor = a.constructor, bCtor = b.constructor;
    if (
      aCtor !== bCtor &&
      // Handle Object.create(x) cases
      'constructor' in a && 'constructor' in b &&
      !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
        _.isFunction(bCtor) && bCtor instanceof bCtor)
    ) {
      return false;
    }
    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);
    var size, result;
    // Recursively compare objects and arrays.
    if (className === '[object Array]') {
      // Compare array lengths to determine if a deep comparison is necessary.
      size = a.length;
      result = size === b.length;
      if (result) {
        // Deep compare the contents, ignoring non-numeric properties.
        while (size--) {
          if (!(result = eq(a[size], b[size], aStack, bStack))) break;
        }
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      size = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      result = _.keys(b).length === size;
      if (result) {
        while (size--) {
          // Deep compare each member
          key = keys[size];
          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
        }
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return result;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b, [], []);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (_.isArray(obj) || _.isString(obj) || _.isArguments(obj)) return obj.length === 0;
    for (var key in obj) if (_.has(obj, key)) return false;
    return true;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return _.has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around an IE 11 bug.
  if (typeof /./ !== 'function') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj !== +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  _.property = function(key) {
    return function(obj) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of `key:value` pairs.
  _.matches = function(attrs) {
    var pairs = _.pairs(attrs), length = pairs.length;
    return function(obj) {
      if (obj == null) return !length;
      obj = new Object(obj);
      for (var i = 0; i < length; i++) {
        var pair = pairs[i], key = pair[0];
        if (pair[1] !== obj[key] || !(key in obj)) return false;
      }
      return true;
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = createCallback(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

   // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property) {
    if (object == null) return void 0;
    var value = object[property];
    return _.isFunction(value) ? object[property]() : value;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(obj) {
    return this._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result.call(this, func.apply(_, args));
      };
    });
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return result.call(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result.call(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}.call(this));
/**
 * Uses http://underscorejs.org/ and adds underscore methods to Util
 */
define('module/Util',['require','jquery','underscore'],function(require){
    var $ = require('jquery');
    var underscore = require('underscore');
    // Give control of the "_" variable back to its previous owner
    underscore = underscore.noConflict();

    // If you specify a variable name in this manner, the properties of data won’t be available as variables.
    // That has the advantage that Underscore won’t have to use a with statement and the template function will be faster.
    underscore.templateSettings.variable = 'obj';

    var Util = {};
    
    Util.ucfirst = function(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
    };
    
    Util.trim = function(text) {
        return text == null ? "" : (text + "").trim();
    };
    
    Util.trimAll = function(text) {
        return text == null ? "" : (text + "").replace(/\s/g, "");
    };
    
    Util.isNullOrUndefined = function(obj){
        return underscore.isNull(obj) || underscore.isUndefined(obj);
    };

    Util.isBlank = function(str) {
        return (!str || /^\s*$/.test(str));
    };

    /**
     * Will strip all the spaces and - signs from a raw card number that respect the widget formatting leaving only a
     * numeric value. Ex: 5105 1051 0510 5100 will become 5105105105105100.
     * */
    Util.stripRawCardNumber = function(val)  {
        val = (val + "").replace(/-/g, "");
        return Util.parseEasternNumber(val);
    };

    Util.parseEasternNumber = function(num){
         if(Util.isNullOrUndefined(num) || Util.isBlank(num)){
            return;
         }
         num = Util.trimAll(num);
         var result = num.replace(/[\u0660-\u0669]/g, function (d) { return d.charCodeAt(0) - 1632;});
         return result;
    };

    Util.isLeapYear = function(year){
        if ( year % 400 === 0 ) return true;
        else if ( year % 100 === 0 ) return false;
        else if ( year % 4 === 0 ) return true;
        else return false;
    };

    Util.isValidDate = function(day, month, year) {
        
        if ((month < 1) || (month > 12)) {
            return false;
        }

        if ((month === 1) || (month === 3) || (month === 5) || (month === 7) ||
            (month === 8) || (month === 10) || (month === 12)) {
            if ((day < 1) || (day > 31)) {
                return false;
            }
        }
        else if ((month === 4) || (month === 6) ||
                (month === 9) || (month === 11)) {
            if ((day < 1) || (day > 30)) {
                return false;
            }
        }
        else if (month === 2) {
            if ((year === undefined) || (Util.isLeapYear(year))) {
                if ((day < 1) || (day > 29)) {
                    return false;
                }
            }
            else {
                if ((day < 1) || (day > 28)) {
                    return false;
                }
            }
        }
        return true;
    };

    /**
     * Extract day, month, year from a string
     * @param {string} ddmmyyyy the date formatted as dd/mm/yyyy
     * @return an object containing the extracted elements, or null if date is not properly formatted
     */
    Util.parseDate = function(ddmmyyyy) {
        if (!ddmmyyyy) {
            return null;
        }

        ddmmyyyy = Util.parseEasternNumber(ddmmyyyy);
        

        var regex = /^(\d{2})\/(\d{2})\/(\d{4})$/;
        var dateElements = regex.exec(ddmmyyyy);
        if (dateElements === null){
            return null;
        }

        var day = dateElements[1];
        var month = dateElements[2];
        var year = dateElements[3];

        if(!Util.isValidDate(Number(day), Number(month), Number(year))) { 
            return null;
        }

        return {
            day: day,
            month: month,
            year: year
        };
        
    };

    Util.cleanObjectFunctions = function(obj){
        var clone = underscore.clone(obj);
        for(var property in clone){
            if( $.isFunction(clone[property]) ){
                delete clone[property];
            }
        }
        return clone;
    };

    Util.getWindowLocationOrigin=function(){
        return window.location.origin;
    };

    Util.getOrigin=function(){
        var origin = Util.getWindowLocationOrigin();
        //In IE, window.location.origin is not there... We need to help the browser.
        if (!origin) {
          return window.location.protocol + "//" +
              window.location.hostname + (window.location.port ? ':' + window.location.port : '');
        }

        //This might be a case when payment widget is created in the raw html, f.e. in the Android's WebView
        if (origin === "null") {
            return null;
        }

        return origin;
    };


    /**
     * Extract an individual cookie value from current browser cookie string for the the domain
     * eg if current cookie string for the domain is
     * name1=value1; name2=value2; name3=value3;
     * then getCookie('name2') will return 'value2'
     * @param {string} cookieName the name of the cookie to be extracted
     * @return a string containing the cookie value
     */
    Util.getCookie = function(cookieName) {
        try {
            var cookieValue = document.cookie.match('(^|;) ?' + cookieName + '=([^;]*)(;|$)');
            return cookieValue ? cookieValue[2] : null;
        } catch(e) {
            console.log("cannot retrieve cookie " + e.toString());
        }
        return null;
    };

    /**
     * Generates RFC4122 compliant version 4 UUID.
     */
    Util.generateUuid = function() {
        var cryptoObj = window.crypto || window.msCrypto;

        var arraySize = 16;
        var randomBytes = new Uint8Array(arraySize);
        cryptoObj.getRandomValues(randomBytes);

        randomBytes[6] = (randomBytes[6] & 0x0f) | 0x40;
        randomBytes[8] = (randomBytes[8] & 0x3f) | 0x80;

        var hexArray = new Array(arraySize);
        for (var i = 0; i < arraySize; ++i) {
            hexArray[i] = (randomBytes[i] + 0x100).toString(16).substring(1);
        }

        return hexArray.join("");
    };

    // extend util with underscore methods
    Util = $.extend(Util, underscore);
    
    return Util;
});

/**
 * I18n holds only the set language.
 * This is more memory efficient and faster to look up.
 */
define('module/I18n',['require','jquery','module/Language','module/Locale','module/Options','module/Util'],function(require){
    var $ = require("jquery");
    var Language = require("module/Language");
    var Locale = require("module/Locale");
    var Options = require("module/Options");
    var Util = require("module/Util");

    // merchant can specify any locale.language. we fall back to en if specified lang is not found
    var lang = Language[Locale.language] ? Language[Locale.language] : Language.en;

    var deep = true;
    var target = {};
    // merge english with lang, so languages with missing keys will fall back to the english values
    var I18n = $.extend(deep, target, Language.en, lang);

    // merge custom labels, placeholder and error messages. This are set up in wpwlOptions
    I18n = $.extend(deep, I18n, Options.labels, Options.errorMessages, Options.placeholders);

    I18n.translate = function(key, paramsMap) {
        var text = I18n[key];
        if (text && paramsMap) {
            try {
                var compiledTemplate = Util.template(text,  {interpolate: /\{\{(.+?)\}\}/g, variable:''});
                text = compiledTemplate(paramsMap);
            } catch(e) {
                console.log("failed to translate " + key);
            }
        }

        return text;
    };

    return I18n;
});

!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define('dompurify',t):e.DOMPurify=t()}(this,function(){"use strict";function e(e,t){for(var n=t.length;n--;)"string"==typeof t[n]&&(t[n]=t[n].toLowerCase()),e[t[n]]=!0;return e}function t(e){var t={},n=void 0;for(n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t}function n(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function o(){var x=arguments.length>0&&void 0!==arguments[0]?arguments[0]:A(),S=function(e){return o(e)};if(S.version="1.0.5",S.removed=[],!x||!x.document||9!==x.document.nodeType)return S.isSupported=!1,S;var k=x.document,w=!1,E=x.document,L=x.DocumentFragment,O=x.HTMLTemplateElement,M=x.Node,D=x.NodeFilter,N=x.NamedNodeMap,_=void 0===N?x.NamedNodeMap||x.MozNamedAttrMap:N,R=x.Text,C=x.Comment,F=x.DOMParser;if("function"==typeof O){var z=E.createElement("template");z.content&&z.content.ownerDocument&&(E=z.content.ownerDocument)}var H=E,I=H.implementation,j=H.createNodeIterator,P=H.getElementsByTagName,W=H.createDocumentFragment,U=k.importNode,B={};S.isSupported=I&&void 0!==I.createHTMLDocument&&9!==E.documentMode;var G=f,q=p,V=h,Y=g,K=v,X=b,$=y,J=null,Q=e({},[].concat(n(r),n(i),n(a),n(l),n(s))),Z=null,ee=e({},[].concat(n(c),n(d),n(u),n(m))),te=null,ne=null,oe=!0,re=!0,ie=!1,ae=!1,le=!1,se=!1,ce=!1,de=!1,ue=!1,me=!1,fe=!1,pe=!0,he=!0,ge={},ye=e({},["audio","head","math","script","style","template","svg","video"]),ve=e({},["audio","video","img","source","image"]),be=e({},["alt","class","for","id","label","name","pattern","placeholder","summary","title","value","style","xmlns"]),Te=null,Ae=E.createElement("form"),xe=function(o){"object"!==(void 0===o?"undefined":T(o))&&(o={}),J="ALLOWED_TAGS"in o?e({},o.ALLOWED_TAGS):Q,Z="ALLOWED_ATTR"in o?e({},o.ALLOWED_ATTR):ee,te="FORBID_TAGS"in o?e({},o.FORBID_TAGS):{},ne="FORBID_ATTR"in o?e({},o.FORBID_ATTR):{},ge="USE_PROFILES"in o&&o.USE_PROFILES,oe=!1!==o.ALLOW_ARIA_ATTR,re=!1!==o.ALLOW_DATA_ATTR,ie=o.ALLOW_UNKNOWN_PROTOCOLS||!1,ae=o.SAFE_FOR_JQUERY||!1,le=o.SAFE_FOR_TEMPLATES||!1,se=o.WHOLE_DOCUMENT||!1,ue=o.RETURN_DOM||!1,me=o.RETURN_DOM_FRAGMENT||!1,fe=o.RETURN_DOM_IMPORT||!1,de=o.FORCE_BODY||!1,pe=!1!==o.SANITIZE_DOM,he=!1!==o.KEEP_CONTENT,$=o.ALLOWED_URI_REGEXP||$,le&&(re=!1),me&&(ue=!0),ge&&(J=e({},[].concat(n(s))),Z=[],!0===ge.html&&(e(J,r),e(Z,c)),!0===ge.svg&&(e(J,i),e(Z,d),e(Z,m)),!0===ge.svgFilters&&(e(J,a),e(Z,d),e(Z,m)),!0===ge.mathMl&&(e(J,l),e(Z,u),e(Z,m))),o.ADD_TAGS&&(J===Q&&(J=t(J)),e(J,o.ADD_TAGS)),o.ADD_ATTR&&(Z===ee&&(Z=t(Z)),e(Z,o.ADD_ATTR)),o.ADD_URI_SAFE_ATTR&&e(be,o.ADD_URI_SAFE_ATTR),he&&(J["#text"]=!0),se&&e(J,["html","head","body"]),Object&&"freeze"in Object&&Object.freeze(o),Te=o},Se=function(e){S.removed.push({element:e});try{e.parentNode.removeChild(e)}catch(t){e.outerHTML=""}},ke=function(e,t){try{S.removed.push({attribute:t.getAttributeNode(e),from:t})}catch(e){S.removed.push({attribute:null,from:t})}t.removeAttribute(e)},we=function(e){var t=void 0;if(de&&(e="<remove></remove>"+e),w)try{t=(new F).parseFromString(e,"text/html")}catch(e){}if(!t||!t.documentElement){var n=(t=I.createHTMLDocument("")).body;n.parentNode.removeChild(n.parentNode.firstElementChild),n.outerHTML=e}return P.call(t,se?"html":"body")[0]};S.isSupported&&function(){try{we('<svg><p><style><img src="</style><img src=x onerror=alert(1)//">').querySelector("svg img")&&(w=!0)}catch(e){}}();var Ee=function(e){return j.call(e.ownerDocument||e,e,D.SHOW_ELEMENT|D.SHOW_COMMENT|D.SHOW_TEXT,function(){return D.FILTER_ACCEPT},!1)},Le=function(e){return!(e instanceof R||e instanceof C)&&!("string"==typeof e.nodeName&&"string"==typeof e.textContent&&"function"==typeof e.removeChild&&e.attributes instanceof _&&"function"==typeof e.removeAttribute&&"function"==typeof e.setAttribute)},Oe=function(e){return"object"===(void 0===M?"undefined":T(M))?e instanceof M:e&&"object"===(void 0===e?"undefined":T(e))&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName},Me=function(e,t,n){B[e]&&B[e].forEach(function(e){e.call(S,t,n,Te)})},De=function(e){var t=void 0;if(Me("beforeSanitizeElements",e,null),Le(e))return Se(e),!0;var n=e.nodeName.toLowerCase();if(Me("uponSanitizeElement",e,{tagName:n,allowedTags:J}),!J[n]||te[n]){if(he&&!ye[n]&&"function"==typeof e.insertAdjacentHTML)try{e.insertAdjacentHTML("AfterEnd",e.innerHTML)}catch(e){}return Se(e),!0}return!ae||e.firstElementChild||e.content&&e.content.firstElementChild||!/</g.test(e.textContent)||(S.removed.push({element:e.cloneNode()}),e.innerHTML?e.innerHTML=e.innerHTML.replace(/</g,"&lt;"):e.innerHTML=e.textContent.replace(/</g,"&lt;")),le&&3===e.nodeType&&(t=(t=(t=e.textContent).replace(G," ")).replace(q," "),e.textContent!==t&&(S.removed.push({element:e.cloneNode()}),e.textContent=t)),Me("afterSanitizeElements",e,null),!1},Ne=function(e){var t=void 0,n=void 0,o=void 0,r=void 0,i=void 0;Me("beforeSanitizeAttributes",e,null);var a=e.attributes;if(a){var l={attrName:"",attrValue:"",keepAttr:!0,allowedAttributes:Z};for(i=a.length;i--;){var s=(t=a[i]).name;if(n=t.value.trim(),o=s.toLowerCase(),l.attrName=o,l.attrValue=n,l.keepAttr=!0,Me("uponSanitizeAttribute",e,l),n=l.attrValue,"name"===o&&"IMG"===e.nodeName&&a.id)r=a.id,a=Array.prototype.slice.apply(a),ke("id",e),ke(s,e),a.indexOf(r)>i&&e.setAttribute("id",r.value);else{if("INPUT"===e.nodeName&&"type"===o&&"file"===n&&(Z[o]||!ne[o]))continue;"id"===s&&e.setAttribute(s,""),ke(s,e)}if(l.keepAttr&&(!pe||"id"!==o&&"name"!==o||!(n in E||n in Ae))){if(le&&(n=(n=n.replace(G," ")).replace(q," ")),re&&V.test(o));else if(oe&&Y.test(o));else{if(!Z[o]||ne[o])continue;if(be[o]);else if($.test(n.replace(X,"")));else if("src"!==o&&"xlink:href"!==o||0!==n.indexOf("data:")||!ve[e.nodeName.toLowerCase()]){if(ie&&!K.test(n.replace(X,"")));else if(n)continue}else;}try{e.setAttribute(s,n),S.removed.pop()}catch(e){}}}Me("afterSanitizeAttributes",e,null)}},_e=function e(t){var n=void 0,o=Ee(t);for(Me("beforeSanitizeShadowDOM",t,null);n=o.nextNode();)Me("uponSanitizeShadowNode",n,null),De(n)||(n.content instanceof L&&e(n.content),Ne(n));Me("afterSanitizeShadowDOM",t,null)};return S.sanitize=function(e,t){var n=void 0,o=void 0,r=void 0,i=void 0,a=void 0;if(e||(e="\x3c!--\x3e"),"string"!=typeof e&&!Oe(e)){if("function"!=typeof e.toString)throw new TypeError("toString is not a function");if("string"!=typeof(e=e.toString()))throw new TypeError("dirty is not a string, aborting")}if(!S.isSupported){if("object"===T(x.toStaticHTML)||"function"==typeof x.toStaticHTML){if("string"==typeof e)return x.toStaticHTML(e);if(Oe(e))return x.toStaticHTML(e.outerHTML)}return e}if(ce||xe(t),S.removed=[],e instanceof M)1===(o=(n=we("\x3c!--\x3e")).ownerDocument.importNode(e,!0)).nodeType&&"BODY"===o.nodeName?n=o:n.appendChild(o);else{if(!ue&&!se&&-1===e.indexOf("<"))return e;if(!(n=we(e)))return ue?null:""}de&&Se(n.firstChild);for(var l=Ee(n);r=l.nextNode();)3===r.nodeType&&r===i||De(r)||(r.content instanceof L&&_e(r.content),Ne(r),i=r);if(ue){if(me)for(a=W.call(n.ownerDocument);n.firstChild;)a.appendChild(n.firstChild);else a=n;return fe&&(a=U.call(k,a,!0)),a}return se?n.outerHTML:n.innerHTML},S.setConfig=function(e){xe(e),ce=!0},S.clearConfig=function(){Te=null,ce=!1},S.addHook=function(e,t){"function"==typeof t&&(B[e]=B[e]||[],B[e].push(t))},S.removeHook=function(e){B[e]&&B[e].pop()},S.removeHooks=function(e){B[e]&&(B[e]=[])},S.removeAllHooks=function(){B={}},S}var r=["a","abbr","acronym","address","area","article","aside","audio","b","bdi","bdo","big","blink","blockquote","body","br","button","canvas","caption","center","cite","code","col","colgroup","content","data","datalist","dd","decorator","del","details","dfn","dir","div","dl","dt","element","em","fieldset","figcaption","figure","font","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","img","input","ins","kbd","label","legend","li","main","map","mark","marquee","menu","menuitem","meter","nav","nobr","ol","optgroup","option","output","p","pre","progress","q","rp","rt","ruby","s","samp","section","select","shadow","small","source","spacer","span","strike","strong","style","sub","summary","sup","table","tbody","td","template","textarea","tfoot","th","thead","time","tr","track","tt","u","ul","var","video","wbr"],i=["svg","a","altglyph","altglyphdef","altglyphitem","animatecolor","animatemotion","animatetransform","audio","canvas","circle","clippath","defs","desc","ellipse","filter","font","g","glyph","glyphref","hkern","image","line","lineargradient","marker","mask","metadata","mpath","path","pattern","polygon","polyline","radialgradient","rect","stop","style","switch","symbol","text","textpath","title","tref","tspan","video","view","vkern"],a=["feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence"],l=["math","menclose","merror","mfenced","mfrac","mglyph","mi","mlabeledtr","mmuliscripts","mn","mo","mover","mpadded","mphantom","mroot","mrow","ms","mpspace","msqrt","mystyle","msub","msup","msubsup","mtable","mtd","mtext","mtr","munder","munderover"],s=["#text"],c=["accept","action","align","alt","autocomplete","background","bgcolor","border","cellpadding","cellspacing","checked","cite","class","clear","color","cols","colspan","coords","crossorigin","datetime","default","dir","disabled","download","enctype","face","for","headers","height","hidden","high","href","hreflang","id","integrity","ismap","label","lang","list","loop","low","max","maxlength","media","method","min","multiple","name","noshade","novalidate","nowrap","open","optimum","pattern","placeholder","poster","preload","pubdate","radiogroup","readonly","rel","required","rev","reversed","role","rows","rowspan","spellcheck","scope","selected","shape","size","sizes","span","srclang","start","src","srcset","step","style","summary","tabindex","title","type","usemap","valign","value","width","xmlns"],d=["accent-height","accumulate","additivive","alignment-baseline","ascent","attributename","attributetype","azimuth","basefrequency","baseline-shift","begin","bias","by","class","clip","clip-path","clip-rule","color","color-interpolation","color-interpolation-filters","color-profile","color-rendering","cx","cy","d","dx","dy","diffuseconstant","direction","display","divisor","dur","edgemode","elevation","end","fill","fill-opacity","fill-rule","filter","flood-color","flood-opacity","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","fx","fy","g1","g2","glyph-name","glyphref","gradientunits","gradienttransform","height","href","id","image-rendering","in","in2","k","k1","k2","k3","k4","kerning","keypoints","keysplines","keytimes","lang","lengthadjust","letter-spacing","kernelmatrix","kernelunitlength","lighting-color","local","marker-end","marker-mid","marker-start","markerheight","markerunits","markerwidth","maskcontentunits","maskunits","max","mask","media","method","mode","min","name","numoctaves","offset","operator","opacity","order","orient","orientation","origin","overflow","paint-order","path","pathlength","patterncontentunits","patterntransform","patternunits","points","preservealpha","preserveaspectratio","r","rx","ry","radius","refx","refy","repeatcount","repeatdur","restart","result","rotate","scale","seed","shape-rendering","specularconstant","specularexponent","spreadmethod","stddeviation","stitchtiles","stop-color","stop-opacity","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke","stroke-width","style","surfacescale","tabindex","targetx","targety","transform","text-anchor","text-decoration","text-rendering","textlength","type","u1","u2","unicode","values","viewbox","visibility","vert-adv-y","vert-origin-x","vert-origin-y","width","word-spacing","wrap","writing-mode","xchannelselector","ychannelselector","x","x1","x2","xmlns","y","y1","y2","z","zoomandpan"],u=["accent","accentunder","align","bevelled","close","columnsalign","columnlines","columnspan","denomalign","depth","dir","display","displaystyle","fence","frame","height","href","id","largeop","length","linethickness","lspace","lquote","mathbackground","mathcolor","mathsize","mathvariant","maxsize","minsize","movablelimits","notation","numalign","open","rowalign","rowlines","rowspacing","rowspan","rspace","rquote","scriptlevel","scriptminsize","scriptsizemultiplier","selection","separator","separators","stretchy","subscriptshift","supscriptshift","symmetric","voffset","width","xmlns"],m=["xlink:href","xml:id","xlink:title","xml:space","xmlns:xlink"],f=/\{\{[\s\S]*|[\s\S]*\}\}/gm,p=/<%[\s\S]*|[\s\S]*%>/gm,h=/^data-[\-\w.\u00B7-\uFFFF]/,g=/^aria-[\-\w]+$/,y=/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i,v=/^(?:\w+script|data):/i,b=/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205f\u3000]/g,T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},A=function(){return"undefined"==typeof window?null:window};return o()});
//# sourceMappingURL=purify.min.js.map
;
define('module/Browser',['require','module/Parameter','module/Options'],function(require) {

    var Parameter = require('module/Parameter');
    var Options = require('module/Options');

    var defaultChallengeWindow = 5;
    
    // Please refer to EMV 3-D secure protocol and core functions spec V2.1.0 PDF
    var challengeWindow = 
        [
            { "width": 600, "result": 4 },
            { "width": 500, "result": 3 },
            { "width": 390, "result": 2 },
            { "width": 250, "result": 1 }
        ];
    
	var Browser = {};
		
	Browser.asFields = function($container) {
	    var resultFields = {};

	    asParam(Parameter.BROWSER_JAVASCRIPT_ENABLED, true, resultFields );
	    
	    if (navigator) {	    	    
            asParam(Parameter.BROWSER_LANGUAGE, navigator.language, resultFields );
            asParam(Parameter.BROWSER_USERAGENT, navigator.userAgent, resultFields ); 
            asParam(Parameter.BROWSER_JAVAENABLED, navigator.javaEnabled(), resultFields ); 
        }
        
        if (screen) {        
            asParam(Parameter.BROWSER_SCREEN_HEIGHT, screen.height, resultFields );
            asParam(Parameter.BROWSER_SCREEN_WIDTH, screen.width, resultFields );
            asParam(Parameter.BROWSER_SCREEN_COLOR_DEPTH, screen.colorDepth, resultFields );
        }    

        if ($container) {        
            var cw = calculateChallengeWindow($container);
            asParam(Parameter.BROWSER_CHALLENGE_WINDOW, cw, resultFields );
        }

        asParam(Parameter.BROWSER_TIMEZONE, calculateTimezone(), resultFields );         
	    return resultFields;
	};
		
	function asParam(paramKey, paramValue, map) {
	    if (paramValue != null) {
	        map[paramKey] = paramValue;
	    }
	}
	
	function calculateTimezone() {
	    var d = new Date();
	    return d.getTimezoneOffset();
	}
	
	function calculateChallengeWindow($container) {

        // Return merchant's challenge window if it is valid and available
        if (Options.browser && Options.browser.threeDChallengeWindow &&
            Options.browser.threeDChallengeWindow >= 1 && Options.browser.threeDChallengeWindow <=5) {
            return Options.browser.threeDChallengeWindow;     
        } 
       
        // Calculate best fit
	    var width = $container.width();
	    for (var i=0; i < challengeWindow.length; i++) {
	        if (width >= challengeWindow[i].width)
            	return challengeWindow[i].result;
	    }
	    
	    // Not able to determine the challenge window, use default
	    return defaultChallengeWindow;
	}
	
	return Browser;
});

define('module/Wpwl',[],function(){
	var wpwl = window.wpwl || {};

	wpwl.checkout = wpwl.checkout || {};
	wpwl.checkout.config = wpwl.checkout.config || {};

	wpwl.endPoint = wpwl.checkout.endpoint;

	var wfsConfig =
	    wpwl.checkout.config.workflowSpecificConfig || {};
	wfsConfig.aliRiskConfig = wfsConfig.aliRiskConfig || {};
	wfsConfig.kountConfig = wfsConfig.kountConfig || {};
	wfsConfig.iovationConfig = wfsConfig.iovationConfig || {};
	wfsConfig.affirmConfig = wfsConfig.affirmConfig || {};
	wfsConfig.forterConfig = wfsConfig.forterConfig || {};
	wfsConfig.klarnaConfig = wfsConfig.klarnaConfig || {};
	wfsConfig.cyberSourceRiskManagementConfig = wfsConfig.cyberSourceRiskManagementConfig || {};
	wpwl.checkout.config.workflowSpecificConfig = wfsConfig;

    var envConfig = wpwl.checkout.config.environmentConfig || {};
	wpwl.checkout.config.environmentConfig = envConfig;
	wpwl.url = envConfig.url || '';
	wpwl.cacheVersion = envConfig.cacheVersion || '';
	wpwl.isTestSystem = envConfig.defaultPaymentMode !== "LIVE";

    var threeDSecureV2Config = wpwl.checkout.config.threeDSecureV2Config || {};
    wpwl.checkout.config.threeDSecureV2Config = threeDSecureV2Config;

	return wpwl;
});

define('module/Generate',['require','jquery','dompurify','module/I18n','module/Locale','module/Options','module/Parameter','module/Setting','module/Browser','module/Util','module/Wpwl'],function(require) {
	var $ = require('jquery');
	var DOMPurify = require('dompurify');
	var I18n = require('module/I18n');
	var Locale = require('module/Locale');
	var Options = require('module/Options');
	var Parameter = require('module/Parameter');
	var Setting = require('module/Setting');
	var Browser = require('module/Browser');
	var Util = require('module/Util');
	var Wpwl = require('module/Wpwl');

	var paymentSystem = Wpwl.isTestSystem ? "test" : "live";

	var Generate = {};

	// settings, can be overwritten in tests
    Generate.klarnaInvoiceFee = Options.KLARNA_INVOICE? Options.KLARNA_INVOICE.fee : undefined;
    Generate.klarnaInstallmentsFee = Options.KLARNA_INSTALLMENTS ? Options.KLARNA_INSTALLMENTS.fee : undefined;
    Generate.language = Locale.language;
    Generate.country = Locale.country;

    Generate.getSubmitButtonLabel = function(){
        if(Options.useSummaryPage){
            return I18n.nextStep;
        }
        if(/registration$/.test(Wpwl.endPoint) || /omnitoken$/.test(Wpwl.endPoint)){
            return I18n.register;
        }
        return I18n.submit;
    };

	Generate.showPaymentInputs = function(paymentInputs) { //generate input html
		var paymentInputsString = [];
		
		for ( var elemName in paymentInputs ) {
			/* istanbul ignore else */
			if (paymentInputs.hasOwnProperty(elemName)){
				var paymentData = paymentInputs[elemName];
				
				if (paymentData.type === 'submit') {
					generateExtraPaymentInputs(paymentInputsString);
					generatePaymentInput(paymentInputsString, elemName, paymentData);
				} else if (paymentData.type === 'textOnly') {
				    generateTextOnlyElement(paymentInputsString, elemName, paymentData);
				} else if (paymentData.type === 'confirmation') {
					generateConfirmationElement(paymentInputsString, elemName, paymentData);
				} else {
					generatePaymentInput(paymentInputsString, elemName, paymentData);
				}
			}
		}

		return paymentInputsString.join("");
	};

    function generateExtraPaymentInputs(paymentInputsString) {
        if (Options.showTaxNumberField) {
            var data = {
                    i18nIdentifier : "taxNumber",
                    name : Parameter.ID_DOC_ID,
                    type : "text",
                    value : Wpwl.checkout.config.taxNumber
            };
            generatePaymentInput(paymentInputsString, "taxNumber", data);
        }
	}
	
	function generateTextOnlyElement(paymentInputsString, elemName, paymentData) {
		var html = Generate.groupDiv(elemName,
			Generate.textDiv(elemName, I18n[paymentData.i18nIdentifier])
		);
		paymentInputsString.push(html);
	}

	function generateConfirmationElement(paymentInputsString, elemName, paymentData) {
		var inputId = Generate.uniqueId('checkbox_');
		var html = Generate.groupDiv(elemName,
			Generate.confirmationDiv(elemName, [
				Generate.checkboxInput(inputId, elemName, null),
				Generate.confirmationTextLabel(elemName, inputId, I18n[paymentData.i18nIdentifier]) ]
		));
		paymentInputsString.push(html);
	}

    Generate.generateBrowserFields = function($container) {
        return Generate.generateHiddenFields(Browser.asFields($container));
    };

    Generate.generateExtraHiddenFields = function() {
        var hiddenFields = {};

        if (Options.showTaxNumberField) {
            hiddenFields[ Parameter.ID_DOC_TYPE ] = "TAXSTATEMENT";
        }
        return Generate.generateHiddenFields(hiddenFields);
    };

    Generate.generateInlineFlowHiddenCustomParam = function(form) {
		return Generate.addParamIfDoesnExist(form, Parameter.INLINE_FLOW, "true");
    };

    Generate.generateIsSourceBrowserHiddenParam = function(form) {
        return Generate.addParamIfDoesnExist(form, Parameter.IS_SOURCE_BROWSER, "true");
    };

    Generate.generateSubmitPACustomParam = function(form, value) {
        return Generate.addParamIfDoesnExist(form, Parameter.SHOPPER_AD_UUID, value);
    };

    Generate.addParamIfDoesnExist = function(form, param, value) {
        var containsParam = containsParameter(form, param);
        var hiddenFields = {};

        if(containsParam === false) {
            hiddenFields[ param ] = value;
        }
        return Generate.generateHiddenFields(hiddenFields);

    };

    function containsParameter(form, parameter) {
        var containsParameter = false;
        for (var i = 0; i < form["0"].childNodes.length && containsParameter === false; i++) {
            if(form["0"].childNodes[i].name === parameter ) {
                containsParameter = true;
            }
        }
        return containsParameter;
    }

    function generatePaymentInput(paymentInputsString, key, paymentData) {
        var label = paymentData.type === 'submit' ? Generate.getSubmitButtonLabel()
                : I18n[paymentData.i18nIdentifier];

        var customPlaceholder = I18n[paymentData.i18nIdentifier + 'Placeholder'];
        var placeholderId = paymentData.i18nPlaceholderIdentifier || paymentData.i18nIdentifier;
        var placeholder = customPlaceholder || I18n[placeholderId];

        var row = Generate.generateCardRow({
            label: label,
            placeholder: placeholder,
            id: paymentData.id,
            name: paymentData.name,
            dataAction: paymentData.dataAction,
            type: paymentData.type,
            value: paymentData.value,
            values: paymentData.values,
            valueLabels: paymentData.valueLabels,
            maxLength: paymentData.maxLength,
            autocomplete: 'off',
            cssClass: key
        });

        paymentInputsString.push(row);
    }
	
	Generate.generateCardRow = function(r){ //label, name, type, values, valueLabels, cssClass
		return Generate.string(Generate.groupStart(r.cssClass),
				checkSubmit(r),
				checkSelect(r),
				checkBrandLogos(r),
				checkBrand(r),
				Generate.groupEnd());
	};

	function checkSubmit(r){
		return (r.type === 'submit' || r.type === 'logos') ? "" : Generate.generateLabelElement(r.label, r.cssClass, r.name);
	}

	function checkSelect(r){
	    if (r.type === 'logos') {
	        return "";
	    } else if (r.type === 'select') {
	        return Generate.generateSelectBox(r);
	    } else if (r.type === 'iframe') {
	        return Generate.pciIframe(r);
	    } else {
	        return Generate.inputElement(r);
	    }
	}

	function checkBrandLogos(r) {
	    return (r.type === 'logos') ? Generate.generateCardLogos(r) : "";
	}

	function checkBrand(r){
		return (r.cssClass==="brand" && r.type!=="logos") ? Generate.string(
			"<div class='wpwl-brand wpwl-brand-card ",
			Generate.brandClass(Util.trim(r.values.split(',')[0])),
			 "'></div>"
		) : "";
	}
	
	Generate.generateNonCreditCardAccountRow = function(r){//brand,label, cssClass
		var paymentConfig = Setting.subTypeLabelMap[ r.brand ];
		
		return Generate.string(
				Generate.getBrandAccountInput(r.brand),
				//generate hidden params
				Generate.generateNonCreditCardLabelInput(paymentConfig.render, r)
		);
	};
	
	Generate.generateLabelElement = function(label, cssClass, name) {
		return Generate.generateLabel({label:label, cssClass:cssClass, component:"<div/>", name:name});
	};

	Generate.generateLabelTag = function(label, cssClass, name) {
		return Generate.generateLabel({label:label, cssClass:cssClass, component:"<label/>", name:name});
	};
	
	Generate.generateLabel = function(obj) {
		if (!Options.showLabels || obj.label === undefined || obj.label === ""){
			return "";
		}

		var attributes = {
            "class": "wpwl-label wpwl-label-" + obj.cssClass,
            "text": obj.label
        };
        if (obj.name) {
            attributes.name = "wpwl-label-" + obj.name;
        }
		return Generate.outerHtml($(obj.component, attributes));
	};

	Generate.generateSimpleTextElement = function(brandSetup) {
		var text;
		if (!text && brandSetup.i18nIdentifier !== undefined) {
			text = I18n[brandSetup.i18nIdentifier];
		}
		if (!text && brandSetup.content !== undefined) {
			text = brandSetup.content;

		}
		return "<div class='wpwl-label'>" + text + "</div>";
	};
	
	Generate.generateSelectBox = function(obj) {
		var valuesArray = obj.values.split(","), 
			labelsArray = obj.valueLabels === undefined ? obj.values.split(",") : obj.valueLabels.split(","),
			resultString = [Generate.wrapperStart(obj.cssClass), "<select class='wpwl-control wpwl-control-",obj
			.cssClass , "' name='", obj.name, "' aria-label='", obj.label, "'"].join('');
		if (obj.name === Parameter.PAYMENT_BRAND && obj.type === 'logos') {
		    resultString = [resultString, " style='display: none'"].join('');
		}
		resultString = [resultString, ">"].join('');
		for(var i = 0; i < valuesArray.length; i++) { 
			resultString = [resultString, "<option value=", valuesArray[i], ">", labelsArray[i], "</option>"].join('');
		}

		return [resultString, "</select>", Generate.wrapperEnd()].join('');
	};

	Generate.generateCardLogos = function(obj) {
	    obj = Generate.prioritizeBrands(obj);

	    // Dropdown
	    var cardLogosGroup = Generate.generateSelectBox(obj);

	    // Horizontal logos
	    cardLogosGroup = [cardLogosGroup, Generate.generateCardBrands(obj,
	        "wpwl-group-card-logos-horizontal", "wpwl-group-card-logos-horizontal")].join('');

	    // Vertical logos
	    cardLogosGroup = [cardLogosGroup, Generate.generateVerticalLogos(obj)].join('');
	    return cardLogosGroup;
	};

	// Reorders brands (obj.values, obj.valueLabels) according to brandDetectionPriority
	Generate.prioritizeBrands = function(obj) {
		var newObj = $.extend(true, {}, obj);
		var priority = Options.brandDetectionPriority;
		if (!priority || !priority.length) {
			return newObj;
		}

		// Gets values and labels from obj
		var values = obj.values.split(",");
		var labels = obj.valueLabels === undefined ? obj.values.split(",") : obj.valueLabels.split(",");
		if (values.length !== labels.length) {
			return newObj;
		}
		for (var i = 0; i < values.length; i++) {
			values[i] = Util.trim(values[i]);
			labels[i] = Util.trim(labels[i]);
		}

		// Takes priority from brandDetectionPriority
		var prioritizedValues = [];
		var prioritizedLabels = [];
		for (i = 0; i < priority.length; i++) {
			var index = values.indexOf(priority[i]);
			if (index === -1) {
				continue;
			}

			prioritizedValues.push(values[index]);
			prioritizedLabels.push(labels[index]);
		}

		// Appends the remaining brands that are not in brandDetectionPriority
		for (i = 0; i < values.length; i++) {
			if (prioritizedValues.indexOf(values[i]) !== -1) {
				continue;
			}

			prioritizedValues.push(values[i]);
			prioritizedLabels.push(labels[i]);
		}

		newObj.values = prioritizedValues.join(',');
		newObj.valueLabels = prioritizedLabels.join(',');
		return newObj;
	};

	Generate.generateVerticalLogos = function(obj) {
		var cardLogosSelectedBox = ["<div class='wpwl-group-card-logos-vertical' id='wpwl-group-card-logos-vertical'>"].join('');
		cardLogosSelectedBox = [cardLogosSelectedBox, "<div class='wpwl-button-more'>" + I18n.moreBrands + "</div>"].join('');
		cardLogosSelectedBox = [cardLogosSelectedBox, Generate.generateCardBrands(obj, "wpwl-group-card-logos-selected-box", "wpwl-group-card-logos-selected-box")].join('');
		cardLogosSelectedBox = [cardLogosSelectedBox, Generate.wrapperEnd()].join('');
		return cardLogosSelectedBox;
	};

    // Generates all brand divs, grouped by another div with the given class and id
	Generate.generateCardBrands = function(obj, groupClass, groupId) {
	    var brands = obj.values.split(",");
    	var resultString = ["<div class='", groupClass, "' id='", groupId, "'>"].join('');

		for (var i = 0; i < brands.length; i++) {
		    var cardBrand = brands[i].replace(/\s/g, '');
			resultString = [resultString,
			    "<div class='wpwl-brand wpwl-brand-card wpwl-brand-card-logo ",
			    Generate.styledBrandClass(cardBrand),
			    "' value='", cardBrand, "'></div>"].join('');
		}
    	return [resultString, Generate.wrapperEnd()].join('');
	};
	
	Generate.generateNonCreditCardLabelInput = function(paymentMethod, p){ //brand, label, cssClass
		var paymentTypeSetup = Setting.paymentTypeSetup[paymentMethod];
		
		if ( paymentTypeSetup === undefined )
		{
			return "";
		}
		
        var brandSetup = paymentTypeSetup[p.brand] || {};
		var funcObj = brandSetup.func;
		if (funcObj) {
            //it's not only a simple input field, call a defined function which does some stuff
            var method = funcObj.method;
            var data = funcObj.data;

            //return funcObj.call(this);
            return Generate[method](data);
		}
		
		var genState = {
                customHtmlStrings : [],
                hiddenFieldsMap : {},
                paymentMethod : paymentMethod,
                brandSetup : brandSetup
        };
		
		generateNonCcInputFields(genState, p);
		
		return generateNonCcLabelInputResult(genState, p.brand);
	};

	function generateNonCcInputFields(genState, p) {
        for( var setup in genState.brandSetup )
        {
            if( p[setup] === undefined )
            {
                // it is an input field
                generateNonCcInputField(genState, p.brand, setup);
            }
        }

        if (Options.showTaxNumberField)
        {
            var input = generateInputElement({setup:"taxNumber", inputName:Parameter.ID_DOC_ID,
                    value:Wpwl.checkout.config.taxNumber});
            genState.customHtmlStrings.push(input);
        }
	}

	function generateNonCcInputField(genState, brand, setup) {
        var inputName = genState.brandSetup[setup].name;
        var selectOptionValues = Generate.generateValueSelectOptions(genState.paymentMethod, brand, setup);
        var selectOptionNames = Generate.generateNameSelectOptions(genState.paymentMethod, brand, setup);

        var options = selectOptionValues.split(",");
        if( options[0].length === 0 )
        {
            if (genState.brandSetup[setup].type === 'simple-text')
            {
                genState.customHtmlStrings.push(Generate.generateSimpleTextElement(genState.brandSetup[setup]));
                return;
            }
            // no options, it is a input element
            genState.customHtmlStrings.push(generateInputElement({setup:setup, inputName:inputName, value:undefined, placeholder:genState.brandSetup[setup].i18nPlaceholderIdentifier}));
        }
        else if( options.length === 1 && genState.brandSetup[setup].type !== 'force-dropdown')
        {
            // only one option. don't bother the user and add it as a hidden input
            genState.hiddenFieldsMap[ inputName ] = options[0];
        }
        else
        {
            // must be a select dropdown of options
            var element = Generate.generateSelectElement(setup, {
                name:inputName,
                values:selectOptionValues,
                valueLabels:selectOptionNames,
                cssClass:setup});
            genState.customHtmlStrings.push(element);
        }
	}

    function generateNonCcLabelInputResult(genState, brand) {
        var hiddenFieldsHtml = Generate.generateHiddenFields(genState.hiddenFieldsMap) +
                Generate.generateExtraHiddenFields();

        var customHtml = genState.customHtmlStrings.join("");

        if ( !customHtml.length )
        {
            return Generate.string(
                hiddenFieldsHtml,
                Generate.groupStart("button"),
                Generate.buttonWithLogo(brand),
                Generate.groupEnd()
            );
        }

        // logo is on top of form, like EPS, GIROPAY, IDEAL, SOFORT, NETELLER
        var logoHtml = Generate.string(
                Generate.groupStart("brand"),
                Generate.logo(brand),
                Generate.groupEnd()
        );

        var submitButton = Generate.submitButton(Generate.getSubmitButtonLabel());

        return Generate.string(logoHtml, hiddenFieldsHtml + customHtml, submitButton);
    }
	
	function generateInputElement(obj) {
        var label = I18n[obj.setup];
        var i18Placeholder = obj.placeholder ?  I18n[obj.placeholder] : undefined;
        return Generate.string(
            Generate.groupStart(obj.setup),
            Generate.generateLabelElement(label, obj.setup),
            Generate.inputElement({name: obj.inputName, type: "text", label: label, cssClass: obj.setup, value : obj.value, placeholder: i18Placeholder}),
            Generate.groupEnd()
        );
	}

	function generateRadioElement(obj) {
		var result = "";

		var options = obj.setup;
		for(var i in options){
			if (options.hasOwnProperty(i)){
				var opt = options[i];
				var label = I18n[i];
				result += Generate.inputElement({name: opt.name, type: opt.type, checked: opt.checked, label: label, 
									cssClass: "radio-" + i, value : opt.value, dataAction: opt.dataAction});
			}
		}
		
        return Generate.string(
			Generate.groupStart("radio"),
			result,
			Generate.groupEnd()
        );
	}

	 Generate.generateAutocompleteInputElement = function (parameters) {
		var label = I18n[parameters.setup];
		return Generate.string(
				Generate.groupStart(parameters.setup),
				Generate.generateLabelElement(label, parameters.setup),
				Generate.inputAutocompleteElement({name: parameters.inputName, type: "text", label: label, cssClass: parameters.setup, value : parameters.value, id : parameters.id}),
				Generate.groupEnd()
		);
	};
	
	Generate.generateSelectElement= function (setup, selectObj) {
        var label = I18n[setup];
        return Generate.string(
            Generate.groupStart(setup),
            Generate.generateLabelElement(label, setup),
            Generate.generateSelectBox(selectObj),
            Generate.groupEnd()
        );
	};

	Generate.generateButtonElement = function(elementId) {
        return Generate.string("<div id='", elementId, "' class='wpwl-button'>");
	};

	Generate.generateHiddenFields = function( map ){//map: key, value
		if (map === undefined) {
			return "";
		}
		
		var hiddenFieldsString = [];
		for ( var i in map ){
			/* istanbul ignore else */
			if (map.hasOwnProperty(i)) {
				hiddenFieldsString.push(Generate.hiddenInput(i, map[i]));
			}
		}
		return hiddenFieldsString.join("");
	};
	
	Generate.generateSubTypesLabel = function(l){
		var s, g;
		l = l.split(",");
		for (var i = 0, len = l.length; i < len; i++) {
			g = Setting.subTypeLabelMap[Util.trim(l[i])];
			s = (s===undefined ? (g.label===undefined ? Util.trim(l[i]) : g.label) : (g.label===undefined ? [s, Util.trim(l[i])].join(',') : [ s, g.label].join(',')));
		}
		return s;
	};
	
	Generate.generateNameSelectOptions = function(paymentType, brand, n){
		var setup = Setting.paymentTypeSetup[paymentType][brand][n][paymentSystem];
		var s = [];
		
		for( var i in setup ){
			/* istanbul ignore else */
			if (setup.hasOwnProperty(i)){
				s.push(setup[i]);
			}
		}
		
		return s.join(',');
	};
	
	Generate.generateValueSelectOptions = function(paymentMethod, brand, n){
		var setup = Setting.paymentTypeSetup[paymentMethod][brand][n][paymentSystem];
		var s = [];
		
		for(var i in setup ){
			/* istanbul ignore else */
			if (setup.hasOwnProperty(i)){
				s.push(i);
			}
		}
		
		return s.join(',');
	};

	// Generates hidden paymentBrand input
	Generate.getBrandAccountInput = function(brand){
		var config = Setting.subTypeLabelMap[brand];
		var inputName = "";
		if(config.brand) {
			inputName = Parameter.PAYMENT_BRAND;
			return Generate.hiddenInput(inputName, config.brand);
		} else {
			// this case makes no sense and should be removed
			return Generate.hiddenInput(inputName, brand);
		}
	};

	Generate.hiddenInput = function(name, value, id){
    		return Generate.outerHtml(
    			$("<input/>", {
    				"name": name,
    				"type": "hidden",
    				"id": id,
    				"value": value
    			})
    		);
    	};
	
	Generate.string = function() {
		return Array.prototype.slice.call(arguments).join("");
	};

	/**
	 * Gives outerHtml like element.outerHtml, but with support for firefox < 11
	 */
	Generate.outerHtml = function($elem) {
		return $("<div/>").append($elem.clone()).html();
	};

	Generate.targetIframe = function(name) {
        return Generate
                .string("<iframe name=\"", name, "\" class=\"wpwl-target\" src=\"about:blank\""+
                        " frameBorder=\"0\" style=\"display:none;\"/>");
    };

	Generate.logo = function(brand) {
	    return Generate.string("<div class='wpwl-brand ", Generate.brandClass(brand), "' />");
	};

	Generate.brandClass = function(brand) {
	    var brandClass = Generate.styledBrandClass(brand);
        var brandLocaleClass = Generate.string(brandClass, "_", Generate.language.toUpperCase());

        return Generate.string(brandClass, " ", brandLocaleClass);
	};

	Generate.styledBrandClass = function(brand) {
	    return Generate.string("wpwl-brand-",
	            (Options.imageStyle === "svg") ? "svg-" : "",
	            brand);
	};

	Generate.buttonWithLogo = function(brand) {
		return Generate.string(
				"<button type='submit' class='wpwl-button wpwl-button-brand'>",
				Generate.screenReaderOnly(brand), Generate.logo(brand),
				"</button>");
	};

	Generate.groupStart = function(className) {
		return Generate.string("<div class='wpwl-group wpwl-group-", className, " wpwl-clearfix'>");
	};

	Generate.groupEnd = function() {
		return "</div>";
	};

	Generate.textDiv = function(elemName, content) {
		return Generate.outerHtml($('<div/>', {
			'class': 'wpwl-text wpwl-text-' + elemName
		}).append(content));
	};

	Generate.groupDiv = function(elemName, content) {
		var innerHtml = Array.isArray(content) ?  content.join('') : content;
		return Generate.outerHtml($('<div/>', {
			'class': 'wpwl-group wpwl-group-' + elemName + ' wpwl-clearfix'
		}).append(innerHtml));
	};

	Generate.wrapperDiv = function(elemName, content) {
		var innerHtml = Array.isArray(content) ?  content.join('') : content;
        return Generate.outerHtml($('<div/>', {
            'class': 'wpwl-wrapper wpwl-wrapper-' + elemName
        }).append(innerHtml));
    };

    Generate.confirmationDiv = function(elemName, content) {
        var innerHtml = Array.isArray(content) ?  content.join('') : content;
        return Generate.outerHtml($('<div/>', {
            'class': 'wpwl-confirmation wpwl-confirmation-' + elemName
        }).append(innerHtml));
    };

    Generate.confirmationTextLabel = function(elemName, inputId, content) {
        return Generate.outerHtml($('<label/>', {
            'class': 'wpwl-text-confirmation wpwl-text-confirmation-' + elemName,
            'for': inputId
        }).append(content));
    };

    Generate.checkboxInput = function(id, elemName, paramName) {
        return Generate.outerHtml($('<input/>', {
            'type': 'checkbox',
            'id': id,
            'class': 'wpwl-checkbox wpwl-checkbox-' + elemName,
            'name': paramName
        }));
    };

	Generate.wrapperStart = function(className) {
		return Generate.string("<div class='wpwl-wrapper wpwl-wrapper-", className, "'>");
	};

	Generate.wrapperEnd = function() {
		return "</div>";
	};

	Generate.screenReaderOnly = function(text) {
		return Generate.string("<span class='wpwl-sr-only'>", text, "</span>");
	};

	// Given a Prefix, appends a random multiplied by the timestamp to it in order to avoid possible collisions with customer IDs
    Generate.uniqueId = function(prefix) {
		return prefix + Math.floor(Math.random() * new Date().getTime());
	};

	Generate.inputElement = function(obj) {
		var wrapperStart = Generate.wrapperStart(obj.cssClass);
		var wrapperEnd = Generate.wrapperEnd();
		if (obj.type === 'submit') {
			return Generate.string(wrapperStart,
					Generate.outerHtml(
						$("<button/>", {
							"class": "wpwl-button wpwl-button-pay",
							"data-action": obj.dataAction,
							"text": obj.label,
							"type": obj.type,
							"aria-label": obj.label
						})
					),
					wrapperEnd);
		}

		if (obj.type === 'radio') {
			return Generate.string(wrapperStart,
					Generate.generateLabelTag(obj.label, obj.cssClass),
					Generate.outerHtml(
						$("<input/>", {
							"class": "wpwl-control-" + obj.cssClass,
							"name": obj.name,
							"data-action": obj.dataAction,
							"type": obj.type,
							"value": obj.value,
							"checked": obj.checked,
							"aria-label": obj.label,
							"required": obj.required,
							"label": obj.label
						})),
						wrapperEnd
					);
		}

		var placeholder = obj.placeholder ? obj.placeholder : obj.label;
		var value = obj.value ? obj.value : "";

		var $input = $("<input/>", {
			"class": "wpwl-control wpwl-control-" + obj.cssClass,
			"data-action": obj.dataAction,
			"name": obj.name,
			"placeholder": Options.showPlaceholders ? placeholder : null,
			"type": obj.type,
			"value": DOMPurify.sanitize(value),
			"maxLength": obj.maxLength,
			"aria-label": obj.label
		});
		$input.attr("autocomplete", 'off');
        return Generate.string(wrapperStart,
				Generate.outerHtml(
					$input
				),
				wrapperEnd);
	};

	Generate.inputAutocompleteElement = function(obj) {
		var wrapperStart = Generate.wrapperStart(obj.cssClass);
		var wrapperEnd = Generate.wrapperEnd();
		var placeholder = obj.placeholder ? obj.placeholder : obj.label;
		var value = obj.value ? obj.value : "";

		var $input = $("<input/>", {
			"id": obj.id,
			"class": "wpwl-control wpwl-control-" + obj.cssClass,
			"data-action": obj.dataAction,
			"name": (obj.name && obj.type !== 'submit') ? obj.name : "",
			"placeholder": Options.showPlaceholders ? placeholder : null,
			"type": obj.type,
			"value": value
		});
		$input.attr("autocomplete", "off");

        return Generate.string(wrapperStart,
				Generate.outerHtml(
						$input
				),
				wrapperEnd);
	};
	
	Generate.submitButton = function(label){
		return Generate.string(
			Generate.groupStart("submit"), 
			Generate.inputElement({
				type : "submit",
				label : label,
				cssClass : "submit"
			}), 
			Generate.groupEnd()
		);
	};


	Generate.pciIframe = function(obj){
		var wrapperStart = Generate.wrapperStart(obj.cssClass);
		var wrapperEnd = Generate.wrapperEnd();
		var $iframe = $("<iframe/>", {
                      					"class": "wpwl-control wpwl-control-iframe wpwl-control-" + obj.cssClass + " disabled",
                      					"frameborder": "0",
                      					"name": obj.name,
                      					"placeholder": Options.showPlaceholders ? obj.placeholder ? obj.placeholder : obj.label : null,
                      					"scrolling": "no",
                      					"data-maxLength" : obj.maxLength,
                      					"src": Generate.getPciIframeSrc(),
                      					"aria-label": obj.label,
                      					"title": obj.placeholder ? obj.placeholder : obj.label
                      				});
        if( obj.id !== undefined ){
            $iframe.attr('id', obj.id);
        }
		return Generate.string(
			wrapperStart,
			Generate.outerHtml(
				$iframe
			),
			wrapperEnd
		);
	};

	Generate.getPciIframeSrc = function(){
		return Generate.string(Wpwl.url, "/v", Wpwl.apiVersion, "/pciIframe.html?checkoutId=", Wpwl.checkout.id, !Wpwl.minified ? "&minified=false" : "");
	};
	
	//special functions for configuring the form
	Generate.renderKlarnaInvoice = function(){
		var country = "DE";
		var fee = "0";

		var BRAND = "KLARNA_INVOICE";
		if (Setting.specialSettings[BRAND].billingAgreement[Generate.country]) {
			country = Generate.country;
		}
		if (Generate.klarnaInvoiceFee){
		    fee = Generate.klarnaInvoiceFee;
		}

		var data = {
			brand: BRAND,
			country: country,
			fee: fee,
			readMoreLink: Setting.specialSettings[BRAND].billingAgreementLink[country],
			readMore: Setting.specialSettings[BRAND].billingAgreement[country],
			generalTermsAndConditions: Setting.specialSettings[BRAND].generalTermsAndConditions[country],
			host: Wpwl.url,
			title: Setting.specialSettings[BRAND].title[country]
		};
		
		return Generate.renderKlarna(data);
	};
	
	Generate.renderKlarnaInstallments = function(){
		var country = "DE";
		var fee = "0";

		var BRAND = "KLARNA_INSTALLMENTS";
		if (Setting.specialSettings[BRAND].readMore[Generate.country]) {
			country = Generate.country;
		}
		if (Generate.klarnaInstallmentsFee){
		    fee = Generate.klarnaInstallmentsFee;
		}
		var data = {
			brand: BRAND,
			country: country,
			fee: fee,
			readMoreLink: Setting.specialSettings[BRAND].readMoreLink[country],
			readMore: Setting.specialSettings[BRAND].readMore[country],
			generalTermsAndConditions: Setting.specialSettings[BRAND].generalTermsAndConditions[country],
			host: Wpwl.url,
			title: Setting.specialSettings[BRAND].title[country]
		};
		
		return Generate.renderKlarna(data);
	};

	Generate.renderIdeal = function(data){
		var brand = "IDEAL";
		var logo = Generate.string(Generate.groupStart("brand"), Generate.logo(brand), Generate.groupEnd());
		var countries = data[paymentSystem];
		var codes = [];
		for(var i in countries){
			if (countries.hasOwnProperty(i)){
				codes.push(i);
			}
		}
		var selectOptionValues = codes.join(',');
		var country = Generate.generateHiddenFields({"bankAccount.country": selectOptionValues}) + Generate.generateExtraHiddenFields();
		var bankList = Generate.generateSelectElement("bankName", {
			name:"bankAccount.bankName",
			values:"",
			valueLabels:"",
			cssClass:"bankName"});
		var submitButton = Generate.submitButton(Generate.getSubmitButtonLabel());
		return Generate.string(logo, bankList, country, submitButton);
	};

	Generate.renderEmptyAstropayStreamline = function(){
		return "";
	};

	Generate.renderAstropayStreamline = function(data){
		return Generate.string(
			Generate.hiddenInput("virtualAccount.accountId", data.accountId) +
			Generate.groupStart("button") +
				'<button type="submit" class="wpwl-button wpwl-button-brand">' +
					Generate.screenReaderOnly(data.brand) +
					'<div style="background: url(',
						data.logoUrl,
						') no-repeat top center; background-size:contain; width: 130px; height: 40px; margin: 0 auto; ">' +
					'</div>' +
				'</button>' +
			Generate.groupEnd());
    };

	Generate.renderWithoutButton = function(){
		return Generate.string(
			Generate.groupStart("button"),
			Generate.groupEnd()
		);
	};

	Generate.renderKlarna = function(data){
		var templates = {
			title: "<div class='wpwl-title'>{title}</div>",
			billingAgreement:
				"<div class='wpwl-group wpwl-group-customLink'>" +
					"<a target='_blank' href='{readMoreLink}?fee={fee}' class='customLinkBillingAgreement'>{readMore}</a>" +
				"</div>",
			generalTermsAndConditions:
				"<div class='wpwl-group wpwl-group-customGTC'><label><input type='checkbox' name='generalTermsAndConditions'/>" +
					"{generalTermsAndConditions}" +
				"</label></div>",
			creditWarning:
				"<div class='wpwl-group wpwl-group-creditWarning'><img src='" +
					"{host}{generalTermsAndConditions}" +
				"' class='img-responsive'/></div>",
			empty: ""
		};

        var eids = Wpwl.checkout.config.klarnaMerchantIds && Wpwl.checkout.config.klarnaMerchantIds.length ?
				Wpwl.checkout.config.klarnaMerchantIds : ["EID"];
        var renderMultipleEids = function(template) {
            var result = "";
            $.each(eids, function(index, eid) {
                data.EID = eid;
                result += Generate.templateEngine(template, data);
            });
            return result;
        };

		var billingAgreement = renderMultipleEids(templates.billingAgreement);

		var generalTermsAndConditionsTemplate = "";
		if( data.country === "AT" || data.country === "DE" ) {
			generalTermsAndConditionsTemplate = templates.generalTermsAndConditions;
		}
		if (data.country === "NL" && data.generalTermsAndConditions) {
			generalTermsAndConditionsTemplate = templates.creditWarning;
		}

		var title = Generate.templateEngine(templates.title, data);

		var generalTermsAndConditions = renderMultipleEids(generalTermsAndConditionsTemplate);
		
		var style = Generate.brandClass(data.brand);
		
		var logo = Generate.string(Generate.groupStart("brand"), "<div class='wpwl-brand ", style, "' />", Generate.groupEnd());

		var submitButton = Generate.submitButton(Generate.getSubmitButtonLabel());
		
		return Generate.string(logo, title, billingAgreement, generalTermsAndConditions, submitButton);
	};
	
	Generate.renderMasterpass = function(data){
		var buttonWithLogoHtml = Generate.string(Generate.groupStart("button"), Generate.buttonWithLogo("MASTERPASS"), Generate.groupEnd());
		
		var availableLearnMoreLang = "en";
		if ($.inArray(Generate.language, data.languagesWithLearnMorePage) !== -1)
		{
			availableLearnMoreLang = Generate.language;
			// Replace official 'sv' with 'se' as it is the link suffix for Swedish for MasterPass
			if (availableLearnMoreLang === "sv")
			{
				availableLearnMoreLang = "se";
			}
		}

		var hiddenFields = {
			'customParameters[MASTERPASS_ORIGIN_URL]': window.location.href
		};
		var hiddenFieldsHtml = Generate.generateHiddenFields(hiddenFields);
		var link = Generate.string("<div><a href='http://www.mastercard.com/mc_us/wallet/learnmore/", availableLearnMoreLang, "/' target='_blank'>", I18n.learnMore, "</a></div>");

		return Generate.string(buttonWithLogoHtml, link, hiddenFieldsHtml);
	};
	
	Generate.templateEngine = function(template, data){
		for(var key in data){
			/* istanbul ignore else */
			if (data.hasOwnProperty(key)){
				template=template.replace(new RegExp('{' + key + '}','g'), data[key]);
			}
		}
		return template;
	};

	Generate.renderIkanoOpenInvoice = function(data){

		var templates = {
			title: "<div class='wpwl-group wpwl-group-customTitle'><b>{title}</b></div>",
			checkboxConfirmation:
				"<div class='wpwl-group wpwl-group-customAccept'><label><input type='checkbox' name='accept'/>" +
					"{ikanoOpenInvoiceAccept}" +
				"</label></div>",
			empty: ""
		};

		var logo = Generate.string(Generate.groupStart("brand"), Generate.logo(data.brand), Generate.groupEnd());

		var title = data.label !== undefined ? Generate.templateEngine(templates.title, {title: data.label}): "";

        var nationalIdentifier = generateInputElement({setup:"nationalIdentifier", inputName:Parameter.ID_DOC_ID});

        var documentIdType = [];
        documentIdType[Parameter.ID_DOC_TYPE] = "IDCARD";
        var documentId = Generate.generateHiddenFields(documentIdType);

        var termsAndConditions = Generate.ikanoOpenInvoiceTermsAndCondition(data.termsAndConditionsLink);
        var confirmation = Generate.templateEngine(templates.checkboxConfirmation, {ikanoOpenInvoiceAccept: I18n.ikanoOpenInvoiceAccept});

		var submitButton = Generate.submitButton(Generate.getSubmitButtonLabel());

		return Generate.string(logo, title, nationalIdentifier, documentId, termsAndConditions, confirmation , submitButton);
    };

    Generate.ikanoOpenInvoiceTermsAndCondition = function(links){
        var template = {termsAndConditions: "<div class='wpwl-group wpwl-group-customTC'>" +
            "<a target='_blank' href='{termsAndConditionsLink}' class='customTermsAndConditions'>{termsAndConditions}</a>" +
        "</div>"};

        var result = "";
        var label = "";
            var browserLanguage = Locale.language;
            if(Array.isArray(links)) {
                if((browserLanguage.toLowerCase() === links[1].locale.toLowerCase())) {
                        label = I18n.ikanoOpenInvoiceTermsAndCondition + " (" + links[1].locale + ")";
                        result = Generate.templateEngine(template.termsAndConditions, {termsAndConditions: label, termsAndConditionsLink: links[1].link});
                } else {
                       label = I18n.ikanoOpenInvoiceTermsAndCondition;
                       result = Generate.templateEngine(template.termsAndConditions, {termsAndConditions: label, termsAndConditionsLink: links[0].link});
                }
            } else {
            label = I18n.ikanoOpenInvoiceTermsAndCondition;
            result += Generate.templateEngine(template.termsAndConditions, {termsAndConditions: label, termsAndConditionsLink: links.link});
            }
        return result;
    };
    Generate.renderDataCodeOpenInvoice = function(){

        var logo = Generate.string(Generate.groupStart("brand"), Generate.logo("DATACODE"), Generate.groupEnd());

        var token = generateInputElement({setup:"insertCode", inputName:Parameter.SHOPPER_TOKEN});

        var submitButton = Generate.submitButton(Generate.getSubmitButtonLabel());

        return Generate.string(logo, token, submitButton);
	};
	
	Generate.renderStcPay = function(data){
		var logo = Generate.string(Generate.groupStart("brand"), Generate.logo(data.brand), Generate.groupEnd());
		
		var label = Generate.string(Generate.groupStart(data.paymentMode.name), I18n[data.paymentMode.name], Generate.groupEnd());

		var option = generateRadioElement({setup:data.paymentModeOptions});
		
		var mobilePhone = generateInputElement({setup:"mobilePhone", inputName:data.mobilePhone.name, placeholder:data.mobilePhone});

		mobilePhone = mobilePhone.replace(" wpwl-clearfix'>", " wpwl-clearfix' style='display: none'>");

        var submitButton = Generate.submitButton(Generate.getSubmitButtonLabel());

        return Generate.string(logo, label, option, mobilePhone, submitButton);
    };

	return Generate;
});

define('module/RegistrationType',[],function(){
    var RegistrationType = {};

    RegistrationType.card = "card";
    RegistrationType.directDebit = "directDebit";

    return RegistrationType;
});
define('module/OneClickPaymentRegistration',['require','module/Generate','module/I18n','module/Options','module/RegistrationType','module/Setting','module/Wpwl','module/Util'],function(require){
	var Generate = require("module/Generate");
	var I18n = require("module/I18n");
    var Options = require("module/Options");
    var RegistrationType = require("module/RegistrationType");
    var Setting = require("module/Setting");
    var Wpwl = require("module/Wpwl");
    var Util = require("module/Util");

    var OneClickPaymentRegistration = function(json){
        this.id = json.id;
        this.paymentBrand = json.paymentBrand;
        this.card = json.card;
        this.bankAccount = json.bankAccount;
        this.virtualAccount = json.virtualAccount;
        this.customer = json.customer;
        this.type = getTypeByPaymentBrand.call(this);
        this.displayVirtualAccountId = isPaypal(this.paymentBrand) &&
            !Util.isNullOrUndefined(this.virtualAccount) &&
            !Util.isBlank(this.virtualAccount.accountId);

        var requiredCvv = (this.options.registrations.requireCvv === undefined && this.options.requireCvv) || this.options.registrations.requireCvv;
        this.isCardAndCvvRequired = this.type === RegistrationType.card && requiredCvv && !Setting.usesBirthDate(this.paymentBrand);
        this.isBirthDateRequired = requiredCvv && Setting.usesBirthDate(this.paymentBrand);
        setupHolder.call(this);
    };

    OneClickPaymentRegistration.prototype.endpoint = Generate.string(Wpwl.url, "/v1/checkouts/", Wpwl.checkout.id, "/payment");

    OneClickPaymentRegistration.prototype.pciIframeSrc = Generate.string(Wpwl.url, "/v1/pciIframe.html", (!Wpwl.minified ? "?minified=false" : ""));

    OneClickPaymentRegistration.prototype.lang = I18n;

    OneClickPaymentRegistration.prototype.options = Options;

    OneClickPaymentRegistration.prototype.paymentTarget = Options.paymentTarget ? Options.paymentTarget : "registrations-target";

    function setupHolder() {

        this.isHolderRequired = Wpwl.checkout.config.overrideHolder && (isCardWithEmptyHolder.call(this) || isBankWithEmptyHolder.call(this)); 

        if (this.isHolderRequired) {
        
            if (this.type === RegistrationType.card) {
                this.holderProperties = ccHolderProperties();
            }
            else {
                this.holderProperties = bankHolderProperties();                    
            }
        }
    }
    
    function isCardWithEmptyHolder() {
        return this.type === RegistrationType.card && this.card && (!this.card.holder || this.card.holder.length === 0);                                
    }

    function isBankWithEmptyHolder() {
        return this.type === RegistrationType.directDebit && this.bankAccount && (!this.bankAccount.holder || this.bankAccount.holder.length === 0);                                
    }

    function ccHolderProperties() {
        return {
            setup:"cardHolder",
            inputName:"card.holder",
            placeHolder: I18n.cardHolder
        };
    }
    
    function bankHolderProperties() {
        return {
            setup:"accountHolder",
            inputName:"bankAccount.holder",
            placeHolder: I18n.accountHolder
        };
    }    

    function getTypeByPaymentBrand(){
        var render = Setting.subTypeLabelMap[this.paymentBrand].render;
        if (render === "CC" || render === "DC" || isPaypal(this.paymentBrand) )  {
            // we treat PAYPAL registration the same way as card registration from UI point of view
            return RegistrationType.card;
        }
        if (render === "DD" && this.bankAccount && this.bankAccount.iban) {
            return RegistrationType.directDebit;
        }
    }

    function isPaypal(paymentBrand){
        return paymentBrand === "PAYPAL" || paymentBrand === "PAYPAL_CONTINUE" ;
    }

    return OneClickPaymentRegistration;
});

define('module/OneClickPaymentUtil',['require','module/Generate','module/OneClickPaymentRegistration','module/Util'],function(require){
    var Generate = require("module/Generate");
    var OneClickPaymentRegistration = require("module/OneClickPaymentRegistration");
    var Util = require("module/Util");

    var OneClickPaymentUtil = {};

    OneClickPaymentUtil.getRegistrationsByRenderType = function(registrations, registrationType){
        return Util.filter(registrations, function(registration) {
            return registration.type === registrationType;
        });
    };

    OneClickPaymentUtil.getRegistrationById = function(registrations, id){
        return Util.find(registrations, function(item){
            return item.id === id;
        });
    };

    OneClickPaymentUtil.convertToRegistrations = function(registrationsJson){
        var registrations = [];
        Util.each(registrationsJson, function(registrationJson){
            var registration = OneClickPaymentUtil.convertToRegistration(registrationJson);
            registrations.push(registration);
        });
        return registrations;
    };

    OneClickPaymentUtil.convertToRegistration = function(registration){
        return new OneClickPaymentRegistration(registration);
    };

    OneClickPaymentUtil.concatDetailsForView = function(registrations){
        Util.each(registrations, function(registration){
            if(!Util.isEmpty(registration.card)) {
                registration.number = Generate.string(" **", registration.card.last4Digits);
                registration.expiry = Generate.string(registration.card.expiryMonth, "/", registration.card.expiryYear);
                registration.holder = registration.card.holder;
            }
            if(!Util.isEmpty(registration.bankAccount)) {
                registration.number = getMaskedIban(registration.bankAccount.iban);
                registration.holder = registration.bankAccount.holder;
            }
        });

        return registrations;
    };

    function getMaskedIban(iban){
        // it might happen that an iban is not provided
        if (!Util.isNullOrUndefined(iban))
        {
            return Generate.string(iban.slice(0,4), " **** ", iban.slice(iban.length - 4, iban.length));
        }
        return null;
    }

    return OneClickPaymentUtil;
});
define('module/CVVHint',['require','jquery','module/forms/CardPaymentForm','module/I18n','module/Options'],function(require) {
	var $ = require('jquery');
	var CardPaymentForm = require('module/forms/CardPaymentForm');
	var I18n = require('module/I18n');
	var Options = require('module/Options');

    var CVVHint = function($form){
        this.$cardForm = new CardPaymentForm($form);
    };

    CVVHint.iconSelector = "[data-action=\"toggle-popover\"]";

    CVVHint.getPositionClass = function(elem){
		return $(elem).offset().top - $(elem).outerHeight() < 0 ? "wpwl-bottom" : "wpwl-top";
    };

	CVVHint.prototype.init  = function(){
		if(!Options.showCVVHint) {
			return;
		}

		// finds wrapper in card and oneclickpayment form only if there is a cvv iframe
		this.$wrapper = this.$cardForm.getCvvElement().parent();
		this.$questionIcon = $('<div class="wpwl-icon ui-state-default ui-corner-all" data-action="toggle-popover"><span class="ui-icon ui-icon-help"></span></div>');
		this.$popover = $('<div class="wpwl-popover wpwl-top" role="tooltip"></div>');
		this.$arrow = $('<div class="wpwl-arrow"></div>');
		this.$cardIcon = $('<div class="wpwl-img wpwl-brand-whereIsMyCVV"></div>');
		this.$hint = $('<div class="wpwl-popover-content"></div>') ;

		this.$popover.append(this.$cardIcon, this.$hint, this.$arrow);
		this.$wrapper.append(this.$questionIcon, this.$popover);

		adjustContent.call(this);

        $(document).on("mouseover.wpwlEvent mouseout.wpwlEvent", CVVHint.iconSelector, $.proxy(this.togglePopover, this));
        $(document).on("touchend.wpwlEvent", $.proxy(this.touchHandler, this));
        $(document).on("change::brand.wpwlEvent", $.proxy(adjustContent, this));
	};

	CVVHint.prototype.togglePopover = function(event){
		// some other element is hovered
		if (!$(event.target).closest(this.$questionIcon).length) {
			return;
		}

		this.$popover.toggleClass("wpwl-popover-in");
		this.$questionIcon.toggleClass("ui-state-hover");

		// jQuery can calculate only when the element is visible
		if (this.$popover.hasClass("wpwl-popover-in")){
			positionPopover.call(this);
			positionArrow.call(this);
		}
	};

	CVVHint.prototype.touchHandler = function(event){
		// click inside element including children
		if ($(event.target).closest(this.$questionIcon).length) {
			// don't run default mouse-emulation
			event.preventDefault();
			this.togglePopover(event);
		}
		else {
			this.$popover.removeClass("wpwl-popover-in");
			this.$questionIcon.removeClass("ui-state-hover");
		}
	};

	function adjustContent(){
		this.$cardIcon.removeClass("wpwl-brand-whereIsMyCVV-AMEX");
		this.$cardIcon.removeClass("wpwl-brand-whereIsMyCVV");
		this.$hint.text(I18n.cvvHint);

		if (this.$cardForm.getBrand() === "MAESTRO") {
            this.$hint.text(I18n.cvvHintMaestro);
        }

		if (this.$cardForm.getBrand() === "AMEX") {
			this.$cardIcon.addClass("wpwl-brand-whereIsMyCVV-AMEX");
			this.$hint.text(I18n.cvvHintAmex);
		} else {
		    this.$cardIcon.addClass("wpwl-brand-whereIsMyCVV");
		}
	}

	function positionPopover(){
		// reset popover position
		this.$popover.removeClass("wpwl-bottom wpwl-top");
		this.$popover.css({
			top: "auto",
			bottom: "auto"
		});

		// show popover above or below icon
		var positionClass = CVVHint.getPositionClass(this.$popover);
		this.$popover.addClass(positionClass);

		// position depending on wrapper height, e.g. when validation error is shown wrapper is higher
		var position = {};
		if (this.$popover.hasClass("wpwl-top")) {
			position = {
				bottom: this.$wrapper.outerHeight(),
				top: "auto"
			};
		} else {
			position = {
				top: this.$wrapper.outerHeight(),
				bottom: "auto"
			};
		}
		this.$popover.css(position);
	}

	function positionArrow(){
		var left = this.$popover.outerWidth() -
				(this.$questionIcon.offsetParent().outerWidth() - this.$questionIcon.position().left -
					(this.$questionIcon.outerWidth() / 2)
				);
		this.$arrow.css({
			left: left
		});
	}

	return CVVHint;
});

define('module/Detection',['require','module/Setting','module/Util','module/Options'],function(require){
	var Setting = require('module/Setting');
	var Util = require('module/Util');
	var Options = require('module/Options');
	
	var Detection = {};
	var brandsWithoutDetectionPattern = null;

	/**
	 * faster iban detection without expensive validation.
	 */
	Detection.isIban = function(iban){
		if (iban === undefined || iban === null){
			return false;
		}

		// remove spaces and to upper case
		iban = iban.replace(/\s/g, "").toUpperCase();
		
		// starts with 2 letters followed by 2 numbers
		var isIban = /^(?:[A-Z]{2}[0-9]{2})/.test(iban);
		return isIban;
	};
	
	Detection.isBic = function(bic){
		if (bic === undefined || bic === null)
			return false;

		// remove spaces and to upper case
		bic = bic.replace(/ /g, '').toUpperCase();

		var isBic = /^[A-Z]{6}[A-Z0-9]{2}(?:X{3}|[A-WY-Z0-9][A-Z0-9]{2})?$/.test(bic);
		return isBic;
	};

	Detection.getBrandsWithoutDetectionPattern = function() {
	    if (brandsWithoutDetectionPattern !== null) {
	        return brandsWithoutDetectionPattern;
	    } else {
		    var brandSettings = Setting.cardValidation;
    	    brandsWithoutDetectionPattern = [];

    	    for (var brand in brandSettings) {
    	        if (brandSettings.hasOwnProperty(brand) && !brandSettings[brand].detection) {
    	            brandsWithoutDetectionPattern.push(brand);
    	        }
    	    }
    	    return brandsWithoutDetectionPattern;
	    }
	};

	// For each brand in brands-validation.json,
	// checks if the "detection" regex matches the given number.
	// The output brands are ordered according to brands-validation.json
	Detection.getBrandsByNumber = function(number) {
		number = Util.parseEasternNumber(number);
		var brandSettings = Setting.cardValidation;
		var detectedBrands = [];

		for ( var brand in brandSettings) {
			/* istanbul ignore else */
			if (brandSettings.hasOwnProperty(brand)) {
				var detection = brandSettings[brand].detection;
				if (detection) {
				    if (new RegExp(detection).test(number)) {
				        detectedBrands.push(brand);
				    }
				}
			}
		}
		return (detectedBrands.length === 0) ? null : detectedBrands;
	};

	// If Options.brandDetectionPriority exists,
	// goes through it and returns the first brand found in detectedBrands.
	// Otherwise, returns detectedBrands[0].
	Detection.getBrandFromBrands = function(detectedBrands){
	    var priority = Options.brandDetectionPriority || [];
	    var brands = detectedBrands || [];

	    if (priority.length > 0 && brands.length > 0){
	        var i = 0;

	        while (i < priority.length){
	            if (brands.indexOf(priority[i]) !== -1){
	                return priority[i];
                }
	            i++;
            }
        }

	    return brands.length > 0 ? brands[0] : null;
    };

	return Detection;
});

define('module/forms/BankAccountPaymentForm',['require','module/Detection','shim/ObjectCreate','module/forms/PaymentForm','module/Parameter','module/Util','module/Options'],function(require){
	var Detection = require('module/Detection');
	var ObjectCreate = require('shim/ObjectCreate');
	var PaymentForm = require('module/forms/PaymentForm');
	var Parameter = require('module/Parameter');
	var Util = require('module/Util');
	var Options = require('module/Options');
	
	var BankAccountPaymentForm = function($form){
		PaymentForm.call(this, $form);
	};
	
	// extend Form
	BankAccountPaymentForm.prototype = ObjectCreate(PaymentForm.prototype);
	BankAccountPaymentForm.prototype.constructor = BankAccountPaymentForm;
	
	BankAccountPaymentForm.prototype.getHolder = function(){
		return this.getHolderElement().val();
	};
	
	BankAccountPaymentForm.prototype.getHolderElement = function(){
		return this.getElement(Parameter.BANKACCOUNT_HOLDER);
	};
	
	BankAccountPaymentForm.prototype.getIbanOrAccountNumber = function(){
		return this.getIbanOrAccountNumberElement().val();
	};
	
	BankAccountPaymentForm.prototype.getIbanOrAccountNumberElement = function(){
		var $iban = this.getElement(Parameter.BANKACCOUNT_IBAN);
		if ($iban.length){
			return $iban;
		}
		return this.getElement(Parameter.BANKACCOUNT_NUMBER);
	};
	
	BankAccountPaymentForm.prototype.getBicOrBankCode = function(){
		return this.getBicOrBankCodeElement().val();
	};
	
	BankAccountPaymentForm.prototype.getBicOrBankCodeElement = function(){
		var $bic = this.getElement(Parameter.BANKACCOUNT_BIC);
		if ($bic.length){
			return $bic;
		}
		return this.getElement(Parameter.BANKACCOUNT_BANKCODE);
	};
	
	BankAccountPaymentForm.prototype.getCountry = function(){
		return this.getCountryElement().val();
	};
	
	BankAccountPaymentForm.prototype.getCountryElement = function(){
		return this.getElement(Parameter.BANKACCOUNT_COUNTRY);
	};

	BankAccountPaymentForm.prototype.isSimplifiedForm = function() {
        var brand = this.getBrand();
        if (/^DIRECTDEBIT_SEPA$/.test(brand)) {
            return true;
        } else if (/^SEPA$/.test(brand)) {
           return true;
        } else if (/^DIRECTDEBIT_(?:DE|AT|US)$/.test(brand)) {
            return false;
        } else if (/^EPS$/.test(brand)) {
            return false;
        } else if (/^GIROPAY$/.test(brand) && false === Options.displayIban) {
            return true;
        }  else {
            // validate only iban if iban is set
            var IbanOrAccountNumber = this.getIbanOrAccountNumber();
            if (!Util.isEmpty(IbanOrAccountNumber)) {
                return Detection.isIban(IbanOrAccountNumber);
            }

            // validate bic if iban is not set, e.g. giropay starfinanz
            var BicOrBankCode = this.getBicOrBankCode();
            return Detection.isBic(BicOrBankCode);
        }
    };
	
	BankAccountPaymentForm.prototype.isSepaForm = function() {
		var brand = this.getBrand();
		if (/^DIRECTDEBIT_SEPA$/.test(brand)) {
			return true;
		}
		if (/^SEPA$/.test(brand)) {
            return true;
        }
		return false;
	};

	BankAccountPaymentForm.prototype.getMandateConfirmationCheckbox = function () {
		return this.getElementByCssClass('wpwl-checkbox-mandateConfirmation');
	};
	
	return BankAccountPaymentForm;
});

/**
 * Contains some useful functions when working with jQuery events
 */
define('module/EventUtil',['module/Util'], function (Util) {
    var NUMBER_PATTERN = new RegExp("[0-9]");
    
	var EventUtil = {};

    /**
     * Whether the key pressed is a non-printable character or a control key was pressed.
     * 
     * @param e a jquery Event object, created by a keyPressed event
     */
	EventUtil.isNonPrintableOrControlKeyPressed = function(e) {
		return !!(e.which < 32 || e.ctrlKey || e.metaKey || e.altKey);
	};

    /**
     * Whether the key pressed is a number or not. 
     * It should first be checked with isNonPrintableOrControlKeyPressed that the 
     * key is actually a printable key
     * 
     * @param e a jquery Event object, created by a keyPressed event
     */
    EventUtil.isNumberPressed = function(e, pPattern) {
        var pattern = pPattern || NUMBER_PATTERN;
        var charCode = String.fromCharCode(e.which | e.keyCode | e.charCode);

        return pattern.test(charCode) ||
               pattern.test(Util.parseEasternNumber(charCode));
    };

	return EventUtil;
});

define('module/KeyCodes',[],function(){
	return {
        BACK_SPACE: 8,
        DELETE: 46,
        LEFT_ARROW: 37,
        RIGHT_ARROW: 39,
        V: 86
    };
});

define('module/InputFormatter',['module/EventUtil', 'module/KeyCodes' , 'module/Options'], function(EventUtil, KeyCodes , Options) {
    /*
        It formats a input field based on given pattern.

        Element:
        The jquery element.

        Pattern: e.g. {{9999}} {{99}}-{{9999}}#{{99}}
        1. The placeholders must be wrapped in {{}}, and the value here is '9' can be char
        2. The separators only support '-', '#' and ' ' with 1 char

        contentPattern
        The pattern to restrict user's typing, default is /\d/

        Usage:
        var formatter = new InputFormatter($("input"), '{{9999}} {{99}}-{{9999}}#{{99}}', /[a-z0-9]/i);
        var inputValue = formatter.getModelValue();
    */


    var NUMBER_PATTERN = /\d/;
    function InputFormatter(elem, pattern, contentPattern) {
        var self = this;
        this.elem = elem;
        this.contentPattern = contentPattern || NUMBER_PATTERN;

        // the expected output value length according to pattern
        this.expectedLength = 0;
        this.setPattern(pattern);
        elem.data('formatter', self);

        elem.on('keydown', function(e) {
            var keyCode = self.getKeyCode(e);
            var charCode = self.getChar(keyCode);
            var cursor = self.getCursorPos();
            var viewValue = self.getViewValue();

            var newCursor = self.calcCursorForDeletion(keyCode, cursor, viewValue);

			if(self.isKeyCodeArrow(keyCode) && !(e.ctrlKey || e.shiftKey)) {
                newCursor = self.calcCursorForMovement(keyCode, cursor, viewValue);
            }

			if (newCursor !== cursor) {
                self.setCursorPos(newCursor);
            }

            // stop typing if max length reached and cursor is at the end
            var viewValueLength = viewValue.length;
            if (self.expectedLength <= viewValueLength &&
                self.contentPattern.test(charCode) &&
                cursor === viewValueLength) {
                    e.preventDefault();
            }
        });

        elem.on('keypress', function(e) {
            if (EventUtil.isNonPrintableOrControlKeyPressed(e) ||
                EventUtil.isNumberPressed(e, self.contentPattern)) {
                 return;
            }

            e.preventDefault();
        });

		function doFormat() {
			var cursor = self.getCursorPos();
			var prefix = self.getModelValue(self.getViewValue().substr(0, cursor));
			self.format();
			var formattedPrefix = self.formatString(prefix);
			self.setCursorPos(formattedPrefix.length);
		}

        elem.on('paste', function () {
            setTimeout(function(){
                doFormat();
            });
        });

		elem.on('keyup',function(e) {
           var keyCode = self.getKeyCode(e);
           var charCode = self.getChar(keyCode);
           if(self.contentPattern.test(charCode) ||
                keyCode === KeyCodes.BACK_SPACE ||
                keyCode === KeyCodes.DELETE) {
                    doFormat();
           }
      });

    }

    InputFormatter.prototype.calcCursorForDeletion = function(keyCode, cursor, viewValue) {
        if(keyCode === KeyCodes.BACK_SPACE && cursor > 0) {
            var previousChar = viewValue[cursor-1];
            if(this.isSeparator(previousChar)) {
                return cursor - 1;
            }
        } else if (keyCode === KeyCodes.DELETE && cursor < viewValue.length) {
            var nextChar = viewValue[cursor];
            if(this.isSeparator(nextChar)) {
                return cursor + 1;
            }
        }

        return cursor;
    };

    InputFormatter.prototype.calcCursorForMovement = function(keyCode, cursor, viewValue) {
		if(keyCode === KeyCodes.RIGHT_ARROW) {
			if(this.isSeparator(viewValue[cursor])) {
				return cursor + 1;
			}
		} else {
			if(cursor >=2 && this.isSeparator(viewValue[cursor - 2])) {
				return cursor - 1;
			}
		}

       return cursor;
    };

    InputFormatter.prototype.isSeparator = function(val) {
        // separatorPattern is stateful, clear state
        this.separatorPattern.lastIndex = 0;
        return this.separatorPattern.test(val);
    };

    // build separator pattern from given pattern. e.g.
    // given {{9999}} {{99}}-{{9999}}#{{99}}
    // output /[ \-#]/g
    InputFormatter.prototype.buildSeparatorPattern = function(pattern) {
      var newPattern = pattern.replace(/{{.*?}}/g, '')
            .split('')
            .reduce(function(result, char) {
                 if(result.indexOf(char) === -1) {
                  if(char === '-') {
                    char = '\\' + char;
                  }
                  result += char;
                 }
                 return result;
            }, '');
      return new RegExp('['+newPattern+']', 'g');
    };

    InputFormatter.prototype.getKeyCode = function(e) {
        var code = e.keyCode || e.charCode;
        if(code === 0 || code === 229) {
            // android chrome bug. keyCode and charCode always return 0 or 229
            // see http://stackoverflow.com/questions/17139039/keycode-is-always-zero-in-chrome-for-android
            var value = this.getViewValue();
            code = value.substr(this.length - 1).charCodeAt();
        }

        return code;
    };

    InputFormatter.prototype.isKeyCodeArrow = function(keyCode) {
        return keyCode === KeyCodes.LEFT_ARROW || keyCode === KeyCodes.RIGHT_ARROW;
    };

    InputFormatter.prototype.setViewValue = function(value) {
        this.elem.val(value);
    };

    InputFormatter.prototype.setCursorPos = function(index) {
        var rawElem = this.elem[0];
		if(rawElem.selectionStart === rawElem.selectionEnd) {
			rawElem.selectionStart = index;
			rawElem.selectionEnd = index;
		} else {
			rawElem.selectionStart = index;
		}
    };

    InputFormatter.prototype.getCursorPos = function() {
        return this.elem[0].selectionStart;
    };

    InputFormatter.prototype.getViewValue = function() {
        return this.elem.val();
    };

    InputFormatter.prototype.getModelValue = function(value) {
        // value can be empty string
        if(value == null) {
            value = this.elem.val() || '';
        }
        return value.replace(this.separatorPattern, '');
    };

    InputFormatter.prototype.setModelValue = function(value) {
        this.elem.val(value);
        this.format();
    };

    InputFormatter.prototype.setPattern = function(pattern) {
        this.pattern = pattern;
        this.expectedLength = pattern.replace(/[\{\}]/g,'').length;
        this.separatorPattern = this.buildSeparatorPattern(pattern);
        this.format();
    };

    /**
        format input according to pattern
    */
    InputFormatter.prototype.format = function() {
        var result = this.formatString(this.getModelValue());
        this.setViewValue(result);
    };


    InputFormatter.prototype.getChar = function(keyCode) {
        // keycode between 96 and 105 is from number pad
        if (keyCode >= 96 && keyCode <= 105) {
            return (keyCode - 96).toString();
        }
        return String.fromCharCode(keyCode);
    };

    InputFormatter.prototype.formatString = function(moduleValue) {
        var result = [];
        var modelCharList = moduleValue.split('');
        var patternCharList = this.pattern.split('');

        while(patternCharList.length > 0 && modelCharList.length > 0) {
            var patternChar = patternCharList.shift();
            if (patternChar === '{' || patternChar === '}') {
                continue;
             }

            if (this.isSeparator(patternChar)) {
                result.push(patternChar);
                continue;
            }

            result.push(modelCharList.shift());
        }

        return result.join('');
    };

    InputFormatter.isSupported = function() {
        var numberFormatting = Options.numberFormatting;
        return numberFormatting && !/Android/i.test(window.navigator.userAgent);
    };

    return InputFormatter;
});

/**
 * Formats a input field with the format MM / YY.
 *
 * This implementation is very specifically written only for the single use case to
 * format a date with format MM / YY, it cannot be used for anything else (yet).
 *
 * Behavior:
 * 
 * - Users can only type numbers
 * - At most 4 numbers can be entered
 * - If 4 numbers have been typed already and the user types a number in the middle,
 *   then the last number is removed
 * - The slash (/) is added and removed automatically
 * - Users cannot type the / on their own
 * 
 * We wrote our own implementation, because all tested, existing libraries had 
 * issues on some mobile browsers (in particular Android browsers).
 *
 * This implementation should work on all browsers except for IE <= 8.
 * 
 */
define('module/InputDateFormatter',['jquery', 'module/EventUtil'], function ($, EventUtil) {

    var LEFT_KEY = 37;
    var RIGHT_KEY = 39;
    var BACKSPACE_KEY = 8;
    var DELETE_KEY = 46;

    var SEPARATOR = " / ";
    var SEPARATOR_LENGTH = SEPARATOR.length;
    var BEGIN_OF_SEPARATOR = 2;
    var END_OF_SEPARATOR = BEGIN_OF_SEPARATOR + SEPARATOR_LENGTH - 1;
    var MAX_LENGTH = SEPARATOR_LENGTH + 4;
    var DATE_LENGTH = 4;

    var PATTERN = new RegExp("[0-9\u0660-\u0669][0-9\u0660-\u0669]" + SEPARATOR + "[0-9\u0660-\u0669][0-9\u0660-\u0669]");
    var NUMBER_PATTERN = new RegExp("[0-9\u0660-\u0669]");
    var SINGLE_NUMBER_OR_EMPTY_PATTERN = new RegExp("^[0-9\u0660-\u0669]?$");
    var TWO_NUMBERS_PATTERN = new RegExp("^[0-9\u0660-\u0669][0-9\u0660-\u0669]$");
    
    var InputDateFormatter = function (obj) {
        this.selector = obj.selector;
    };
    
    InputDateFormatter.prototype.format = function () {
        var $this = $(this.selector);

        if ($this.get(0) === undefined) {
            return;
        }
        
        // IE <= 8 ist not supported
        if (!('selectionStart' in $this.get(0))) {
            return;
        }

        var lastValue = $this.val();

        // whether the cursor is within the range of the separator
        function inSeparator(cursorPos) {
            return cursorPos >= BEGIN_OF_SEPARATOR &&
                cursorPos <= END_OF_SEPARATOR;
        }

        // ensure the separator is dealt correctly
        // when moving the cursor or delete characters
        $this.keydown(function (e) {
            var keyCode = e.keyCode;

            var cursor = $this.get(0).selectionStart;

            var newCursor = cursor;
            var preventDefault = false;

            if (keyCode === LEFT_KEY && inSeparator(cursor - 1)) {
                newCursor = BEGIN_OF_SEPARATOR;
                preventDefault = true;
            } else if (keyCode === RIGHT_KEY && inSeparator(cursor + 1)) {
                newCursor = END_OF_SEPARATOR + 1;
                preventDefault = true;
            } else if (keyCode === BACKSPACE_KEY && inSeparator(cursor - 1)) {
                newCursor = BEGIN_OF_SEPARATOR;
            } else if (keyCode === DELETE_KEY && inSeparator(cursor)) {
                newCursor = END_OF_SEPARATOR + 1;
            } else {
                return;
            }

            if (cursor !== newCursor) {
                $this.get(0).setSelectionRange(newCursor, newCursor);
            }

            if (preventDefault) {
                e.preventDefault();
            }
        });

        // prevent printable numbers to be typed
        $this.keypress(function (e) {

            if (EventUtil.isNonPrintableOrControlKeyPressed(e)) {
                return;
            }

            var charCode = String.fromCharCode(e.keyCode | e.charCode);

            if (!NUMBER_PATTERN.test(charCode)) {
                // only allow numbers to be typed
                e.preventDefault();
            } else if (PATTERN.test($this.val()) && $this.get(0).selectionStart >= MAX_LENGTH) {
                // if at the end of the completely typed date, do not allow any additional characters anymore
                e.preventDefault();
            }
        });


        $this.keyup(function () {

            var data = $this.val();
            var cursor = $this.get(0).selectionStart;

            // if nothing has changed we do not have to do anything
            if (lastValue === data) {
                return;
            }

            // split text on cursor position
            var textBeforeCursor = data.substring(0, cursor);
            var textAfterCursor = data.substring(cursor);

            // remove all non-numeric characters
            var strippedBefore = textBeforeCursor.replace(/[^0-9\u0660-\u0669]/g, "");
            var strippedAfter = textAfterCursor.replace(/[^0-9\u0660-\u0669]/g, "");
            var stripped = strippedBefore + strippedAfter;

            if (SINGLE_NUMBER_OR_EMPTY_PATTERN.test(stripped) ||
                (TWO_NUMBERS_PATTERN.test(stripped) && data.length < lastValue.length)) {
                $this.val(stripped);
                $this.get(0).setSelectionRange(cursor, cursor);
            } else {
                var newValue;
                if(stripped.length <= DATE_LENGTH){
                     newValue = stripped.substring(0, 2) + SEPARATOR + stripped.substring(2, 4);
                }else {
                     newValue = stripped.substring(0, 2) + SEPARATOR + stripped.substring(4, 6);
                }

                $this.val(newValue);

                // restore cursor position, move it after the separator if needed
                var newCursor = strippedBefore.length;
                if (newCursor >= BEGIN_OF_SEPARATOR) {
                    newCursor = newCursor + SEPARATOR_LENGTH;
                }
                $this.get(0).setSelectionRange(newCursor, newCursor);
            }

            lastValue = $this.val();
        });
    };

    return InputDateFormatter;
});

/**
 * Formats a input field with the format DD / MM / YYYY.
 *
 * Behavior:
 *
 * - Users can only type numbers
 * - At most 8 numbers can be entered
 * - If 8 numbers have been typed already and the user types a number in the middle,
 *   then the last number is removed
 * - The slashes (/) are added and removed automatically
 * - Users cannot type the / on their own
 *
 * This implementation should work on all browsers except for IE <= 8.
 *
 */
define('module/DateFormatter',['jquery', 'module/EventUtil', 'module/KeyCodes'], function ($, EventUtil, KeyCodes) {

    var SEPARATOR = " / ";
    var SEPARATOR_LENGTH = SEPARATOR.length;
    var BEGIN_OF_SEPARATOR1 = 2;
    var END_OF_SEPARATOR1 = BEGIN_OF_SEPARATOR1 + SEPARATOR_LENGTH - 1;
    var BEGIN_OF_SEPARATOR2 = 7;
    var END_OF_SEPARATOR2 = BEGIN_OF_SEPARATOR2 + SEPARATOR_LENGTH - 1;
    var MAX_LENGTH = 2*SEPARATOR_LENGTH + 8;
    var DDMM_LENGTH = 4;
    var DIGIT = "[0-9\u0660-\u0669]";
    var PATTERN = new RegExp(DIGIT + DIGIT + SEPARATOR + DIGIT + DIGIT);
    var DIGIT_PATTERN = new RegExp(DIGIT);
    var SINGLE_NUMBER_OR_EMPTY_PATTERN = new RegExp("^"+DIGIT+"?$");

    var DateFormatter = function (obj) {
        this.selector = obj.selector;
    };

    function inSeparator1(cursorPos) {
        return cursorPos >= BEGIN_OF_SEPARATOR1 &&
            cursorPos <= END_OF_SEPARATOR1;
    }

    function inSeparator2(cursorPos) {
        return cursorPos >= BEGIN_OF_SEPARATOR2 &&
            cursorPos <= END_OF_SEPARATOR2;
    }

    function beforeSeparator(cursorPos) {
        if(inSeparator1(cursorPos)) {
            return BEGIN_OF_SEPARATOR1;
        }
        if(inSeparator2(cursorPos)) {
            return BEGIN_OF_SEPARATOR2;
        }
        return cursorPos;
    }

    function afterSeparator(cursorPos) {
        if(inSeparator1(cursorPos)) {
            return END_OF_SEPARATOR1 + 1;
        }
        if(inSeparator2(cursorPos)) {
            return END_OF_SEPARATOR2 + 1;
        }
        return cursorPos;
    }

    function isToTheLeft(cursorPos) {
        return inSeparator1(cursorPos - 1) || inSeparator2(cursorPos - 1);
    }
    function isToTheRight(cursorPos) {
        return inSeparator1(cursorPos + 1) || inSeparator2(cursorPos + 1);
    }
    function isInside(cursorPos) {
        return inSeparator1(cursorPos) || inSeparator2(cursorPos);
    }

    function whereWouldItGo(cursorPos, keyCode) {
        var result = cursorPos;
        switch(keyCode) {
            case KeyCodes.LEFT_ARROW:
                result--;
                break;
            case KeyCodes.RIGHT_ARROW:
                result++;
                break;
            case KeyCodes.BACK_SPACE:
                result--;
            }
            return result;
    }

    var handlers = [
        {key:KeyCodes.LEFT_ARROW, isSeparatorNearby:isToTheLeft, whereTo:beforeSeparator, executeOriginalAction:false},
        {key:KeyCodes.RIGHT_ARROW, isSeparatorNearby:isToTheRight, whereTo:afterSeparator, executeOriginalAction:false},
        {key:KeyCodes.BACK_SPACE, isSeparatorNearby:isToTheLeft, whereTo:beforeSeparator, executeOriginalAction:true},
        {key:KeyCodes.DELETE, isSeparatorNearby:isInside, whereTo:afterSeparator, executeOriginalAction:true}
    ];

    DateFormatter.handleKeyDown = function(keyCode, cursorLocation) {
        var newCursorLocation = cursorLocation;
        var executeOriginalAction = true;

        for(var index = 0; index<handlers.length ; index++) {
            var handler = handlers[index];
            if(keyCode === handler.key && handler.isSeparatorNearby(cursorLocation)) {
                newCursorLocation = handler.whereTo(whereWouldItGo(cursorLocation, keyCode));
                executeOriginalAction = handler.executeOriginalAction;
            }
        }

        return {
            newCursorLocation:newCursorLocation,
            executeOriginalAction:executeOriginalAction
         };
    };

    DateFormatter.transform = function(text, cursorLocation) {

        // split text on cursor position
        var textBeforeCursor = text.substring(0, cursorLocation);
        var textAfterCursor = text.substring(cursorLocation);

        // remove all non-numeric characters
        var strippedBefore = textBeforeCursor.replace(/[^0-9\u0660-\u0669]/g, "");
        var strippedAfter = textAfterCursor.replace(/[^0-9\u0660-\u0669]/g, "");
        var stripped = strippedBefore + strippedAfter;

        var output = stripped;
        var newCursorLocation = cursorLocation;


        if (!SINGLE_NUMBER_OR_EMPTY_PATTERN.test(stripped)) {

            // insert separators
            if(stripped.length < DDMM_LENGTH){
                output = stripped.substring(0, 2) + SEPARATOR + stripped.substring(2, 4);
            } else {
                output = stripped.substring(0, 2) + SEPARATOR + stripped.substring(2, 4) +
                    SEPARATOR + stripped.substring(4,8);
            }

            // restore cursor position, move it after the separator if needed
            newCursorLocation = strippedBefore.length;
            if (newCursorLocation >= BEGIN_OF_SEPARATOR1) {
                newCursorLocation = newCursorLocation + SEPARATOR_LENGTH;
            }
            if(newCursorLocation >= BEGIN_OF_SEPARATOR2) {
                newCursorLocation = newCursorLocation + SEPARATOR_LENGTH;
            }
        }

        return {
            output:output,
            newCursorLocation:newCursorLocation
        };
    };

    DateFormatter.prototype.format = function () {
        var $this = $(this.selector);

        if ($this.get(0) === undefined) {
            return;
        }

        // IE <= 8 ist not supported
        if (!('selectionStart' in $this.get(0))) {
            return;
        }

        var lastValue = $this.val();

        // ensure the separator is dealt correctly
        // when moving the cursor or deleting characters
        $this.keydown(function (e) {
            var cursorLocation = $this.get(0).selectionStart;

            var resultOfKeyDown = DateFormatter.handleKeyDown(e.keyCode, cursorLocation);

            if (cursorLocation !== resultOfKeyDown.newCursorLocation) {
                $this.get(0).setSelectionRange(resultOfKeyDown.newCursorLocation, resultOfKeyDown.newCursorLocation);
            }

            if(resultOfKeyDown.executeOriginalAction === false) {
                e.preventDefault();
            }
        });

        // prevent invalid characters to be typed
        $this.keypress(function (e) {

            if (EventUtil.isNonPrintableOrControlKeyPressed(e)) {
                return;
            }

            var charCode = String.fromCharCode(e.keyCode | e.charCode);

            if (!DIGIT_PATTERN.test(charCode)) {
                // only allow digits to be typed
                e.preventDefault();
            } else if (PATTERN.test($this.val()) && $this.get(0).selectionStart >= MAX_LENGTH) {
                // if at the end of the completely typed date, do not allow any additional characters anymore
                e.preventDefault();
            }
        });


        $this.keyup(function () {

            var data = $this.val();
            var cursorLocation = $this.get(0).selectionStart;

            // if nothing has changed we do not have to do anything
            if (lastValue === data) {
                return;
            }

            var transformationResult = DateFormatter.transform(data, cursorLocation);

            $this.val(transformationResult.output);
            $this.get(0).setSelectionRange(transformationResult.newCursorLocation, transformationResult.newCursorLocation);

            lastValue = $this.val();
        });
    };

    return DateFormatter;
});

define('module/Message',[],function(){
	
	/**
	 * Constructor
	 * @param type: The type of message, e.g. success, info, warning, error
	 * @param message: A message string. Can be plain text or html
	 */
	var Message = function(obj){
		this.type = obj.type;
		this.message = obj.message;
	};

	Message.prototype.getType = function(){
		return this.type;
	};

	Message.prototype.getMessage = function(){
		return this.message;
	};
	
	return Message;
});

define('module/MessageView',['require','jquery'],function(require){
	var $ = require('jquery');

	/**
	 * View of cnp messages. Create a new message view by calling the constructor.
	 * The message is not injected into the DOM by default.
	 * Call .inject() to inject it into the DOM. 
	 * Constructor
	 * @param elem: The elem the injectMethod should run against
	 * @param method: jQuery DOM inside & outside insertion, e.g. append, prepend, html, text, after, before
	 * @param message: A message Object. Create it first with new Message(type, message)
	 */
	var MessageView = function(obj){
		this.$elem = $(obj.elem);
		this.injectMethod = obj.method;
		this.$button = $('<button type="button" class="wpwl-close">x</button>');
		this.$message = $(['<div class="wpwl-message wpwl-has-', obj.message.getType(), '" style="display:block">',
			obj.message.getMessage(), '</div>'].join(''));
		
		// build
		this.$message.prepend(this.$button);
		
		// events
		this.$button.on('click', $.proxy(this.hide, this));
	};
	
	MessageView.prototype = {
		inject: function(){
			this.$elem[this.injectMethod](this.$message);
			return this;
		},
		show: function(){
			this.$message.show();
			return this;
		},
		hide: function(){
			this.$message.hide();
			return this;
		},
		remove: function(){
			this.$message.remove();
			return this;
		}
	};
	
	return MessageView;
	
});
define('module/State',[],function(){

	var State = {};

	State.pciIframeCommunicationReady = false;
	return State;
});

define('module/SupportMessage',['require','module/Message','shim/ObjectCreate','module/Wpwl','module/I18n'],function(require){
	var Message = require('module/Message');
	var ObjectCreate = require('shim/ObjectCreate');
	var Wpwl = require('module/Wpwl');
    var I18n = require('module/I18n');

	var SupportMessage = function(message){
		// super()
		Message.call(this, {message: message, type: 'error'});
		this.wpwl = Wpwl;
	};

	// extends Message
	SupportMessage.prototype = ObjectCreate(Message.prototype);
	SupportMessage.prototype.constructor = SupportMessage;

	// override
	SupportMessage.prototype.getMessage = function(){
	    return I18n.translate('supportMessage', {
	        message: this.message,
	        ndc: this.wpwl.ndc,
	        timestamp: this.wpwl.timestamp
	    });
	};

	return SupportMessage;
});

define('module/Tracking',['require','jquery','module/Generate','module/Wpwl'],function(require){
    var $ = require("jquery");
    var Generate = require("module/Generate");
    var Wpwl = require("module/Wpwl");

    var url = Generate.string(Wpwl.url, "/v", Wpwl.apiVersion, "/collect");

    var defaults = {
        "ndc": Wpwl.checkout.id,
        "tracking.hostname": window.location.hostname,
        "tracking.href": window.location.href,
        "tracking.userAgent": window.navigator.userAgent
    };

    var Tracking = {};

    Tracking.send = function(object){
        var data = $.extend({}, defaults, object);

        return $.post(url, data);
    };

    /* jshint maxparams: 4 */
    Tracking.event = function(category, action, label, value){
        return Tracking.send({
            "tracking.type": "event",
            "tracking.event.category": category,
            "tracking.event.action": action,
            "tracking.event.label": label,
            "tracking.event.value": value
        });
    };

    Tracking.exception = function(description){
        return Tracking.send({
            "tracking.type": "exception",
            "tracking.exception.description": description
        });
    };

    return Tracking;
});

( function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( 'jquery-ui/version',[ "jquery" ], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
} ( function( $ ) {

$.ui = $.ui || {};

return $.ui.version = "1.12.1";

} ) );

/*!
 * jQuery UI Keycode 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Keycode
//>>group: Core
//>>description: Provide keycodes as keynames
//>>docs: http://api.jqueryui.com/jQuery.ui.keyCode/

( function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( 'jquery-ui/keycode',[ "jquery", "./version" ], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
} ( function( $ ) {
return $.ui.keyCode = {
	BACKSPACE: 8,
	COMMA: 188,
	DELETE: 46,
	DOWN: 40,
	END: 35,
	ENTER: 13,
	ESCAPE: 27,
	HOME: 36,
	LEFT: 37,
	PAGE_DOWN: 34,
	PAGE_UP: 33,
	PERIOD: 190,
	RIGHT: 39,
	SPACE: 32,
	TAB: 9,
	UP: 38
};

} ) );

/*!
 * jQuery UI Position 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/position/
 */

//>>label: Position
//>>group: Core
//>>description: Positions elements relative to other elements.
//>>docs: http://api.jqueryui.com/position/
//>>demos: http://jqueryui.com/position/

( function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( 'jquery-ui/position',[ "jquery", "./version" ], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
}( function( $ ) {
( function() {
var cachedScrollbarWidth,
	max = Math.max,
	abs = Math.abs,
	rhorizontal = /left|center|right/,
	rvertical = /top|center|bottom/,
	roffset = /[\+\-]\d+(\.[\d]+)?%?/,
	rposition = /^\w+/,
	rpercent = /%$/,
	_position = $.fn.position;

function getOffsets( offsets, width, height ) {
	return [
		parseFloat( offsets[ 0 ] ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),
		parseFloat( offsets[ 1 ] ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )
	];
}

function parseCss( element, property ) {
	return parseInt( $.css( element, property ), 10 ) || 0;
}

function getDimensions( elem ) {
	var raw = elem[ 0 ];
	if ( raw.nodeType === 9 ) {
		return {
			width: elem.width(),
			height: elem.height(),
			offset: { top: 0, left: 0 }
		};
	}
	if ( $.isWindow( raw ) ) {
		return {
			width: elem.width(),
			height: elem.height(),
			offset: { top: elem.scrollTop(), left: elem.scrollLeft() }
		};
	}
	if ( raw.preventDefault ) {
		return {
			width: 0,
			height: 0,
			offset: { top: raw.pageY, left: raw.pageX }
		};
	}
	return {
		width: elem.outerWidth(),
		height: elem.outerHeight(),
		offset: elem.offset()
	};
}

$.position = {
	scrollbarWidth: function() {
		if ( cachedScrollbarWidth !== undefined ) {
			return cachedScrollbarWidth;
		}
		var w1, w2,
			div = $( "<div " +
				"style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'>" +
				"<div style='height:100px;width:auto;'></div></div>" ),
			innerDiv = div.children()[ 0 ];

		$( "body" ).append( div );
		w1 = innerDiv.offsetWidth;
		div.css( "overflow", "scroll" );

		w2 = innerDiv.offsetWidth;

		if ( w1 === w2 ) {
			w2 = div[ 0 ].clientWidth;
		}

		div.remove();

		return ( cachedScrollbarWidth = w1 - w2 );
	},
	getScrollInfo: function( within ) {
		var overflowX = within.isWindow || within.isDocument ? "" :
				within.element.css( "overflow-x" ),
			overflowY = within.isWindow || within.isDocument ? "" :
				within.element.css( "overflow-y" ),
			hasOverflowX = overflowX === "scroll" ||
				( overflowX === "auto" && within.width < within.element[ 0 ].scrollWidth ),
			hasOverflowY = overflowY === "scroll" ||
				( overflowY === "auto" && within.height < within.element[ 0 ].scrollHeight );
		return {
			width: hasOverflowY ? $.position.scrollbarWidth() : 0,
			height: hasOverflowX ? $.position.scrollbarWidth() : 0
		};
	},
	getWithinInfo: function( element ) {
		var withinElement = $( element || window ),
			isWindow = $.isWindow( withinElement[ 0 ] ),
			isDocument = !!withinElement[ 0 ] && withinElement[ 0 ].nodeType === 9,
			hasOffset = !isWindow && !isDocument;
		return {
			element: withinElement,
			isWindow: isWindow,
			isDocument: isDocument,
			offset: hasOffset ? $( element ).offset() : { left: 0, top: 0 },
			scrollLeft: withinElement.scrollLeft(),
			scrollTop: withinElement.scrollTop(),
			width: withinElement.outerWidth(),
			height: withinElement.outerHeight()
		};
	}
};

$.fn.position = function( options ) {
	if ( !options || !options.of ) {
		return _position.apply( this, arguments );
	}

	// Make a copy, we don't want to modify arguments
	options = $.extend( {}, options );

	var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,
		target = $( options.of ),
		within = $.position.getWithinInfo( options.within ),
		scrollInfo = $.position.getScrollInfo( within ),
		collision = ( options.collision || "flip" ).split( " " ),
		offsets = {};

	dimensions = getDimensions( target );
	if ( target[ 0 ].preventDefault ) {

		// Force left top to allow flipping
		options.at = "left top";
	}
	targetWidth = dimensions.width;
	targetHeight = dimensions.height;
	targetOffset = dimensions.offset;

	// Clone to reuse original targetOffset later
	basePosition = $.extend( {}, targetOffset );

	// Force my and at to have valid horizontal and vertical positions
	// if a value is missing or invalid, it will be converted to center
	$.each( [ "my", "at" ], function() {
		var pos = ( options[ this ] || "" ).split( " " ),
			horizontalOffset,
			verticalOffset;

		if ( pos.length === 1 ) {
			pos = rhorizontal.test( pos[ 0 ] ) ?
				pos.concat( [ "center" ] ) :
				rvertical.test( pos[ 0 ] ) ?
					[ "center" ].concat( pos ) :
					[ "center", "center" ];
		}
		pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : "center";
		pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : "center";

		// Calculate offsets
		horizontalOffset = roffset.exec( pos[ 0 ] );
		verticalOffset = roffset.exec( pos[ 1 ] );
		offsets[ this ] = [
			horizontalOffset ? horizontalOffset[ 0 ] : 0,
			verticalOffset ? verticalOffset[ 0 ] : 0
		];

		// Reduce to just the positions without the offsets
		options[ this ] = [
			rposition.exec( pos[ 0 ] )[ 0 ],
			rposition.exec( pos[ 1 ] )[ 0 ]
		];
	} );

	// Normalize collision option
	if ( collision.length === 1 ) {
		collision[ 1 ] = collision[ 0 ];
	}

	if ( options.at[ 0 ] === "right" ) {
		basePosition.left += targetWidth;
	} else if ( options.at[ 0 ] === "center" ) {
		basePosition.left += targetWidth / 2;
	}

	if ( options.at[ 1 ] === "bottom" ) {
		basePosition.top += targetHeight;
	} else if ( options.at[ 1 ] === "center" ) {
		basePosition.top += targetHeight / 2;
	}

	atOffset = getOffsets( offsets.at, targetWidth, targetHeight );
	basePosition.left += atOffset[ 0 ];
	basePosition.top += atOffset[ 1 ];

	return this.each( function() {
		var collisionPosition, using,
			elem = $( this ),
			elemWidth = elem.outerWidth(),
			elemHeight = elem.outerHeight(),
			marginLeft = parseCss( this, "marginLeft" ),
			marginTop = parseCss( this, "marginTop" ),
			collisionWidth = elemWidth + marginLeft + parseCss( this, "marginRight" ) +
				scrollInfo.width,
			collisionHeight = elemHeight + marginTop + parseCss( this, "marginBottom" ) +
				scrollInfo.height,
			position = $.extend( {}, basePosition ),
			myOffset = getOffsets( offsets.my, elem.outerWidth(), elem.outerHeight() );

		if ( options.my[ 0 ] === "right" ) {
			position.left -= elemWidth;
		} else if ( options.my[ 0 ] === "center" ) {
			position.left -= elemWidth / 2;
		}

		if ( options.my[ 1 ] === "bottom" ) {
			position.top -= elemHeight;
		} else if ( options.my[ 1 ] === "center" ) {
			position.top -= elemHeight / 2;
		}

		position.left += myOffset[ 0 ];
		position.top += myOffset[ 1 ];

		collisionPosition = {
			marginLeft: marginLeft,
			marginTop: marginTop
		};

		$.each( [ "left", "top" ], function( i, dir ) {
			if ( $.ui.position[ collision[ i ] ] ) {
				$.ui.position[ collision[ i ] ][ dir ]( position, {
					targetWidth: targetWidth,
					targetHeight: targetHeight,
					elemWidth: elemWidth,
					elemHeight: elemHeight,
					collisionPosition: collisionPosition,
					collisionWidth: collisionWidth,
					collisionHeight: collisionHeight,
					offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],
					my: options.my,
					at: options.at,
					within: within,
					elem: elem
				} );
			}
		} );

		if ( options.using ) {

			// Adds feedback as second argument to using callback, if present
			using = function( props ) {
				var left = targetOffset.left - position.left,
					right = left + targetWidth - elemWidth,
					top = targetOffset.top - position.top,
					bottom = top + targetHeight - elemHeight,
					feedback = {
						target: {
							element: target,
							left: targetOffset.left,
							top: targetOffset.top,
							width: targetWidth,
							height: targetHeight
						},
						element: {
							element: elem,
							left: position.left,
							top: position.top,
							width: elemWidth,
							height: elemHeight
						},
						horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
						vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
					};
				if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {
					feedback.horizontal = "center";
				}
				if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {
					feedback.vertical = "middle";
				}
				if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {
					feedback.important = "horizontal";
				} else {
					feedback.important = "vertical";
				}
				options.using.call( this, props, feedback );
			};
		}

		elem.offset( $.extend( position, { using: using } ) );
	} );
};

$.ui.position = {
	fit: {
		left: function( position, data ) {
			var within = data.within,
				withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,
				outerWidth = within.width,
				collisionPosLeft = position.left - data.collisionPosition.marginLeft,
				overLeft = withinOffset - collisionPosLeft,
				overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,
				newOverRight;

			// Element is wider than within
			if ( data.collisionWidth > outerWidth ) {

				// Element is initially over the left side of within
				if ( overLeft > 0 && overRight <= 0 ) {
					newOverRight = position.left + overLeft + data.collisionWidth - outerWidth -
						withinOffset;
					position.left += overLeft - newOverRight;

				// Element is initially over right side of within
				} else if ( overRight > 0 && overLeft <= 0 ) {
					position.left = withinOffset;

				// Element is initially over both left and right sides of within
				} else {
					if ( overLeft > overRight ) {
						position.left = withinOffset + outerWidth - data.collisionWidth;
					} else {
						position.left = withinOffset;
					}
				}

			// Too far left -> align with left edge
			} else if ( overLeft > 0 ) {
				position.left += overLeft;

			// Too far right -> align with right edge
			} else if ( overRight > 0 ) {
				position.left -= overRight;

			// Adjust based on position and margin
			} else {
				position.left = max( position.left - collisionPosLeft, position.left );
			}
		},
		top: function( position, data ) {
			var within = data.within,
				withinOffset = within.isWindow ? within.scrollTop : within.offset.top,
				outerHeight = data.within.height,
				collisionPosTop = position.top - data.collisionPosition.marginTop,
				overTop = withinOffset - collisionPosTop,
				overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,
				newOverBottom;

			// Element is taller than within
			if ( data.collisionHeight > outerHeight ) {

				// Element is initially over the top of within
				if ( overTop > 0 && overBottom <= 0 ) {
					newOverBottom = position.top + overTop + data.collisionHeight - outerHeight -
						withinOffset;
					position.top += overTop - newOverBottom;

				// Element is initially over bottom of within
				} else if ( overBottom > 0 && overTop <= 0 ) {
					position.top = withinOffset;

				// Element is initially over both top and bottom of within
				} else {
					if ( overTop > overBottom ) {
						position.top = withinOffset + outerHeight - data.collisionHeight;
					} else {
						position.top = withinOffset;
					}
				}

			// Too far up -> align with top
			} else if ( overTop > 0 ) {
				position.top += overTop;

			// Too far down -> align with bottom edge
			} else if ( overBottom > 0 ) {
				position.top -= overBottom;

			// Adjust based on position and margin
			} else {
				position.top = max( position.top - collisionPosTop, position.top );
			}
		}
	},
	flip: {
		left: function( position, data ) {
			var within = data.within,
				withinOffset = within.offset.left + within.scrollLeft,
				outerWidth = within.width,
				offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,
				collisionPosLeft = position.left - data.collisionPosition.marginLeft,
				overLeft = collisionPosLeft - offsetLeft,
				overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
				myOffset = data.my[ 0 ] === "left" ?
					-data.elemWidth :
					data.my[ 0 ] === "right" ?
						data.elemWidth :
						0,
				atOffset = data.at[ 0 ] === "left" ?
					data.targetWidth :
					data.at[ 0 ] === "right" ?
						-data.targetWidth :
						0,
				offset = -2 * data.offset[ 0 ],
				newOverRight,
				newOverLeft;

			if ( overLeft < 0 ) {
				newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth -
					outerWidth - withinOffset;
				if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {
					position.left += myOffset + atOffset + offset;
				}
			} else if ( overRight > 0 ) {
				newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset +
					atOffset + offset - offsetLeft;
				if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {
					position.left += myOffset + atOffset + offset;
				}
			}
		},
		top: function( position, data ) {
			var within = data.within,
				withinOffset = within.offset.top + within.scrollTop,
				outerHeight = within.height,
				offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
				collisionPosTop = position.top - data.collisionPosition.marginTop,
				overTop = collisionPosTop - offsetTop,
				overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
				top = data.my[ 1 ] === "top",
				myOffset = top ?
					-data.elemHeight :
					data.my[ 1 ] === "bottom" ?
						data.elemHeight :
						0,
				atOffset = data.at[ 1 ] === "top" ?
					data.targetHeight :
					data.at[ 1 ] === "bottom" ?
						-data.targetHeight :
						0,
				offset = -2 * data.offset[ 1 ],
				newOverTop,
				newOverBottom;
			if ( overTop < 0 ) {
				newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight -
					outerHeight - withinOffset;
				if ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) {
					position.top += myOffset + atOffset + offset;
				}
			} else if ( overBottom > 0 ) {
				newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset +
					offset - offsetTop;
				if ( newOverTop > 0 || abs( newOverTop ) < overBottom ) {
					position.top += myOffset + atOffset + offset;
				}
			}
		}
	},
	flipfit: {
		left: function() {
			$.ui.position.flip.left.apply( this, arguments );
			$.ui.position.fit.left.apply( this, arguments );
		},
		top: function() {
			$.ui.position.flip.top.apply( this, arguments );
			$.ui.position.fit.top.apply( this, arguments );
		}
	}
};

} )();

return $.ui.position;

} ) );

( function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( 'jquery-ui/safe-active-element',[ "jquery", "./version" ], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
} ( function( $ ) {
return $.ui.safeActiveElement = function( document ) {
	var activeElement;

	// Support: IE 9 only
	// IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
	try {
		activeElement = document.activeElement;
	} catch ( error ) {
		activeElement = document.body;
	}

	// Support: IE 9 - 11 only
	// IE may return null instead of an element
	// Interestingly, this only seems to occur when NOT in an iframe
	if ( !activeElement ) {
		activeElement = document.body;
	}

	// Support: IE 11 only
	// IE11 returns a seemingly empty object in some cases when accessing
	// document.activeElement from an <iframe>
	if ( !activeElement.nodeName ) {
		activeElement = document.body;
	}

	return activeElement;
};

} ) );

/*!
 * jQuery UI Unique ID 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: uniqueId
//>>group: Core
//>>description: Functions to generate and remove uniqueId's
//>>docs: http://api.jqueryui.com/uniqueId/

( function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( 'jquery-ui/unique-id',[ "jquery", "./version" ], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
} ( function( $ ) {

return $.fn.extend( {
	uniqueId: ( function() {
		var uuid = 0;

		return function() {
			return this.each( function() {
				if ( !this.id ) {
					this.id = "ui-id-" + ( ++uuid );
				}
			} );
		};
	} )(),

	removeUniqueId: function() {
		return this.each( function() {
			if ( /^ui-id-\d+$/.test( this.id ) ) {
				$( this ).removeAttr( "id" );
			}
		} );
	}
} );

} ) );

/*!
 * jQuery UI Widget 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Widget
//>>group: Core
//>>description: Provides a factory for creating stateful widgets with a common API.
//>>docs: http://api.jqueryui.com/jQuery.widget/
//>>demos: http://jqueryui.com/widget/

( function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( 'jquery-ui/widget',[ "jquery", "./version" ], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
}( function( $ ) {

var widgetUuid = 0;
var widgetSlice = Array.prototype.slice;

$.cleanData = ( function( orig ) {
	return function( elems ) {
		var events, elem, i;
		for ( i = 0; ( elem = elems[ i ] ) != null; i++ ) {
			try {

				// Only trigger remove when necessary to save time
				events = $._data( elem, "events" );
				if ( events && events.remove ) {
					$( elem ).triggerHandler( "remove" );
				}

			// Http://bugs.jquery.com/ticket/8235
			} catch ( e ) {}
		}
		orig( elems );
	};
} )( $.cleanData );

$.widget = function( name, base, prototype ) {
	var existingConstructor, constructor, basePrototype;

	// ProxiedPrototype allows the provided prototype to remain unmodified
	// so that it can be used as a mixin for multiple widgets (#8876)
	var proxiedPrototype = {};

	var namespace = name.split( "." )[ 0 ];
	name = name.split( "." )[ 1 ];
	var fullName = namespace + "-" + name;

	if ( !prototype ) {
		prototype = base;
		base = $.Widget;
	}

	if ( $.isArray( prototype ) ) {
		prototype = $.extend.apply( null, [ {} ].concat( prototype ) );
	}

	// Create selector for plugin
	$.expr[ ":" ][ fullName.toLowerCase() ] = function( elem ) {
		return !!$.data( elem, fullName );
	};

	$[ namespace ] = $[ namespace ] || {};
	existingConstructor = $[ namespace ][ name ];
	constructor = $[ namespace ][ name ] = function( options, element ) {

		// Allow instantiation without "new" keyword
		if ( !this._createWidget ) {
			return new constructor( options, element );
		}

		// Allow instantiation without initializing for simple inheritance
		// must use "new" keyword (the code above always passes args)
		if ( arguments.length ) {
			this._createWidget( options, element );
		}
	};

	// Extend with the existing constructor to carry over any static properties
	$.extend( constructor, existingConstructor, {
		version: prototype.version,

		// Copy the object used to create the prototype in case we need to
		// redefine the widget later
		_proto: $.extend( {}, prototype ),

		// Track widgets that inherit from this widget in case this widget is
		// redefined after a widget inherits from it
		_childConstructors: []
	} );

	basePrototype = new base();

	// We need to make the options hash a property directly on the new instance
	// otherwise we'll modify the options hash on the prototype that we're
	// inheriting from
	basePrototype.options = $.widget.extend( {}, basePrototype.options );
	$.each( prototype, function( prop, value ) {
		if ( !$.isFunction( value ) ) {
			proxiedPrototype[ prop ] = value;
			return;
		}
		proxiedPrototype[ prop ] = ( function() {
			function _super() {
				return base.prototype[ prop ].apply( this, arguments );
			}

			function _superApply( args ) {
				return base.prototype[ prop ].apply( this, args );
			}

			return function() {
				var __super = this._super;
				var __superApply = this._superApply;
				var returnValue;

				this._super = _super;
				this._superApply = _superApply;

				returnValue = value.apply( this, arguments );

				this._super = __super;
				this._superApply = __superApply;

				return returnValue;
			};
		} )();
	} );
	constructor.prototype = $.widget.extend( basePrototype, {

		// TODO: remove support for widgetEventPrefix
		// always use the name + a colon as the prefix, e.g., draggable:start
		// don't prefix for widgets that aren't DOM-based
		widgetEventPrefix: existingConstructor ? ( basePrototype.widgetEventPrefix || name ) : name
	}, proxiedPrototype, {
		constructor: constructor,
		namespace: namespace,
		widgetName: name,
		widgetFullName: fullName
	} );

	// If this widget is being redefined then we need to find all widgets that
	// are inheriting from it and redefine all of them so that they inherit from
	// the new version of this widget. We're essentially trying to replace one
	// level in the prototype chain.
	if ( existingConstructor ) {
		$.each( existingConstructor._childConstructors, function( i, child ) {
			var childPrototype = child.prototype;

			// Redefine the child widget using the same prototype that was
			// originally used, but inherit from the new version of the base
			$.widget( childPrototype.namespace + "." + childPrototype.widgetName, constructor,
				child._proto );
		} );

		// Remove the list of existing child constructors from the old constructor
		// so the old child constructors can be garbage collected
		delete existingConstructor._childConstructors;
	} else {
		base._childConstructors.push( constructor );
	}

	$.widget.bridge( name, constructor );

	return constructor;
};

$.widget.extend = function( target ) {
	var input = widgetSlice.call( arguments, 1 );
	var inputIndex = 0;
	var inputLength = input.length;
	var key;
	var value;

	for ( ; inputIndex < inputLength; inputIndex++ ) {
		for ( key in input[ inputIndex ] ) {
			value = input[ inputIndex ][ key ];
			if ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {

				// Clone objects
				if ( $.isPlainObject( value ) ) {
					target[ key ] = $.isPlainObject( target[ key ] ) ?
						$.widget.extend( {}, target[ key ], value ) :

						// Don't extend strings, arrays, etc. with objects
						$.widget.extend( {}, value );

				// Copy everything else by reference
				} else {
					target[ key ] = value;
				}
			}
		}
	}
	return target;
};

$.widget.bridge = function( name, object ) {
	var fullName = object.prototype.widgetFullName || name;
	$.fn[ name ] = function( options ) {
		var isMethodCall = typeof options === "string";
		var args = widgetSlice.call( arguments, 1 );
		var returnValue = this;

		if ( isMethodCall ) {

			// If this is an empty collection, we need to have the instance method
			// return undefined instead of the jQuery instance
			if ( !this.length && options === "instance" ) {
				returnValue = undefined;
			} else {
				this.each( function() {
					var methodValue;
					var instance = $.data( this, fullName );

					if ( options === "instance" ) {
						returnValue = instance;
						return false;
					}

					if ( !instance ) {
						return $.error( "cannot call methods on " + name +
							" prior to initialization; " +
							"attempted to call method '" + options + "'" );
					}

					if ( !$.isFunction( instance[ options ] ) || options.charAt( 0 ) === "_" ) {
						return $.error( "no such method '" + options + "' for " + name +
							" widget instance" );
					}

					methodValue = instance[ options ].apply( instance, args );

					if ( methodValue !== instance && methodValue !== undefined ) {
						returnValue = methodValue && methodValue.jquery ?
							returnValue.pushStack( methodValue.get() ) :
							methodValue;
						return false;
					}
				} );
			}
		} else {

			// Allow multiple hashes to be passed on init
			if ( args.length ) {
				options = $.widget.extend.apply( null, [ options ].concat( args ) );
			}

			this.each( function() {
				var instance = $.data( this, fullName );
				if ( instance ) {
					instance.option( options || {} );
					if ( instance._init ) {
						instance._init();
					}
				} else {
					$.data( this, fullName, new object( options, this ) );
				}
			} );
		}

		return returnValue;
	};
};

$.Widget = function( /* options, element */ ) {};
$.Widget._childConstructors = [];

$.Widget.prototype = {
	widgetName: "widget",
	widgetEventPrefix: "",
	defaultElement: "<div>",

	options: {
		classes: {},
		disabled: false,

		// Callbacks
		create: null
	},

	_createWidget: function( options, element ) {
		element = $( element || this.defaultElement || this )[ 0 ];
		this.element = $( element );
		this.uuid = widgetUuid++;
		this.eventNamespace = "." + this.widgetName + this.uuid;

		this.bindings = $();
		this.hoverable = $();
		this.focusable = $();
		this.classesElementLookup = {};

		if ( element !== this ) {
			$.data( element, this.widgetFullName, this );
			this._on( true, this.element, {
				remove: function( event ) {
					if ( event.target === element ) {
						this.destroy();
					}
				}
			} );
			this.document = $( element.style ?

				// Element within the document
				element.ownerDocument :

				// Element is window or document
				element.document || element );
			this.window = $( this.document[ 0 ].defaultView || this.document[ 0 ].parentWindow );
		}

		this.options = $.widget.extend( {},
			this.options,
			this._getCreateOptions(),
			options );

		this._create();

		if ( this.options.disabled ) {
			this._setOptionDisabled( this.options.disabled );
		}

		this._trigger( "create", null, this._getCreateEventData() );
		this._init();
	},

	_getCreateOptions: function() {
		return {};
	},

	_getCreateEventData: $.noop,

	_create: $.noop,

	_init: $.noop,

	destroy: function() {
		var that = this;

		this._destroy();
		$.each( this.classesElementLookup, function( key, value ) {
			that._removeClass( value, key );
		} );

		// We can probably remove the unbind calls in 2.0
		// all event bindings should go through this._on()
		this.element
			.off( this.eventNamespace )
			.removeData( this.widgetFullName );
		this.widget()
			.off( this.eventNamespace )
			.removeAttr( "aria-disabled" );

		// Clean up events and states
		this.bindings.off( this.eventNamespace );
	},

	_destroy: $.noop,

	widget: function() {
		return this.element;
	},

	option: function( key, value ) {
		var options = key;
		var parts;
		var curOption;
		var i;

		if ( arguments.length === 0 ) {

			// Don't return a reference to the internal hash
			return $.widget.extend( {}, this.options );
		}

		if ( typeof key === "string" ) {

			// Handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
			options = {};
			parts = key.split( "." );
			key = parts.shift();
			if ( parts.length ) {
				curOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );
				for ( i = 0; i < parts.length - 1; i++ ) {
					curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};
					curOption = curOption[ parts[ i ] ];
				}
				key = parts.pop();
				if ( arguments.length === 1 ) {
					return curOption[ key ] === undefined ? null : curOption[ key ];
				}
				curOption[ key ] = value;
			} else {
				if ( arguments.length === 1 ) {
					return this.options[ key ] === undefined ? null : this.options[ key ];
				}
				options[ key ] = value;
			}
		}

		this._setOptions( options );

		return this;
	},

	_setOptions: function( options ) {
		var key;

		for ( key in options ) {
			this._setOption( key, options[ key ] );
		}

		return this;
	},

	_setOption: function( key, value ) {
		if ( key === "classes" ) {
			this._setOptionClasses( value );
		}

		this.options[ key ] = value;

		if ( key === "disabled" ) {
			this._setOptionDisabled( value );
		}

		return this;
	},

	_setOptionClasses: function( value ) {
		var classKey, elements, currentElements;

		for ( classKey in value ) {
			currentElements = this.classesElementLookup[ classKey ];
			if ( value[ classKey ] === this.options.classes[ classKey ] ||
					!currentElements ||
					!currentElements.length ) {
				continue;
			}

			// We are doing this to create a new jQuery object because the _removeClass() call
			// on the next line is going to destroy the reference to the current elements being
			// tracked. We need to save a copy of this collection so that we can add the new classes
			// below.
			elements = $( currentElements.get() );
			this._removeClass( currentElements, classKey );

			// We don't use _addClass() here, because that uses this.options.classes
			// for generating the string of classes. We want to use the value passed in from
			// _setOption(), this is the new value of the classes option which was passed to
			// _setOption(). We pass this value directly to _classes().
			elements.addClass( this._classes( {
				element: elements,
				keys: classKey,
				classes: value,
				add: true
			} ) );
		}
	},

	_setOptionDisabled: function( value ) {
		this._toggleClass( this.widget(), this.widgetFullName + "-disabled", null, !!value );

		// If the widget is becoming disabled, then nothing is interactive
		if ( value ) {
			this._removeClass( this.hoverable, null, "ui-state-hover" );
			this._removeClass( this.focusable, null, "ui-state-focus" );
		}
	},

	enable: function() {
		return this._setOptions( { disabled: false } );
	},

	disable: function() {
		return this._setOptions( { disabled: true } );
	},

	_classes: function( options ) {
		var full = [];
		var that = this;

		options = $.extend( {
			element: this.element,
			classes: this.options.classes || {}
		}, options );

		function processClassString( classes, checkOption ) {
			var current, i;
			for ( i = 0; i < classes.length; i++ ) {
				current = that.classesElementLookup[ classes[ i ] ] || $();
				if ( options.add ) {
					current = $( $.unique( current.get().concat( options.element.get() ) ) );
				} else {
					current = $( current.not( options.element ).get() );
				}
				that.classesElementLookup[ classes[ i ] ] = current;
				full.push( classes[ i ] );
				if ( checkOption && options.classes[ classes[ i ] ] ) {
					full.push( options.classes[ classes[ i ] ] );
				}
			}
		}

		this._on( options.element, {
			"remove": "_untrackClassesElement"
		} );

		if ( options.keys ) {
			processClassString( options.keys.match( /\S+/g ) || [], true );
		}
		if ( options.extra ) {
			processClassString( options.extra.match( /\S+/g ) || [] );
		}

		return full.join( " " );
	},

	_untrackClassesElement: function( event ) {
		var that = this;
		$.each( that.classesElementLookup, function( key, value ) {
			if ( $.inArray( event.target, value ) !== -1 ) {
				that.classesElementLookup[ key ] = $( value.not( event.target ).get() );
			}
		} );
	},

	_removeClass: function( element, keys, extra ) {
		return this._toggleClass( element, keys, extra, false );
	},

	_addClass: function( element, keys, extra ) {
		return this._toggleClass( element, keys, extra, true );
	},

	_toggleClass: function( element, keys, extra, add ) {
		add = ( typeof add === "boolean" ) ? add : extra;
		var shift = ( typeof element === "string" || element === null ),
			options = {
				extra: shift ? keys : extra,
				keys: shift ? element : keys,
				element: shift ? this.element : element,
				add: add
			};
		options.element.toggleClass( this._classes( options ), add );
		return this;
	},

	_on: function( suppressDisabledCheck, element, handlers ) {
		var delegateElement;
		var instance = this;

		// No suppressDisabledCheck flag, shuffle arguments
		if ( typeof suppressDisabledCheck !== "boolean" ) {
			handlers = element;
			element = suppressDisabledCheck;
			suppressDisabledCheck = false;
		}

		// No element argument, shuffle and use this.element
		if ( !handlers ) {
			handlers = element;
			element = this.element;
			delegateElement = this.widget();
		} else {
			element = delegateElement = $( element );
			this.bindings = this.bindings.add( element );
		}

		$.each( handlers, function( event, handler ) {
			function handlerProxy() {

				// Allow widgets to customize the disabled handling
				// - disabled as an array instead of boolean
				// - disabled class as method for disabling individual parts
				if ( !suppressDisabledCheck &&
						( instance.options.disabled === true ||
						$( this ).hasClass( "ui-state-disabled" ) ) ) {
					return;
				}
				return ( typeof handler === "string" ? instance[ handler ] : handler )
					.apply( instance, arguments );
			}

			// Copy the guid so direct unbinding works
			if ( typeof handler !== "string" ) {
				handlerProxy.guid = handler.guid =
					handler.guid || handlerProxy.guid || $.guid++;
			}

			var match = event.match( /^([\w:-]*)\s*(.*)$/ );
			var eventName = match[ 1 ] + instance.eventNamespace;
			var selector = match[ 2 ];

			if ( selector ) {
				delegateElement.on( eventName, selector, handlerProxy );
			} else {
				element.on( eventName, handlerProxy );
			}
		} );
	},

	_off: function( element, eventName ) {
		eventName = ( eventName || "" ).split( " " ).join( this.eventNamespace + " " ) +
			this.eventNamespace;
		element.off( eventName ).off( eventName );

		// Clear the stack to avoid memory leaks (#10056)
		this.bindings = $( this.bindings.not( element ).get() );
		this.focusable = $( this.focusable.not( element ).get() );
		this.hoverable = $( this.hoverable.not( element ).get() );
	},

	_delay: function( handler, delay ) {
		function handlerProxy() {
			return ( typeof handler === "string" ? instance[ handler ] : handler )
				.apply( instance, arguments );
		}
		var instance = this;
		return setTimeout( handlerProxy, delay || 0 );
	},

	_hoverable: function( element ) {
		this.hoverable = this.hoverable.add( element );
		this._on( element, {
			mouseenter: function( event ) {
				this._addClass( $( event.currentTarget ), null, "ui-state-hover" );
			},
			mouseleave: function( event ) {
				this._removeClass( $( event.currentTarget ), null, "ui-state-hover" );
			}
		} );
	},

	_focusable: function( element ) {
		this.focusable = this.focusable.add( element );
		this._on( element, {
			focusin: function( event ) {
				this._addClass( $( event.currentTarget ), null, "ui-state-focus" );
			},
			focusout: function( event ) {
				this._removeClass( $( event.currentTarget ), null, "ui-state-focus" );
			}
		} );
	},

	_trigger: function( type, event, data ) {
		var prop, orig;
		var callback = this.options[ type ];

		data = data || {};
		event = $.Event( event );
		event.type = ( type === this.widgetEventPrefix ?
			type :
			this.widgetEventPrefix + type ).toLowerCase();

		// The original event may come from any element
		// so we need to reset the target on the new event
		event.target = this.element[ 0 ];

		// Copy original event properties over to the new event
		orig = event.originalEvent;
		if ( orig ) {
			for ( prop in orig ) {
				if ( !( prop in event ) ) {
					event[ prop ] = orig[ prop ];
				}
			}
		}

		this.element.trigger( event, data );
		return !( $.isFunction( callback ) &&
			callback.apply( this.element[ 0 ], [ event ].concat( data ) ) === false ||
			event.isDefaultPrevented() );
	}
};

$.each( { show: "fadeIn", hide: "fadeOut" }, function( method, defaultEffect ) {
	$.Widget.prototype[ "_" + method ] = function( element, options, callback ) {
		if ( typeof options === "string" ) {
			options = { effect: options };
		}

		var hasOptions;
		var effectName = !options ?
			method :
			options === true || typeof options === "number" ?
				defaultEffect :
				options.effect || defaultEffect;

		options = options || {};
		if ( typeof options === "number" ) {
			options = { duration: options };
		}

		hasOptions = !$.isEmptyObject( options );
		options.complete = callback;

		if ( options.delay ) {
			element.delay( options.delay );
		}

		if ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {
			element[ method ]( options );
		} else if ( effectName !== method && element[ effectName ] ) {
			element[ effectName ]( options.duration, options.easing, callback );
		} else {
			element.queue( function( next ) {
				$( this )[ method ]();
				if ( callback ) {
					callback.call( element[ 0 ] );
				}
				next();
			} );
		}
	};
} );

return $.widget;

} ) );

/*!
 * jQuery UI Menu 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Menu
//>>group: Widgets
//>>description: Creates nestable menus.
//>>docs: http://api.jqueryui.com/menu/
//>>demos: http://jqueryui.com/menu/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/menu.css
//>>css.theme: ../../themes/base/theme.css

( function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( 'jquery-ui/widgets/menu',[
			"jquery",
			"../keycode",
			"../position",
			"../safe-active-element",
			"../unique-id",
			"../version",
			"../widget"
		], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
}( function( $ ) {

return $.widget( "ui.menu", {
	version: "1.12.1",
	defaultElement: "<ul>",
	delay: 300,
	options: {
		icons: {
			submenu: "ui-icon-caret-1-e"
		},
		items: "> *",
		menus: "ul",
		position: {
			my: "left top",
			at: "right top"
		},
		role: "menu",

		// Callbacks
		blur: null,
		focus: null,
		select: null
	},

	_create: function() {
		this.activeMenu = this.element;

		// Flag used to prevent firing of the click handler
		// as the event bubbles up through nested menus
		this.mouseHandled = false;
		this.element
			.uniqueId()
			.attr( {
				role: this.options.role,
				tabIndex: 0
			} );

		this._addClass( "ui-menu", "ui-widget ui-widget-content" );
		this._on( {

			// Prevent focus from sticking to links inside menu after clicking
			// them (focus should always stay on UL during navigation).
			"mousedown .ui-menu-item": function( event ) {
				event.preventDefault();
			},
			"click .ui-menu-item": function( event ) {
				var target = $( event.target );
				var active = $( $.ui.safeActiveElement( this.document[ 0 ] ) );
				if ( !this.mouseHandled && target.not( ".ui-state-disabled" ).length ) {
					this.select( event );

					// Only set the mouseHandled flag if the event will bubble, see #9469.
					if ( !event.isPropagationStopped() ) {
						this.mouseHandled = true;
					}

					// Open submenu on click
					if ( target.has( ".ui-menu" ).length ) {
						this.expand( event );
					} else if ( !this.element.is( ":focus" ) &&
							active.closest( ".ui-menu" ).length ) {

						// Redirect focus to the menu
						this.element.trigger( "focus", [ true ] );

						// If the active item is on the top level, let it stay active.
						// Otherwise, blur the active item since it is no longer visible.
						if ( this.active && this.active.parents( ".ui-menu" ).length === 1 ) {
							clearTimeout( this.timer );
						}
					}
				}
			},
			"mouseenter .ui-menu-item": function( event ) {

				// Ignore mouse events while typeahead is active, see #10458.
				// Prevents focusing the wrong item when typeahead causes a scroll while the mouse
				// is over an item in the menu
				if ( this.previousFilter ) {
					return;
				}

				var actualTarget = $( event.target ).closest( ".ui-menu-item" ),
					target = $( event.currentTarget );

				// Ignore bubbled events on parent items, see #11641
				if ( actualTarget[ 0 ] !== target[ 0 ] ) {
					return;
				}

				// Remove ui-state-active class from siblings of the newly focused menu item
				// to avoid a jump caused by adjacent elements both having a class with a border
				this._removeClass( target.siblings().children( ".ui-state-active" ),
					null, "ui-state-active" );
				this.focus( event, target );
			},
			mouseleave: "collapseAll",
			"mouseleave .ui-menu": "collapseAll",
			focus: function( event, keepActiveItem ) {

				// If there's already an active item, keep it active
				// If not, activate the first item
				var item = this.active || this.element.find( this.options.items ).eq( 0 );

				if ( !keepActiveItem ) {
					this.focus( event, item );
				}
			},
			blur: function( event ) {
				this._delay( function() {
					var notContained = !$.contains(
						this.element[ 0 ],
						$.ui.safeActiveElement( this.document[ 0 ] )
					);
					if ( notContained ) {
						this.collapseAll( event );
					}
				} );
			},
			keydown: "_keydown"
		} );

		this.refresh();

		// Clicks outside of a menu collapse any open menus
		this._on( this.document, {
			click: function( event ) {
				if ( this._closeOnDocumentClick( event ) ) {
					this.collapseAll( event );
				}

				// Reset the mouseHandled flag
				this.mouseHandled = false;
			}
		} );
	},

	_destroy: function() {
		var items = this.element.find( ".ui-menu-item" )
				.removeAttr( "role aria-disabled" ),
			submenus = items.children( ".ui-menu-item-wrapper" )
				.removeUniqueId()
				.removeAttr( "tabIndex role aria-haspopup" );

		// Destroy (sub)menus
		this.element
			.removeAttr( "aria-activedescendant" )
			.find( ".ui-menu" ).addBack()
				.removeAttr( "role aria-labelledby aria-expanded aria-hidden aria-disabled " +
					"tabIndex" )
				.removeUniqueId()
				.show();

		submenus.children().each( function() {
			var elem = $( this );
			if ( elem.data( "ui-menu-submenu-caret" ) ) {
				elem.remove();
			}
		} );
	},

	_keydown: function( event ) {
		var match, prev, character, skip,
			preventDefault = true;

		switch ( event.keyCode ) {
		case $.ui.keyCode.PAGE_UP:
			this.previousPage( event );
			break;
		case $.ui.keyCode.PAGE_DOWN:
			this.nextPage( event );
			break;
		case $.ui.keyCode.HOME:
			this._move( "first", "first", event );
			break;
		case $.ui.keyCode.END:
			this._move( "last", "last", event );
			break;
		case $.ui.keyCode.UP:
			this.previous( event );
			break;
		case $.ui.keyCode.DOWN:
			this.next( event );
			break;
		case $.ui.keyCode.LEFT:
			this.collapse( event );
			break;
		case $.ui.keyCode.RIGHT:
			if ( this.active && !this.active.is( ".ui-state-disabled" ) ) {
				this.expand( event );
			}
			break;
		case $.ui.keyCode.ENTER:
		case $.ui.keyCode.SPACE:
			this._activate( event );
			break;
		case $.ui.keyCode.ESCAPE:
			this.collapse( event );
			break;
		default:
			preventDefault = false;
			prev = this.previousFilter || "";
			skip = false;

			// Support number pad values
			character = event.keyCode >= 96 && event.keyCode <= 105 ?
				( event.keyCode - 96 ).toString() : String.fromCharCode( event.keyCode );

			clearTimeout( this.filterTimer );

			if ( character === prev ) {
				skip = true;
			} else {
				character = prev + character;
			}

			match = this._filterMenuItems( character );
			match = skip && match.index( this.active.next() ) !== -1 ?
				this.active.nextAll( ".ui-menu-item" ) :
				match;

			// If no matches on the current filter, reset to the last character pressed
			// to move down the menu to the first item that starts with that character
			if ( !match.length ) {
				character = String.fromCharCode( event.keyCode );
				match = this._filterMenuItems( character );
			}

			if ( match.length ) {
				this.focus( event, match );
				this.previousFilter = character;
				this.filterTimer = this._delay( function() {
					delete this.previousFilter;
				}, 1000 );
			} else {
				delete this.previousFilter;
			}
		}

		if ( preventDefault ) {
			event.preventDefault();
		}
	},

	_activate: function( event ) {
		if ( this.active && !this.active.is( ".ui-state-disabled" ) ) {
			if ( this.active.children( "[aria-haspopup='true']" ).length ) {
				this.expand( event );
			} else {
				this.select( event );
			}
		}
	},

	refresh: function() {
		var menus, items, newSubmenus, newItems, newWrappers,
			that = this,
			icon = this.options.icons.submenu,
			submenus = this.element.find( this.options.menus );

		this._toggleClass( "ui-menu-icons", null, !!this.element.find( ".ui-icon" ).length );

		// Initialize nested menus
		newSubmenus = submenus.filter( ":not(.ui-menu)" )
			.hide()
			.attr( {
				role: this.options.role,
				"aria-hidden": "true",
				"aria-expanded": "false"
			} )
			.each( function() {
				var menu = $( this ),
					item = menu.prev(),
					submenuCaret = $( "<span>" ).data( "ui-menu-submenu-caret", true );

				that._addClass( submenuCaret, "ui-menu-icon", "ui-icon " + icon );
				item
					.attr( "aria-haspopup", "true" )
					.prepend( submenuCaret );
				menu.attr( "aria-labelledby", item.attr( "id" ) );
			} );

		this._addClass( newSubmenus, "ui-menu", "ui-widget ui-widget-content ui-front" );

		menus = submenus.add( this.element );
		items = menus.find( this.options.items );

		// Initialize menu-items containing spaces and/or dashes only as dividers
		items.not( ".ui-menu-item" ).each( function() {
			var item = $( this );
			if ( that._isDivider( item ) ) {
				that._addClass( item, "ui-menu-divider", "ui-widget-content" );
			}
		} );

		// Don't refresh list items that are already adapted
		newItems = items.not( ".ui-menu-item, .ui-menu-divider" );
		newWrappers = newItems.children()
			.not( ".ui-menu" )
				.uniqueId()
				.attr( {
					tabIndex: -1,
					role: this._itemRole()
				} );
		this._addClass( newItems, "ui-menu-item" )
			._addClass( newWrappers, "ui-menu-item-wrapper" );

		// Add aria-disabled attribute to any disabled menu item
		items.filter( ".ui-state-disabled" ).attr( "aria-disabled", "true" );

		// If the active item has been removed, blur the menu
		if ( this.active && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {
			this.blur();
		}
	},

	_itemRole: function() {
		return {
			menu: "menuitem",
			listbox: "option"
		}[ this.options.role ];
	},

	_setOption: function( key, value ) {
		if ( key === "icons" ) {
			var icons = this.element.find( ".ui-menu-icon" );
			this._removeClass( icons, null, this.options.icons.submenu )
				._addClass( icons, null, value.submenu );
		}
		this._super( key, value );
	},

	_setOptionDisabled: function( value ) {
		this._super( value );

		this.element.attr( "aria-disabled", String( value ) );
		this._toggleClass( null, "ui-state-disabled", !!value );
	},

	focus: function( event, item ) {
		var nested, focused, activeParent;
		this.blur( event, event && event.type === "focus" );

		this._scrollIntoView( item );

		this.active = item.first();

		focused = this.active.children( ".ui-menu-item-wrapper" );
		this._addClass( focused, null, "ui-state-active" );

		// Only update aria-activedescendant if there's a role
		// otherwise we assume focus is managed elsewhere
		if ( this.options.role ) {
			this.element.attr( "aria-activedescendant", focused.attr( "id" ) );
		}

		// Highlight active parent menu item, if any
		activeParent = this.active
			.parent()
				.closest( ".ui-menu-item" )
					.children( ".ui-menu-item-wrapper" );
		this._addClass( activeParent, null, "ui-state-active" );

		if ( event && event.type === "keydown" ) {
			this._close();
		} else {
			this.timer = this._delay( function() {
				this._close();
			}, this.delay );
		}

		nested = item.children( ".ui-menu" );
		if ( nested.length && event && ( /^mouse/.test( event.type ) ) ) {
			this._startOpening( nested );
		}
		this.activeMenu = item.parent();

		this._trigger( "focus", event, { item: item } );
	},

	_scrollIntoView: function( item ) {
		var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;
		if ( this._hasScroll() ) {
			borderTop = parseFloat( $.css( this.activeMenu[ 0 ], "borderTopWidth" ) ) || 0;
			paddingTop = parseFloat( $.css( this.activeMenu[ 0 ], "paddingTop" ) ) || 0;
			offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;
			scroll = this.activeMenu.scrollTop();
			elementHeight = this.activeMenu.height();
			itemHeight = item.outerHeight();

			if ( offset < 0 ) {
				this.activeMenu.scrollTop( scroll + offset );
			} else if ( offset + itemHeight > elementHeight ) {
				this.activeMenu.scrollTop( scroll + offset - elementHeight + itemHeight );
			}
		}
	},

	blur: function( event, fromFocus ) {
		if ( !fromFocus ) {
			clearTimeout( this.timer );
		}

		if ( !this.active ) {
			return;
		}

		this._removeClass( this.active.children( ".ui-menu-item-wrapper" ),
			null, "ui-state-active" );

		this._trigger( "blur", event, { item: this.active } );
		this.active = null;
	},

	_startOpening: function( submenu ) {
		clearTimeout( this.timer );

		// Don't open if already open fixes a Firefox bug that caused a .5 pixel
		// shift in the submenu position when mousing over the caret icon
		if ( submenu.attr( "aria-hidden" ) !== "true" ) {
			return;
		}

		this.timer = this._delay( function() {
			this._close();
			this._open( submenu );
		}, this.delay );
	},

	_open: function( submenu ) {
		var position = $.extend( {
			of: this.active
		}, this.options.position );

		clearTimeout( this.timer );
		this.element.find( ".ui-menu" ).not( submenu.parents( ".ui-menu" ) )
			.hide()
			.attr( "aria-hidden", "true" );

		submenu
			.show()
			.removeAttr( "aria-hidden" )
			.attr( "aria-expanded", "true" )
			.position( position );
	},

	collapseAll: function( event, all ) {
		clearTimeout( this.timer );
		this.timer = this._delay( function() {

			// If we were passed an event, look for the submenu that contains the event
			var currentMenu = all ? this.element :
				$( event && event.target ).closest( this.element.find( ".ui-menu" ) );

			// If we found no valid submenu ancestor, use the main menu to close all
			// sub menus anyway
			if ( !currentMenu.length ) {
				currentMenu = this.element;
			}

			this._close( currentMenu );

			this.blur( event );

			// Work around active item staying active after menu is blurred
			this._removeClass( currentMenu.find( ".ui-state-active" ), null, "ui-state-active" );

			this.activeMenu = currentMenu;
		}, this.delay );
	},

	// With no arguments, closes the currently active menu - if nothing is active
	// it closes all menus.  If passed an argument, it will search for menus BELOW
	_close: function( startMenu ) {
		if ( !startMenu ) {
			startMenu = this.active ? this.active.parent() : this.element;
		}

		startMenu.find( ".ui-menu" )
			.hide()
			.attr( "aria-hidden", "true" )
			.attr( "aria-expanded", "false" );
	},

	_closeOnDocumentClick: function( event ) {
		return !$( event.target ).closest( ".ui-menu" ).length;
	},

	_isDivider: function( item ) {

		// Match hyphen, em dash, en dash
		return !/[^\-\u2014\u2013\s]/.test( item.text() );
	},

	collapse: function( event ) {
		var newItem = this.active &&
			this.active.parent().closest( ".ui-menu-item", this.element );
		if ( newItem && newItem.length ) {
			this._close();
			this.focus( event, newItem );
		}
	},

	expand: function( event ) {
		var newItem = this.active &&
			this.active
				.children( ".ui-menu " )
					.find( this.options.items )
						.first();

		if ( newItem && newItem.length ) {
			this._open( newItem.parent() );

			// Delay so Firefox will not hide activedescendant change in expanding submenu from AT
			this._delay( function() {
				this.focus( event, newItem );
			} );
		}
	},

	next: function( event ) {
		this._move( "next", "first", event );
	},

	previous: function( event ) {
		this._move( "prev", "last", event );
	},

	isFirstItem: function() {
		return this.active && !this.active.prevAll( ".ui-menu-item" ).length;
	},

	isLastItem: function() {
		return this.active && !this.active.nextAll( ".ui-menu-item" ).length;
	},

	_move: function( direction, filter, event ) {
		var next;
		if ( this.active ) {
			if ( direction === "first" || direction === "last" ) {
				next = this.active
					[ direction === "first" ? "prevAll" : "nextAll" ]( ".ui-menu-item" )
					.eq( -1 );
			} else {
				next = this.active
					[ direction + "All" ]( ".ui-menu-item" )
					.eq( 0 );
			}
		}
		if ( !next || !next.length || !this.active ) {
			next = this.activeMenu.find( this.options.items )[ filter ]();
		}

		this.focus( event, next );
	},

	nextPage: function( event ) {
		var item, base, height;

		if ( !this.active ) {
			this.next( event );
			return;
		}
		if ( this.isLastItem() ) {
			return;
		}
		if ( this._hasScroll() ) {
			base = this.active.offset().top;
			height = this.element.height();
			this.active.nextAll( ".ui-menu-item" ).each( function() {
				item = $( this );
				return item.offset().top - base - height < 0;
			} );

			this.focus( event, item );
		} else {
			this.focus( event, this.activeMenu.find( this.options.items )
				[ !this.active ? "first" : "last" ]() );
		}
	},

	previousPage: function( event ) {
		var item, base, height;
		if ( !this.active ) {
			this.next( event );
			return;
		}
		if ( this.isFirstItem() ) {
			return;
		}
		if ( this._hasScroll() ) {
			base = this.active.offset().top;
			height = this.element.height();
			this.active.prevAll( ".ui-menu-item" ).each( function() {
				item = $( this );
				return item.offset().top - base + height > 0;
			} );

			this.focus( event, item );
		} else {
			this.focus( event, this.activeMenu.find( this.options.items ).first() );
		}
	},

	_hasScroll: function() {
		return this.element.outerHeight() < this.element.prop( "scrollHeight" );
	},

	select: function( event ) {

		// TODO: It should never be possible to not have an active item at this
		// point, but the tests don't trigger mouseenter before click.
		this.active = this.active || $( event.target ).closest( ".ui-menu-item" );
		var ui = { item: this.active };
		if ( !this.active.has( ".ui-menu" ).length ) {
			this.collapseAll( event, true );
		}
		this._trigger( "select", event, ui );
	},

	_filterMenuItems: function( character ) {
		var escapedCharacter = character.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" ),
			regex = new RegExp( "^" + escapedCharacter, "i" );

		return this.activeMenu
			.find( this.options.items )

				// Only match on items, not dividers or other content (#10571)
				.filter( ".ui-menu-item" )
					.filter( function() {
						return regex.test(
							$.trim( $( this ).children( ".ui-menu-item-wrapper" ).text() ) );
					} );
	}
} );

} ) );

/*!
 * jQuery UI Autocomplete 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Autocomplete
//>>group: Widgets
//>>description: Lists suggested words as the user is typing.
//>>docs: http://api.jqueryui.com/autocomplete/
//>>demos: http://jqueryui.com/autocomplete/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/autocomplete.css
//>>css.theme: ../../themes/base/theme.css

( function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( 'jquery-ui/widgets/autocomplete',[
			"jquery",
			"./menu",
			"../keycode",
			"../position",
			"../safe-active-element",
			"../version",
			"../widget"
		], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
}( function( $ ) {

$.widget( "ui.autocomplete", {
	version: "1.12.1",
	defaultElement: "<input>",
	options: {
		appendTo: null,
		autoFocus: false,
		delay: 300,
		minLength: 1,
		position: {
			my: "left top",
			at: "left bottom",
			collision: "none"
		},
		source: null,

		// Callbacks
		change: null,
		close: null,
		focus: null,
		open: null,
		response: null,
		search: null,
		select: null
	},

	requestIndex: 0,
	pending: 0,

	_create: function() {

		// Some browsers only repeat keydown events, not keypress events,
		// so we use the suppressKeyPress flag to determine if we've already
		// handled the keydown event. #7269
		// Unfortunately the code for & in keypress is the same as the up arrow,
		// so we use the suppressKeyPressRepeat flag to avoid handling keypress
		// events when we know the keydown event was used to modify the
		// search term. #7799
		var suppressKeyPress, suppressKeyPressRepeat, suppressInput,
			nodeName = this.element[ 0 ].nodeName.toLowerCase(),
			isTextarea = nodeName === "textarea",
			isInput = nodeName === "input";

		// Textareas are always multi-line
		// Inputs are always single-line, even if inside a contentEditable element
		// IE also treats inputs as contentEditable
		// All other element types are determined by whether or not they're contentEditable
		this.isMultiLine = isTextarea || !isInput && this._isContentEditable( this.element );

		this.valueMethod = this.element[ isTextarea || isInput ? "val" : "text" ];
		this.isNewMenu = true;

		this._addClass( "ui-autocomplete-input" );
		this.element.attr( "autocomplete", "off" );

		this._on( this.element, {
			keydown: function( event ) {
				if ( this.element.prop( "readOnly" ) ) {
					suppressKeyPress = true;
					suppressInput = true;
					suppressKeyPressRepeat = true;
					return;
				}

				suppressKeyPress = false;
				suppressInput = false;
				suppressKeyPressRepeat = false;
				var keyCode = $.ui.keyCode;
				switch ( event.keyCode ) {
				case keyCode.PAGE_UP:
					suppressKeyPress = true;
					this._move( "previousPage", event );
					break;
				case keyCode.PAGE_DOWN:
					suppressKeyPress = true;
					this._move( "nextPage", event );
					break;
				case keyCode.UP:
					suppressKeyPress = true;
					this._keyEvent( "previous", event );
					break;
				case keyCode.DOWN:
					suppressKeyPress = true;
					this._keyEvent( "next", event );
					break;
				case keyCode.ENTER:

					// when menu is open and has focus
					if ( this.menu.active ) {

						// #6055 - Opera still allows the keypress to occur
						// which causes forms to submit
						suppressKeyPress = true;
						event.preventDefault();
						this.menu.select( event );
					}
					break;
				case keyCode.TAB:
					if ( this.menu.active ) {
						this.menu.select( event );
					}
					break;
				case keyCode.ESCAPE:
					if ( this.menu.element.is( ":visible" ) ) {
						if ( !this.isMultiLine ) {
							this._value( this.term );
						}
						this.close( event );

						// Different browsers have different default behavior for escape
						// Single press can mean undo or clear
						// Double press in IE means clear the whole form
						event.preventDefault();
					}
					break;
				default:
					suppressKeyPressRepeat = true;

					// search timeout should be triggered before the input value is changed
					this._searchTimeout( event );
					break;
				}
			},
			keypress: function( event ) {
				if ( suppressKeyPress ) {
					suppressKeyPress = false;
					if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
						event.preventDefault();
					}
					return;
				}
				if ( suppressKeyPressRepeat ) {
					return;
				}

				// Replicate some key handlers to allow them to repeat in Firefox and Opera
				var keyCode = $.ui.keyCode;
				switch ( event.keyCode ) {
				case keyCode.PAGE_UP:
					this._move( "previousPage", event );
					break;
				case keyCode.PAGE_DOWN:
					this._move( "nextPage", event );
					break;
				case keyCode.UP:
					this._keyEvent( "previous", event );
					break;
				case keyCode.DOWN:
					this._keyEvent( "next", event );
					break;
				}
			},
			input: function( event ) {
				if ( suppressInput ) {
					suppressInput = false;
					event.preventDefault();
					return;
				}
				this._searchTimeout( event );
			},
			focus: function() {
				this.selectedItem = null;
				this.previous = this._value();
			},
			blur: function( event ) {
				if ( this.cancelBlur ) {
					delete this.cancelBlur;
					return;
				}

				clearTimeout( this.searching );
				this.close( event );
				this._change( event );
			}
		} );

		this._initSource();
		this.menu = $( "<ul>" )
			.appendTo( this._appendTo() )
			.menu( {

				// disable ARIA support, the live region takes care of that
				role: null
			} )
			.hide()
			.menu( "instance" );

		this._addClass( this.menu.element, "ui-autocomplete", "ui-front" );
		this._on( this.menu.element, {
			mousedown: function( event ) {

				// prevent moving focus out of the text field
				event.preventDefault();

				// IE doesn't prevent moving focus even with event.preventDefault()
				// so we set a flag to know when we should ignore the blur event
				this.cancelBlur = true;
				this._delay( function() {
					delete this.cancelBlur;

					// Support: IE 8 only
					// Right clicking a menu item or selecting text from the menu items will
					// result in focus moving out of the input. However, we've already received
					// and ignored the blur event because of the cancelBlur flag set above. So
					// we restore focus to ensure that the menu closes properly based on the user's
					// next actions.
					if ( this.element[ 0 ] !== $.ui.safeActiveElement( this.document[ 0 ] ) ) {
						this.element.trigger( "focus" );
					}
				} );
			},
			menufocus: function( event, ui ) {
				var label, item;

				// support: Firefox
				// Prevent accidental activation of menu items in Firefox (#7024 #9118)
				if ( this.isNewMenu ) {
					this.isNewMenu = false;
					if ( event.originalEvent && /^mouse/.test( event.originalEvent.type ) ) {
						this.menu.blur();

						this.document.one( "mousemove", function() {
							$( event.target ).trigger( event.originalEvent );
						} );

						return;
					}
				}

				item = ui.item.data( "ui-autocomplete-item" );
				if ( false !== this._trigger( "focus", event, { item: item } ) ) {

					// use value to match what will end up in the input, if it was a key event
					if ( event.originalEvent && /^key/.test( event.originalEvent.type ) ) {
						this._value( item.value );
					}
				}

				// Announce the value in the liveRegion
				label = ui.item.attr( "aria-label" ) || item.value;
				if ( label && $.trim( label ).length ) {
					this.liveRegion.children().hide();
					$( "<div>" ).text( label ).appendTo( this.liveRegion );
				}
			},
			menuselect: function( event, ui ) {
				var item = ui.item.data( "ui-autocomplete-item" ),
					previous = this.previous;

				// Only trigger when focus was lost (click on menu)
				if ( this.element[ 0 ] !== $.ui.safeActiveElement( this.document[ 0 ] ) ) {
					this.element.trigger( "focus" );
					this.previous = previous;

					// #6109 - IE triggers two focus events and the second
					// is asynchronous, so we need to reset the previous
					// term synchronously and asynchronously :-(
					this._delay( function() {
						this.previous = previous;
						this.selectedItem = item;
					} );
				}

				if ( false !== this._trigger( "select", event, { item: item } ) ) {
					this._value( item.value );
				}

				// reset the term after the select event
				// this allows custom select handling to work properly
				this.term = this._value();

				this.close( event );
				this.selectedItem = item;
			}
		} );

		this.liveRegion = $( "<div>", {
			role: "status",
			"aria-live": "assertive",
			"aria-relevant": "additions"
		} )
			.appendTo( this.document[ 0 ].body );

		this._addClass( this.liveRegion, null, "ui-helper-hidden-accessible" );

		// Turning off autocomplete prevents the browser from remembering the
		// value when navigating through history, so we re-enable autocomplete
		// if the page is unloaded before the widget is destroyed. #7790
		this._on( this.window, {
			beforeunload: function() {
				this.element.removeAttr( "autocomplete" );
			}
		} );
	},

	_destroy: function() {
		clearTimeout( this.searching );
		this.element.removeAttr( "autocomplete" );
		this.menu.element.remove();
		this.liveRegion.remove();
	},

	_setOption: function( key, value ) {
		this._super( key, value );
		if ( key === "source" ) {
			this._initSource();
		}
		if ( key === "appendTo" ) {
			this.menu.element.appendTo( this._appendTo() );
		}
		if ( key === "disabled" && value && this.xhr ) {
			this.xhr.abort();
		}
	},

	_isEventTargetInWidget: function( event ) {
		var menuElement = this.menu.element[ 0 ];

		return event.target === this.element[ 0 ] ||
			event.target === menuElement ||
			$.contains( menuElement, event.target );
	},

	_closeOnClickOutside: function( event ) {
		if ( !this._isEventTargetInWidget( event ) ) {
			this.close();
		}
	},

	_appendTo: function() {
		var element = this.options.appendTo;

		if ( element ) {
			element = element.jquery || element.nodeType ?
				$( element ) :
				this.document.find( element ).eq( 0 );
		}

		if ( !element || !element[ 0 ] ) {
			element = this.element.closest( ".ui-front, dialog" );
		}

		if ( !element.length ) {
			element = this.document[ 0 ].body;
		}

		return element;
	},

	_initSource: function() {
		var array, url,
			that = this;
		if ( $.isArray( this.options.source ) ) {
			array = this.options.source;
			this.source = function( request, response ) {
				response( $.ui.autocomplete.filter( array, request.term ) );
			};
		} else if ( typeof this.options.source === "string" ) {
			url = this.options.source;
			this.source = function( request, response ) {
				if ( that.xhr ) {
					that.xhr.abort();
				}
				that.xhr = $.ajax( {
					url: url,
					data: request,
					dataType: "json",
					success: function( data ) {
						response( data );
					},
					error: function() {
						response( [] );
					}
				} );
			};
		} else {
			this.source = this.options.source;
		}
	},

	_searchTimeout: function( event ) {
		clearTimeout( this.searching );
		this.searching = this._delay( function() {

			// Search if the value has changed, or if the user retypes the same value (see #7434)
			var equalValues = this.term === this._value(),
				menuVisible = this.menu.element.is( ":visible" ),
				modifierKey = event.altKey || event.ctrlKey || event.metaKey || event.shiftKey;

			if ( !equalValues || ( equalValues && !menuVisible && !modifierKey ) ) {
				this.selectedItem = null;
				this.search( null, event );
			}
		}, this.options.delay );
	},

	search: function( value, event ) {
		value = value != null ? value : this._value();

		// Always save the actual value, not the one passed as an argument
		this.term = this._value();

		if ( value.length < this.options.minLength ) {
			return this.close( event );
		}

		if ( this._trigger( "search", event ) === false ) {
			return;
		}

		return this._search( value );
	},

	_search: function( value ) {
		this.pending++;
		this._addClass( "ui-autocomplete-loading" );
		this.cancelSearch = false;

		this.source( { term: value }, this._response() );
	},

	_response: function() {
		var index = ++this.requestIndex;

		return $.proxy( function( content ) {
			if ( index === this.requestIndex ) {
				this.__response( content );
			}

			this.pending--;
			if ( !this.pending ) {
				this._removeClass( "ui-autocomplete-loading" );
			}
		}, this );
	},

	__response: function( content ) {
		if ( content ) {
			content = this._normalize( content );
		}
		this._trigger( "response", null, { content: content } );
		if ( !this.options.disabled && content && content.length && !this.cancelSearch ) {
			this._suggest( content );
			this._trigger( "open" );
		} else {

			// use ._close() instead of .close() so we don't cancel future searches
			this._close();
		}
	},

	close: function( event ) {
		this.cancelSearch = true;
		this._close( event );
	},

	_close: function( event ) {

		// Remove the handler that closes the menu on outside clicks
		this._off( this.document, "mousedown" );

		if ( this.menu.element.is( ":visible" ) ) {
			this.menu.element.hide();
			this.menu.blur();
			this.isNewMenu = true;
			this._trigger( "close", event );
		}
	},

	_change: function( event ) {
		if ( this.previous !== this._value() ) {
			this._trigger( "change", event, { item: this.selectedItem } );
		}
	},

	_normalize: function( items ) {

		// assume all items have the right format when the first item is complete
		if ( items.length && items[ 0 ].label && items[ 0 ].value ) {
			return items;
		}
		return $.map( items, function( item ) {
			if ( typeof item === "string" ) {
				return {
					label: item,
					value: item
				};
			}
			return $.extend( {}, item, {
				label: item.label || item.value,
				value: item.value || item.label
			} );
		} );
	},

	_suggest: function( items ) {
		var ul = this.menu.element.empty();
		this._renderMenu( ul, items );
		this.isNewMenu = true;
		this.menu.refresh();

		// Size and position menu
		ul.show();
		this._resizeMenu();
		ul.position( $.extend( {
			of: this.element
		}, this.options.position ) );

		if ( this.options.autoFocus ) {
			this.menu.next();
		}

		// Listen for interactions outside of the widget (#6642)
		this._on( this.document, {
			mousedown: "_closeOnClickOutside"
		} );
	},

	_resizeMenu: function() {
		var ul = this.menu.element;
		ul.outerWidth( Math.max(

			// Firefox wraps long text (possibly a rounding bug)
			// so we add 1px to avoid the wrapping (#7513)
			ul.width( "" ).outerWidth() + 1,
			this.element.outerWidth()
		) );
	},

	_renderMenu: function( ul, items ) {
		var that = this;
		$.each( items, function( index, item ) {
			that._renderItemData( ul, item );
		} );
	},

	_renderItemData: function( ul, item ) {
		return this._renderItem( ul, item ).data( "ui-autocomplete-item", item );
	},

	_renderItem: function( ul, item ) {
		return $( "<li>" )
			.append( $( "<div>" ).text( item.label ) )
			.appendTo( ul );
	},

	_move: function( direction, event ) {
		if ( !this.menu.element.is( ":visible" ) ) {
			this.search( null, event );
			return;
		}
		if ( this.menu.isFirstItem() && /^previous/.test( direction ) ||
				this.menu.isLastItem() && /^next/.test( direction ) ) {

			if ( !this.isMultiLine ) {
				this._value( this.term );
			}

			this.menu.blur();
			return;
		}
		this.menu[ direction ]( event );
	},

	widget: function() {
		return this.menu.element;
	},

	_value: function() {
		return this.valueMethod.apply( this.element, arguments );
	},

	_keyEvent: function( keyEvent, event ) {
		if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
			this._move( keyEvent, event );

			// Prevents moving cursor to beginning/end of the text field in some browsers
			event.preventDefault();
		}
	},

	// Support: Chrome <=50
	// We should be able to just use this.element.prop( "isContentEditable" )
	// but hidden elements always report false in Chrome.
	// https://code.google.com/p/chromium/issues/detail?id=313082
	_isContentEditable: function( element ) {
		if ( !element.length ) {
			return false;
		}

		var editable = element.prop( "contentEditable" );

		if ( editable === "inherit" ) {
		  return this._isContentEditable( element.parent() );
		}

		return editable === "true";
	}
} );

$.extend( $.ui.autocomplete, {
	escapeRegex: function( value ) {
		return value.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" );
	},
	filter: function( array, term ) {
		var matcher = new RegExp( $.ui.autocomplete.escapeRegex( term ), "i" );
		return $.grep( array, function( value ) {
			return matcher.test( value.label || value.value || value );
		} );
	}
} );

// Live region extension, adding a `messages` option
// NOTE: This is an experimental API. We are still investigating
// a full solution for string manipulation and internationalization.
$.widget( "ui.autocomplete", $.ui.autocomplete, {
	options: {
		messages: {
			noResults: "No search results.",
			results: function( amount ) {
				return amount + ( amount > 1 ? " results are" : " result is" ) +
					" available, use up and down arrow keys to navigate.";
			}
		}
	},

	__response: function( content ) {
		var message;
		this._superApply( arguments );
		if ( this.options.disabled || this.cancelSearch ) {
			return;
		}
		if ( content && content.length ) {
			message = this.options.messages.results( content.length );
		} else {
			message = this.options.messages.noResults;
		}
		this.liveRegion.children().hide();
		$( "<div>" ).text( message ).appendTo( this.liveRegion );
	}
} );

return $.ui.autocomplete;

} ) );

define('module/PaymentView',['require','jquery','module/forms/CardPaymentForm','module/CVVHint','module/forms/BankAccountPaymentForm','module/InputFormatter','module/InputDateFormatter','module/DateFormatter','module/I18n','module/Message','module/MessageView','module/error/OppError','module/Options','module/State','module/Parameter','module/SupportMessage','module/Tracking','module/Util','module/Wpwl','module/Generate','module/Setting','module/Detection','jquery-ui/widgets/autocomplete'],function(require){
	var $ = require('jquery');
	var CardPaymentForm = require('module/forms/CardPaymentForm');
	var CVVHint = require('module/CVVHint');
	var BankAccountPaymentForm = require('module/forms/BankAccountPaymentForm');
	var InputFormatter = require('module/InputFormatter');
	var InputDateFormatter = require('module/InputDateFormatter');
	var DateFormatter = require('module/DateFormatter');
	var I18n = require('module/I18n');
	var Message = require('module/Message');
	var MessageView = require('module/MessageView');
	var OppError = require("module/error/OppError");
	var Options = require('module/Options');
	var State = require('module/State');
	var Parameter = require('module/Parameter');
	var SupportMessage = require('module/SupportMessage');
	var Tracking = require('module/Tracking');
	var Util = require('module/Util');
	var Wpwl = require('module/Wpwl');
	var Generate = require('module/Generate');
	var Setting = require('module/Setting');
	var Detection = require('module/Detection');
    require('jquery-ui/widgets/autocomplete');

	var HAS_ERROR_CLASS = "wpwl-has-error";
	
	var PaymentView = {};
	var logoClicked = false;
	var logoDetected = false;
    
    PaymentView.ERROR_DELAY_MS = 500;
    PaymentView.MIN_BRAND_DETECTION_LENGTH = 4;
    
    PaymentView.executeDelayedIfNecessary = function( fun ) {
        // This is a workaround for a problem in iOS that prevents to focus
        // an element in an iframe when we show an error in a different iframe
        // to avoid that we first have to wait until the target input really has the
        // focus including the cursor and only then show the error in the other iframe.
        // Currently we do that by introducing a delay of 500ms, which works in 95% of the cases.
        if(window && /iPad|iPhone|iPod/.test(window.navigator.platform)) {
            window.setTimeout( fun, PaymentView.ERROR_DELAY_MS);
        } else {
            fun();
        }
    };

	PaymentView.generateErrorRow = function(errors) {// {errorType: element}
		for ( var i in errors ) {
			/* istanbul ignore else */
			if (errors.hasOwnProperty(i)){
				var $elem = $(errors[i]);
				
				if (!Options.enableSAQACompliance && $elem.is("[name=\"" + Parameter.CARD_EXPIRY_MONTH + "\"], [name=\"" + Parameter.CARD_EXPIRY_YEAR + "\"]")) {
					// expiry month and year are hidden fields. we need the element
					// which is visible to the shopper
					$elem = $elem.closest("form").find("[data-action=\"blur-card-expiry\"]");
				}

                if (!$elem.hasClass(HAS_ERROR_CLASS)) {
					$elem.addClass(HAS_ERROR_CLASS);

					PaymentView.addErrorMessage($elem, i);
				}
			}
		}
	};

	PaymentView.addErrorMessage = function($elem, message) {
		var customErrorClass = "wpwl-hint-" + message;

		if( !Options.enableSAQACompliance && Options.forceCardHolderEqualsBillingName && $elem.is("[name=\"" + Parameter.SUR_NAME + "\"], [name=\"" + Parameter.GIVEN_NAME + "\"]")) {
			$elem = $elem.closest("form").find("[name=\"" + Parameter.SUR_NAME + "\"]");
			var givenNameErrorElem = $elem.siblings(".wpwl-hint-givenNameError");
			if(givenNameErrorElem.length > 0) {
				$elem = givenNameErrorElem;
			}
		}

        if ($elem.hasClass('wpwl-checkbox')) {
            // Make the error message appear under the (next) .wpwl-text-confirmation element
            $elem = $elem.next();
        }

		$elem.after([
			Generate.outerHtml(
				$("<div/>", {
					"class": "wpwl-hint " + customErrorClass,
					"text": I18n[message]
				})
			)
		].join(''));
	};

	PaymentView.setBrandIcon = function(){
		var $select = $(this);
		$select
		.closest('form')
		.find(".wpwl-brand")
		.removeAttr("class")
		.addClass("wpwl-brand " + Generate.styledBrandClass($select.val()) + " wpwl-brand-card");
	};
	
	PaymentView.hideOrShowElement = function(parentElement, selector, hide){
    	if ( hide ) {
    		parentElement.find(selector).hide();
    	} else {
    		parentElement.find(selector).show();
    	}
    };

    PaymentView.hideOrShowCVV = function(hide){
    	var $form = $(this).closest("form");

    	PaymentView.hideOrShowElement($form, ".wpwl-label-cvv", hide);
    	PaymentView.hideOrShowElement($form, "[name='card.cvv']", hide);
    };

    PaymentView.populateExpiryMonthAndYearFields = function(){
    	var $form = $(this).closest("form");
    	var paymentForm = new CardPaymentForm($form);
    	var $month = paymentForm.getExpiryMonthElement();
    	var $year = paymentForm.getExpiryYearElement();

    	var val = $(this).val();
    	var splittedMonthYear = PaymentView.splitMonthYear(val);
    	$month.val(splittedMonthYear.month);
    	$year.val(splittedMonthYear.year);
    };


	PaymentView.splitMonthYear = function(monthYearValue) {
		var result = { 'month' : '', 'year' : '' };
    	if (!monthYearValue) {
    		return result;
    	}

        monthYearValue = Util.parseEasternNumber(monthYearValue);
		var expiry = monthYearValue.split("/");
		var month, year;
		if (expiry.length > 1) {
			month = Util.trimAll(expiry[0]);
			year = Util.trimAll(expiry[1]);
		}
		else {
			var regex = /^(0?[1-9]|1[0-2])\s*([0-9]{2})$/;
			var extract = regex.exec(expiry);
			if (extract && extract.length > 1) {
				month = extract[1];
				year = extract[2];
			}
		}

		if (!month || !year) {
			return result;
		}
		result.month = month;
		result.year = "20" + year;
		return result;
	};

	PaymentView.callEntercashApi = function(countryName) {
		var merchantId = Options.entercashApiId;
    	var baseEntercashUrl = (Wpwl.isTestSystem ? "https://api.test.ecdirect.net/v2" : "https://api.ecdirect.net/v2");
        var apiUrl = baseEntercashUrl + "/accounts/" + merchantId + "/?deposit_support=true";
        var countrySent = false;

        if (countryName) {
        	apiUrl += "&clearing_house=" + countryName;
        	countrySent = true;
        }

        $.getJSON(apiUrl, function(data) {
        	PaymentView.removeDefaultEntercashForm();
        	PaymentView.processAccountsResponse(data, countryName);
        }).fail(function() {
        	if (countryName) {
        		PaymentView.onEntercashApiFailure(countryName);
        	}
        	PaymentView.showDefaultEntercashForm();
        });
	};

	PaymentView.onEntercashApiFailure = function(countryName) {
		var $countrySelect = $("select[name='bankAccount.country']", "div.wpwl-container-onlineTransfer-ENTERCASH");
        $("option", $countrySelect).not("*[value=\"" + countryName + "\"]").remove();
	};

	PaymentView.processAccountsResponse = function(banks, countryName) {
		var banksByCountry = {};
        $.each(banks, function(index, bank) {
        	if (bank.clearing_house){ //jshint ignore:line
        		var clearingHouse = bank.clearing_house; //jshint ignore:line
        		banksByCountry[clearingHouse] = banksByCountry[clearingHouse] || [];
        		banksByCountry[clearingHouse].push(bank);
        	}
        });

        PaymentView.hideSubmitEntercashFormButton();

        if (countryName) {
        	var bankList = banksByCountry[countryName] || [];

        	PaymentView.generateEntercashBanksDropdown(bankList, countryName);
        } else {
        	PaymentView.generateEntercashCountryFlags(banksByCountry);
        }
	};

	PaymentView.generateEntercashCountryFlags = function(banksByCountry) {
		var $brandDiv = $("div.wpwl-group-brand", "div.wpwl-container-onlineTransfer-ENTERCASH");
        var $countryDiv = $("<div class=\"wpwl-group wpwl-group-country wpwl-clearfix\"></div>").insertAfter($brandDiv);

        var countryList = Object.keys(banksByCountry);

		var paymentSystem = Wpwl.isTestSystem ? "test" : "live";
		var paymentMethod = "OT";
		var paymentBrand = "ENTERCASH";
		var parameterName = "country";
		var defaultCountryList = Object.keys(Setting.paymentTypeSetup[paymentMethod][paymentBrand][parameterName][paymentSystem]);

        $.each(countryList, function(index, country) {
        	var countryFlagToAdd = "<div class=\"wpwl-group wpwl-country-flag wpwl-country-" + country + " wpwl-clearfix\" data-ch=\"" + country + "\"";

        	if ($.inArray(country, defaultCountryList) < 0) {
        		countryFlagToAdd += " style=\"background-image: url(https://ui.test.ecdirect.net/ui/images/countries/" + country + ".png);\"";
        	}
        	countryFlagToAdd += "></div>";
        	$countryDiv.append(countryFlagToAdd);
        });

        $('div.wpwl-country-flag').on('click', function(){
           	var $currentDiv = $(this);
           	var countryName = $currentDiv.data("ch");

           	$("div.wpwl-country-flag").each(function(index, countryDiv) {
				var $countryDiv = $(countryDiv);

           		if ($countryDiv.data("ch") === countryName){
           			$countryDiv.css('background-size','100%');
           		} else {
           			$countryDiv.css('background-size','50%');
           		}
			});

        	var bankList = banksByCountry[countryName];
        	PaymentView.generateEntercashBanksDropdown.call(this, bankList, countryName);
        });
	};

	PaymentView.sortEntercashBanks = function(bankList) {
		var banks = bankList.sort(function compare(a,b) {
			var aDisplayName = a.display_name.toUpperCase();//jshint ignore:line
			var bDisplayName = b.display_name.toUpperCase();//jshint ignore:line

        	if (a.market_share_percentage > b.market_share_percentage)//jshint ignore:line
            	return -1;
            if (a.market_share_percentage < b.market_share_percentage)//jshint ignore:line
                return 1;
            if (aDisplayName < bDisplayName)
              	return -1;
            if (aDisplayName > bDisplayName)
                return 1;
            return 0;
        });
        return banks;
	};

	PaymentView.generateEntercashBanksDropdown = function(bankList, countryName) {

		var banks = PaymentView.sortEntercashBanks(bankList);

		var bankNames = "";
        var bankValues = "";
		$.each(banks, function(index, bank) {
           	if (index > 0) {
           		bankNames += ",";
           		bankValues += ",";
           	}
    		bankNames += bank.display_name;//jshint ignore:line
    		bankValues += bank.static_id;//jshint ignore:line
    	});

    	var cssSetup = "accounts";
        var $banksElement = $("div.wpwl-wrapper-" + cssSetup,"div.wpwl-container-onlineTransfer-ENTERCASH").parent();
        if ($banksElement) {
           	$banksElement.remove();
        }

        var newBanksElement = Generate.generateSelectElement("ENTERCASH", {
        					name:"bankAccount.bankName",
                            values:bankValues,
                            valueLabels:bankNames,
                            cssClass:cssSetup});

		var $newBanksElement = $(newBanksElement);
        $newBanksElement.append("<input type=\"hidden\" name=\"bankAccount.country\" value=\"" + countryName + "\">");

        var $submitElement = $("div.wpwl-group-submit", "div.wpwl-container-onlineTransfer-ENTERCASH");
        $submitElement.before($newBanksElement);

        if (bankList.length === 0) {
        	var $bankSelect = $("select[name='bankAccount.bankName']", $newBanksElement);
        	PaymentView.generateErrorRow({billingCountryError: $bankSelect});
       	} else {
        	$submitElement.show();
       	}
	};

    PaymentView.removeDefaultEntercashForm = function() {
    	$("div.wpwl-group-country", "div.wpwl-container-onlineTransfer-ENTERCASH").remove();
	};

    PaymentView.hideDefaultEntercashForm = function() {
    	$("div.wpwl-group-country", "div.wpwl-container-onlineTransfer-ENTERCASH").hide();
	};

    PaymentView.showDefaultEntercashForm = function() {
    	$("div.wpwl-group-country", "div.wpwl-container-onlineTransfer-ENTERCASH").show();
	};

	PaymentView.hideSubmitEntercashFormButton = function() {
		$("div.wpwl-group-submit", "div.wpwl-container-onlineTransfer-ENTERCASH").hide();
	};

	PaymentView.showSubmitEntercashFormButton = function() {
    	var $submitElement = $("div.wpwl-group-submit", "div.wpwl-container-onlineTransfer-ENTERCASH");
        $submitElement.show();
    };

	PaymentView.removeDefaultGiropayFormIban = function() {
		$("div.wpwl-group-accountNumberIban", "div.wpwl-container-onlineTransfer-GIROPAY").remove();
	};

	PaymentView.removeDefaultGiropayFormBIC = function() {
		$("div.wpwl-group-accountBankBic", "div.wpwl-container-onlineTransfer-GIROPAY").remove();
	};

	PaymentView.removeDefaultSepaFormBIC = function() {
        $("div.wpwl-group-accountBic", "div.wpwl-container-directDebit").remove();
    };

	PaymentView.fetchAstropayStreamlinePaymentConfig = function(astropayStreamlineConfig, brands) {
    		for (var idx=0; idx < astropayStreamlineConfig.configuredBrands.length; idx++) {
    			var astropayStreamlineBrand = astropayStreamlineConfig.configuredBrands[idx];
    			var brandName = astropayStreamlineBrand.brandName;

                if($.inArray(astropayStreamlineBrand.paymentType, brands) !== -1) {
					var display = Generate.renderAstropayStreamline({logoUrl : astropayStreamlineBrand.logoUrl,
													  brand : astropayStreamlineBrand.label,
													  accountId : brandName
													  });

					// create a separate forms in order to not put all hidden fields with the same one in a common form
					// the first form is empty and our template
                    var $form = $("form.wpwl-form-virtualAccount-" + astropayStreamlineBrand.paymentType + ":first");
                    $form
                    // clone it so we have do not append to the template
                    .clone()
                    // and insert string to cloned elem
                    .append(display)
                    // then insert cloned elem before the iframe
                    .insertBefore($form.parent().find("iframe"));
				}

    		}

    		$('form.wpwl-form-virtualAccount-ASTROPAY_STREAMLINE_CASH:first').remove();
    		$('form.wpwl-form-virtualAccount-ASTROPAY_STREAMLINE_OT:first').remove();
    	};


    PaymentView.updateFieldGiropayBic = function () {

        var bicId = "GIROPAY-accountBankBic";
        var bicHiddenId = "GIROPAY-hidden-Bic";

       	$.getJSON(Wpwl.url + "/v1/fiducia/banklist", function (response) {
       	    var banks = createBankListSource(response);

       		// remove old BIC input
       		PaymentView.removeDefaultGiropayFormBIC();
       		// add new input with default autocomplete source
       		PaymentView.createAutocompleteGiropayBic(banks, bicId , bicHiddenId);

       	});


    };

	PaymentView.createAutocompleteGiropayBic = function (banks, id, hiddenId) {
		var parameters = {
			setup:"accountBankBic",
			inputName:"bankAccount.bankCode",
			value: "",
			id: id};
		var input = $(Generate.generateAutocompleteInputElement(parameters));
		var hiddenInput = $(Generate.hiddenInput("bankAccount.bic", "", hiddenId));

		var $submitElement = $("div.wpwl-group-submit", "div.wpwl-container-onlineTransfer-GIROPAY");
		$submitElement.before(input);
		$submitElement.before(hiddenInput);
		$submitElement.show();

		bicAutocompleteCustom(hiddenId);
		$("#" + id).bicautocomplete({
			source: banks
		});
	};

	function createBankListSource(response) {
		var banks = [];
		if (response.bankList) {
			if ($.isArray(response.bankList)) {
				// to support old version of service
				$.each(response.bankList, function (index, bank) {
					banks.push({label: bank.blz + ' / ' + bank.bic, value: bank.bic, blz: bank.blz});
				});
			} else {
				// new version of service
				var bics = response.bankList.bic;
				var blzs = response.bankList.blz;
				for (var i = 0; i < bics.length; i++) {
					banks.push({label: blzs[i] + ' / ' + bics[i], value: bics[i], blz: blzs[i]});
				}
			}
		}
		banks.sort(function (a, b) {
			return a.label.localeCompare(b.label);
		});
		return banks;
	}

	function bicAutocompleteCustom(hiddenId) {
		$.widget("custom.bicautocomplete", $.ui.autocomplete, {
			_create: function () {
				this._super();
				this.element.addClass("wpwl-control-autocomplete-input");
				this.widget().menu("option", "items", "> :not(.ui-autocomplete-category)");
			},
			_renderMenu: function (ul, items) {
				ul.addClass("wpwl-control-autocomplete-menu");
				var that = this;
				$.each(items, function (index, item) {
					that._renderItemData(ul, item);
				});
			},
			_renderItem: function (ul, item) {
				var regexp = new RegExp('(' + this.term + ')', 'gi');
				var classString = ' class="wpwl-control-autocomplete-highlight"';
				var label = item.label.replace(regexp, '<span' + classString + '>$1</span>');

				return $('<li><a>' + label + '</a></li>').appendTo(ul);
			},
			close: function () {
				var value = this.element.val();
				var valid = false;
				var bic;
				if (!value) {
				// empty = valid, no need to validate
	    			valid = true;
				} else {
				// if not empty - needs to be validated
                    var valueLowerCase = value.toLowerCase();
                    $.each(this.options.source, function (index, bank) {
                        if ( bank.value.toLowerCase() === valueLowerCase ) {
                            bic = value;
                            valid = true;
                            return false;
                        } else if ( bank.blz.toLowerCase() === valueLowerCase ) {
                            bic = bank.value;
                            valid = true;
                            return false;
                        }
                    });
				}
				var $hiddenElement = $("#" + hiddenId);
				if ( !valid ) {
					PaymentView.generateErrorRow({accountBankBicError: $hiddenElement});
				} else {
                    $hiddenElement.val(bic);
				    PaymentView.removeErrorClassAndMessage($hiddenElement);
				}
				PaymentView.triggerFormValidationStatus($hiddenElement.closest("form"));
				this._super();
			}
		});
	}

	PaymentView.adjustDirectDebitPaymentBrand = function(){
		var $select = $(this);
		var $paymentBrand = $select.closest('form').find('[name="' + Parameter.PAYMENT_BRAND + '"]');
		var country = $select.val();

		// store original brand
		if (!$paymentBrand.data('brand')) {
			$paymentBrand.data('brand', $paymentBrand.val());
		}

		if (/^(DIRECTDEBIT|DIRECTDEBIT_SEPA_MIX)$/.test($paymentBrand.data('brand'))) {
			$paymentBrand.val($paymentBrand.data('brand') + "_" + country);
		}
	};

	// Shows/hides vertical logos. The div-structure is as follows:
	// wpwl-group-card-logos-vertical -> wpwl-button-more
	//                                -> wpwl-group-card-logos-selected-box -> wpwl-brand-...
	PaymentView.adjustCardLogosPaymentBrands = function() {
		// Hides vertical logos by default
		$('.wpwl-group-card-logos-horizontal').removeClass('wpwl-group-card-logos-horizontal-with-more-button');
		$('.wpwl-group-card-logos-vertical').css('display', 'none');
		$('.wpwl-group-card-logos-selected-box div').css('display', 'none');

		// Selects all non-hidden logos
		var horizontalLogos = $('.wpwl-group-card-logos-horizontal div:not(.wpwl-hidden)');
		if (!horizontalLogos.length) {
			return;
		}

		// If there are logos to be shown, adds the more button so that the width can be calculated
		var $form = $('form.wpwl-form-card');
		var maxWidth = $form.offset().left + $form.outerWidth();
		$('.wpwl-group-card-logos-horizontal').addClass('wpwl-group-card-logos-horizontal-with-more-button');
		var rightPadding = parseInt($('.wpwl-group-card-logos-horizontal').css('padding-right'));
		maxWidth = maxWidth - rightPadding;

		var isVertical = false;
		horizontalLogos.each(function() {
			var $this = $(this);
			$this.removeClass('wpwl-invisible');

			// If the logo is outside the card form, hides it and shows the vertical one
			if (!isCardLogoBrandPositionValid($this, maxWidth)) {
				$this.addClass('wpwl-invisible');
				$('.wpwl-group-card-logos-selected-box div:eq('+$this.index()+')').css('display', 'flex');
				isVertical = true;
			}
		});

		// If from the previous computation there are vertical logos, shows the parent div too
		if (isVertical) {
			$('.wpwl-group-card-logos-vertical').css('display', 'flex');
		} else {
			$('.wpwl-group-card-logos-horizontal').removeClass('wpwl-group-card-logos-horizontal-with-more-button');
			$('.wpwl-group-card-logos-vertical').css('display', 'none');
		}
	};

	// Shows/hides horizontal logos
	PaymentView.adjustHorizontalLogos = function(detectedBrands) {
		var horizontalLogos = $('.wpwl-group-card-logos-horizontal div');
		horizontalLogos.each(function() {
			var $this = $(this);
			var brand = $this.attr("value");
			if (isCardLogoBrandValid(detectedBrands, brand)) {
				$this.removeClass('wpwl-hidden');
				$this.removeClass('wpwl-invisible');
			} else {
				$this.addClass('wpwl-hidden');
			}
		});
	};
	
	PaymentView.initFormatter = function() {
		if (!Options.enableSAQACompliance){
			new InputDateFormatter({
				selector: '[data-action="blur-card-expiry"]'
			}).format();	
		}

		new InputDateFormatter({
			selector: 'input[name="' + Parameter.GIFT_CARD_EXPIRY_DATE + '"]'
		}).format();

		new DateFormatter({
            selector: 'input[type=text][name="' + CardPaymentForm.WIDGET_BIRTH_DATE + '"]'
        }).format();

        var pattern = '{{****}} {{****}} {{****}} {{****}} {{****}} {{****}} {{****}} {{****}}';

		new InputFormatter($('input[name="' + Parameter.CARD_NUMBER + '"]'), pattern).format();

		new InputFormatter($('input[name="' + Parameter.GIFT_CARD_NUMBER + '"]'), pattern).format();

	    new InputFormatter($('input[name="' + Parameter.GIFT_CARD_CODE + '"]'), '{{*****}}').format();

        if (InputFormatter.isSupported()) {
            new InputFormatter(
                $('input[name="' + Parameter.BANKACCOUNT_IBAN + '"]'),
                // accepts 32 length string, separates auto after every 4 in the range A-Za-z0-9
               pattern, /[a-z0-9]/i).format();
        }
	};
	
	
	PaymentView.updateBankAccountInputs = function(form){
		var $form = $(form);
		var paymentForm = new BankAccountPaymentForm($form);
		
		var $ibanOrAccountNumber = paymentForm.getIbanOrAccountNumberElement();
		var $bicOrBankCode = paymentForm.getBicOrBankCodeElement();

		var brand = paymentForm.getBrand();
		
		// set appropriate input names
		if (paymentForm.isSimplifiedForm()){
			$ibanOrAccountNumber.attr("name", Parameter.BANKACCOUNT_IBAN);
			$bicOrBankCode.attr("name", Parameter.BANKACCOUNT_BIC);
			
			// update account country from valid iban
			var $accountCountryInput = paymentForm.getCountryElement();
			var ibanOrAccountNumber = paymentForm.getIbanOrAccountNumber();
			if (ibanOrAccountNumber) {
				$accountCountryInput.val(ibanOrAccountNumber.substring(0,2).toUpperCase());
			}
			//change event is not triggered when val changes, cause it requires an browser event initiated by a user.
			$accountCountryInput.trigger('change');
		}
		//For Giropay method, we always keep the hidden attribute as bankAccount.bic
		else if (/^GIROPAY$/.test(brand)) {
		    $ibanOrAccountNumber.attr("name", Parameter.BANKACCOUNT_NUMBER);
        }
		else {
			$ibanOrAccountNumber.attr("name", Parameter.BANKACCOUNT_NUMBER);
			$bicOrBankCode.attr("name", Parameter.BANKACCOUNT_BANKCODE);
		}
	};
	
	PaymentView.updateSubmitButtonState = function(isValid){
		var $form = $(this);
		var $button = $form.find("button[type=\"submit\"]");

		$button
		.toggleClass("wpwl-button-error", !isValid);

		PaymentView.disableSubmitButton($form, !isValid);
	};

	PaymentView.getBrand = function($form) {
		// Returns null if no logos were detected
		if (Options.style === 'logos' && Options.brandDisplay !== 'all' &&
		        !logoDetected && !$form.hasClass('wpwl-form-registrations')) {
			return null;
		}

		return PaymentView.getSelectedBrand($form);
	};

    // Gets the selected brand from <select>, or hidden <input> in case of one-click payment
	PaymentView.getSelectedBrand = function($form) {
	    var $brandElement = $form.find('[name="' + Parameter.PAYMENT_BRAND + '"]');
        return $brandElement.val();
	};

	// Gets all brands from <select>
	PaymentView.getCardBrands = function($form) {
	    var select = $form.find('[name="' + Parameter.PAYMENT_BRAND + '"]').get(0);
	    var brands = [];

	    for (var i = 0; i < select.length; i++) {
	        brands.push(select.options[i].value);
	    }
	    return brands;
	};

	PaymentView.getCardLogoBrands = function($form) {
	    var $logosElement = $form.find('[id="' + 'wpwl-group-card-logos-horizontal' + '"]:first');

        if ($logosElement.length === 0) {
            return null;
        }

        var $dropDownLogosElement = $form.find('[id="' + 'wpwl-group-card-logos-selected-box' + '"]:first');
        var cardLogos = $logosElement.find('div');
        cardLogos.push.apply(cardLogos, $dropDownLogosElement.find('div'));
        return cardLogos;
	};

	// Updates <select> with the given brand. Note: it is possible that the brand is not in <select>
    PaymentView.updateCardBrand = function(brand) {
        var $brandElement = $('form.wpwl-form-card').find('[name="' + Parameter.PAYMENT_BRAND + '"]');
        if (!$brandElement.length) {
            return;
        }

        var brandIsInSelect = false;
        var select = $brandElement.get(0);
        var $option = $brandElement.find('[value="' + brand + '"]');
        // set option only if its in dropdown.
        // otherwise it will show an empty dropdown and the icon will disappear
        if ($option.length) {
            $brandElement.val(brand);
    	    brandIsInSelect = true;
        }
		PaymentView.onUpdateCardBrand(select, brand, brandIsInSelect);
    };

	PaymentView.updateCardBrands = function(brands, inputLength) {
		var detectedBrands = brands;
		var $form = $('form.wpwl-form-card');

		Options.onDetectBrand(getDetectedConfiguredBrands($form, detectedBrands));

		if (isCardLogoBrandDisplayMode()) {
			detectedBrands = getDisplayedLogos($form, brands, inputLength);
			logoDetected = detectedBrands.length > 0;
			PaymentView.adjustHorizontalLogos(detectedBrands);
			PaymentView.adjustCardLogosPaymentBrands();
		}
		var brand = getBrandFromDetectedBrands(detectedBrands, inputLength);
		PaymentView.updateCardBrand(brand);
	};

    PaymentView.onSelectCardLogoBrand = function() {
        var cardLogos = PaymentView.getCardLogoBrands($('form.wpwl-form-card'));
        if (cardLogos === null) {
            return;
        }

        var $select = $(this);
        cardLogos.each(function() {
            if ($select.val() === $(this).attr("value")) {
                $(this).addClass('wpwl-brand-card-logo-highlighted');
            } else {
                $(this).removeClass('wpwl-brand-card-logo-highlighted');
            }
        });
    };

	PaymentView.onUpdateCardBrand = function(select, brand, brandIsInSelect) {
		if (brandIsInSelect) {
			PaymentView.hideOrShowCVV.call(select, !!Setting.subTypeLabelMap[brand].noCvv);
			PaymentView.hideOrShowMobile.call(select,  !Setting.subTypeLabelMap[brand].mobilePhone);
			PaymentView.hideOrShowBirthDate.call(select, !Setting.subTypeLabelMap[brand].birthDate);
			PaymentView.hideOrShowExpiryDate.call(select, !!Setting.subTypeLabelMap[brand].noExpiryDate);
			if (isCardLogoBrandDisplayMode()) {
			    PaymentView.onSelectCardLogoBrand.call(select);
			} else {
			    PaymentView.setBrandIcon.call(select);
			}
		}

		$(document).trigger("change::brand", brand);

		// use detected brand even if its null or not in the dropdown so merchants can decide
		// what to do in this case, e.g. re-enable all available brands
		Options.onChangeBrand.call(select, brand);
	};

	function isValidAndNotEmpty(obj) {
		return (typeof obj.isEmpty === 'undefined' || !obj.isEmpty) && obj.isValid;
	}

	function isCardLogoBrandDisplayMode() {
	    return Options.style === 'logos';
	}

	function isCardLogoBrandPositionValid(logo, maxWidth) {
        return (logo.offset().left + logo.outerWidth() <= maxWidth);
    }

	function getBrandFromDetectedBrands(detectedBrands, inputLength) {
		// For non-logos style
		if (!isCardLogoBrandDisplayMode()) {
			return Detection.getBrandFromBrands(detectedBrands);
		}

		var $form = $('form.wpwl-form-card');
		if (logoClicked) {
			return PaymentView.getSelectedBrand($form);
		}

		var brands = PaymentView.getCardBrands($form);
		if (inputLength < PaymentView.MIN_BRAND_DETECTION_LENGTH || detectedBrands === null) {
			return brands[0];
		} else {
			// the first configured brand should be selected by default for 'logos' style
			for (var i = 0; i < brands.length; i++) {
				if (detectedBrands.indexOf(brands[i]) !== -1) {
					return brands[i];
				}
			}
		}
		return null;
	}

	// Filters the detected brands to include only the configured brands.
	function getDetectedConfiguredBrands($form, detectedBrands){
		detectedBrands = detectedBrands || [];

		var configuredBrands = PaymentView.getCardBrands($form);

		var brands = configuredBrands.filter(function(value) {
			return detectedBrands.indexOf(value) !== -1;
		});
		return brands;
	}

	// Gets (detected and selected) logos to be displayed
	function getDisplayedLogos($form, detectedBrands, inputLength) {
		var brands;
		if (inputLength < PaymentView.MIN_BRAND_DETECTION_LENGTH) {
			// If input length is too short, either returns all or empty brands, depending on option
			brands = (Options.brandDisplay === 'all') ? PaymentView.getCardBrands($form) : [];
		} else {
			brands = getDetectedConfiguredBrands($form, detectedBrands);
		}

		var brand = PaymentView.getSelectedBrand($form);
		if (logoClicked && brand && brands.indexOf(brand) === -1) {
			//the user selected brand should always appear
			brands.push(brand);
		}
		return brands;
	}

    function isCardLogoBrandValid(detectedBrands, brand) {
        if (detectedBrands === null) {
            return false;
        }
        return detectedBrands.indexOf(brand) !== -1;
    }
		
	PaymentView.setCardCvvIsValid = function(iframeCommunication, obj){
		if (/blur/.test(obj.eventType) || /forcedBlur/.test(obj.eventType))
		{
			Options.onBlurSecurityCode.call(iframeCommunication, isValidAndNotEmpty(obj));
		}
		PaymentView.setIsValid(iframeCommunication, obj, "cvvError");
	};
	
	PaymentView.setCardNumberIsValid = function(iframeCommunication, obj){
		if (/blur/.test(obj.eventType) || /forcedBlur/.test(obj.eventType))
		{
			Options.onBlurCardNumber.call(iframeCommunication, isValidAndNotEmpty(obj));
		}
		PaymentView.setIsValid(iframeCommunication, obj, "cardNumberError");
	};
	
	PaymentView.setCardHolderIsValid = function(iframeCommunication, obj){
		if (/blur/.test(obj.eventType) || /forcedBlur/.test(obj.eventType))
		{
			Options.onBlurCardHolder.call(iframeCommunication, isValidAndNotEmpty(obj));
		}
		PaymentView.setIsValid(iframeCommunication, obj, "cardHolderError");
	};
	
	PaymentView.setExpiryIsValid = function(iframeCommunication, obj){
		if (/blur/.test(obj.eventType) || /forcedBlur/.test(obj.eventType))
		{
			Options.onBlurExpiryDate.call(iframeCommunication, isValidAndNotEmpty(obj));
		}
		PaymentView.setIsValid(iframeCommunication, obj, "expiryMonthError");
	};
	
	PaymentView.setIsValid = function(iframeCommunication, obj, error){
	    var $iframe = iframeCommunication.$iframe;
        if (obj.isValid) {
            PaymentView.removeErrorClassAndMessage($iframe);
        }
        PaymentView.executeDelayedIfNecessary(function() {
            if (!obj.isValid) {
                var errorObj = {};
                errorObj[error] = $iframe.get(0);
                PaymentView.generateErrorRow(errorObj);
            }
            PaymentView.setUpIframeInputStyles(iframeCommunication);
            /* on submit we not change the form validation status
            as this might re-enable to submit button in case the form is valid */
            if (obj.eventType !== "submit") {
                PaymentView.triggerFormValidationStatus(iframeCommunication.$form);
            }
        });
	};

	// triggers event only on specific form
	PaymentView.triggerFormValidationStatus = function(form){
		var $form = $(form);
		$form.trigger("form.isValid", PaymentView.checkForValidationErrors($form));
	};

	PaymentView.removeErrorClassAndMessage = function(elem){ 
		var $elem = $(elem);
		
		if ($elem.hasClass(HAS_ERROR_CLASS)){
			$elem.removeClass(HAS_ERROR_CLASS);
			
			if( !Options.enableSAQACompliance && Options.forceCardHolderEqualsBillingName && $elem.is("[name=\"" + Parameter.SUR_NAME + "\"], [name=\"" + Parameter.GIVEN_NAME + "\"]")){
			    var customErrorClass = "wpwl-hint-";

			    if($elem.is("[name=\"" + Parameter.SUR_NAME + "\"]")) {
			        customErrorClass += 'surNameError';
			    } else if ($elem.is("[name=\"" + Parameter.GIVEN_NAME + "\"]")){
			        customErrorClass += 'givenNameError';
			    }
			    $elem.closest('form').find('.'+customErrorClass).remove();
			    return;
			}

            if ($elem.hasClass('wpwl-checkbox')) {
                // Make the error message appear under the (next) .wpwl-text-confirmation element
                $elem = $elem.next();
            }
			
			$elem.next().remove();
		}
	};

	PaymentView.checkForValidationErrors = function(form){
		return $(form).find("." + HAS_ERROR_CLASS).length === 0 ? true : false;
	};

	PaymentView.setupPciIframe = function (iframeCommunication) {
		var deferred = $.Deferred();
		setTimeout(function () {
			deferred.reject("Unable to load iframes.");
		}, 60000);


		PaymentView.setUpIframeCommunication(iframeCommunication)
			.then(PaymentView.initIframeListeners)
			.then(PaymentView.enableBrandDetection)
			.then(PaymentView.setUpIframeInputPropertiesAndCheckoutId)
			.then(PaymentView.setUpIframeStyles)
			.then(function () {
				if (iframeCommunication.$iframe.hasClass("wpwl-control-cvv")) {
					new CVVHint(iframeCommunication.$form).init();
				}
				Options.onReadyIframeCommunication.call(iframeCommunication);
				State.pciIframeCommunicationReady = true;
			});
		return deferred.resolve();
	};

	PaymentView.loadPromise = function(iframeCommunication){
		var $iframe = iframeCommunication.$iframe;
		
		var deferred = $.Deferred();

		$iframe.on('load', function() {
			deferred.resolve(iframeCommunication);
		});

		setTimeout(function(){
			deferred.reject("Unable to load number and cvv iframes.");
		}, 60000);

		return deferred.promise();
	};

	PaymentView.setUpOnClickCardLogoBrands = function() {
        var cardLogos = PaymentView.getCardLogoBrands($('form.wpwl-form-card'));
        if (!cardLogos || cardLogos.length === 0) {
            return;
        }

        cardLogos.each(function() {
            if ($(this).attr('onClick') === undefined) {
                $(this).on('click.wpwlEvent', function() {
                    logoClicked = true;
                    var detectedBrand = $(this).attr('value');
                    PaymentView.updateCardBrand(detectedBrand);
                });
            }
        });
	};

	PaymentView.setUpIframeCommunication = function(iframeCommunication){
		var win = iframeCommunication.$iframe.get(0).contentWindow;
		var scope = "iframeCommunication";

		return iframeCommunication.setupChannel(win, scope);
	};
	
	PaymentView.initIframeListeners = function(iframeCommunication){
		iframeCommunication.initListeners();

		return iframeCommunication;
	};

	// Enables brand detection if Options.brandDetection is true
	PaymentView.enableBrandDetection = function(iframeCommunication){
	    if (Options.brandDetection) {
		    iframeCommunication.enableBrandDetection();
		}

		return iframeCommunication;
	};

	PaymentView.setUpIframeInputPropertiesAndCheckoutId = function(iframeCommunication){
		return $.when(
			PaymentView.setUpIframeInputProperties(iframeCommunication),
			PaymentView.setUpIframeCheckoutId(iframeCommunication)
		).then(function(){
			return iframeCommunication;
		});
	};
	
	PaymentView.setUpIframeStyles = function(iframeCommunication){
		return $.when(
			PaymentView.setUpIframeInputPlaceholder(iframeCommunication),
			PaymentView.setUpIframeInputStyles(iframeCommunication)
		).then(function(){
			return iframeCommunication;
		});
	};
	
	PaymentView.setUpIframeInputProperties = function(iframeCommunication){
		iframeCommunication.applyInputProperties( {
												name : iframeCommunication.$iframe.attr('name'),
												maxLength: iframeCommunication.$iframe.attr('data-maxLength'),
												maskCvv : Options.requireCvv && Options.maskCvv,
												numberFormatting : Options.numberFormatting,
												autocomplete: iframeCommunication.$iframe.attr('autocomplete'),
												ariaLabel: iframeCommunication.$iframe.attr('aria-label'),
												id: iframeCommunication.$iframe.attr('id')
											});
	};
	
	PaymentView.setUpIframeCheckoutId = function(iframeCommunication){
		iframeCommunication.applyCheckoutId(Wpwl.checkout.id);
	};

	PaymentView.setUpIframeInputPlaceholder = function(iframeCommunication){
		iframeCommunication.applyInputPlaceholder(iframeCommunication.$iframe.attr('placeholder'));
	};

	PaymentView.setUpIframeInputStyles = function(iframeCommunication){
		iframeCommunication.$iframe.removeClass("disabled");
		iframeCommunication.applyInputStyles(PaymentView.getElementStyles(iframeCommunication.$iframe));
		iframeCommunication.applyIframeStyles(Options.iframeStyles);
	};
	
	PaymentView.getElementStyles = function($elem){
		// the input needs only typo, color, background, padding
		var styles = ['font-family','font-size','font-weight','font-style','color',
			'text-transform','text-decoration','letter-spacing','word-spacing',
			'line-height','text-align','vertical-align','direction','background-color',
			'background-image','background-repeat','background-position',
			'background-attachment','opacity',/*'width','height','top','right','bottom',
			'left','margin-top','margin-right','margin-bottom','margin-left',*/
			/*'padding-top','padding-right','padding-bottom','padding-left',*/
			/*'border-top-width','border-right-width','border-bottom-width',
			'border-left-width','border-top-color','border-right-color',
			'border-bottom-color','border-left-color','border-top-style',
			'border-right-style','border-bottom-style','border-left-style',*//*'position',
			'display','visibility','z-index','overflow-x','overflow-y','white-space',
			'clip','float','clear','cursor','list-style-image','list-style-position',
			'list-style-type','marker-offset',*//*'border-radius',*/'box-sizing'];
		
		var stylesObject = PaymentView.getElementStylesObject($elem, styles);
		
		return stylesObject;
	};
	
	PaymentView.getElementStylesObject = function($elem, styles){
		var stylesObject = {};
		
		for(var i = 0, len = styles.length; i < len; i++){
			stylesObject[styles[i]] = $elem.css(styles[i]);
		}
		
		return stylesObject;
	};

	PaymentView.showSupportMessage = function(message, elem){
		new MessageView({elem: elem, method: 'before', message: new SupportMessage(message)}).inject();
	};

	PaymentView.showPleaseTryAgainMessage = function(elem){
		var message = "Payment cannot be completed and your account has not been charged. Please go back and try again.";
		new MessageView({elem: elem, method: 'before', message: new Message({message:message, type:'error'})}).inject();
	};

	PaymentView.disableSubmitButton = function($form, disabled){
	    if (PaymentView.isPaying && !disabled){
	        //Don't enable if we are paying!
	        return;
	    }

	    $form.find("button[type=\"submit\"]").attr("disabled", disabled);
	};

    PaymentView.submitPciIframeFailed = function(error, reason, $form) {
        var errorMessage, errorName;
        if (Util.isObject(error)) {
            // error is probably a jquery XHR object
            errorMessage = "submitPciIframe failed with status: " + error.statusText + "  and response: " + error.responseText;
            var errorCode = error.responseJSON && error.responseJSON.result && error.responseJSON.result.code;
            errorName = OppError.getErrorNameByReturnCode(errorCode) || "PciIframeSubmitError";
        } else {
            // error is probably a jschannel string
            errorMessage = "submitPciIFrame failed with " + error + ": " + reason;
            errorName = "PciIframeCommunicationError";
        }

        PaymentView.showSupportMessage(errorMessage, $form);
        Options.onError(new OppError(errorMessage, errorName));
        Tracking.exception(errorMessage);
    };

    PaymentView.hideOrShowMobile = function(hide){
    	var $form = $(this).closest("form");

    	PaymentView.hideOrShowElement($form, ".wpwl-group-mobilePhoneCountryCode", hide);
    	PaymentView.hideOrShowElement($form, ".wpwl-group-mobilePhoneNumber", hide);

        // This is necessary in order to prevent the overhead int Brands that don't need the mobile number and cc to have those parameters in the request
    	$form.find("input[type=text][name='" + Parameter.MOBILE_NUMBER + "']").prop("disabled", hide);
    	$form.find("input[type=text][name='" + Parameter.MOBILE_COUNTRY_CODE + "']").prop("disabled", hide);
    };

    PaymentView.hideOrShowBirthDate = function(hide){
        var $form = $(this).closest("form");

        PaymentView.hideOrShowElement($form, ".wpwl-group-birthDate", hide);

        // Make sure these parameters are in the request only when needed
        $form.find("input[type=text][name='" + Parameter.BIRTH_DATE + "']").prop("disabled", hide);
        $form.find('input[type=text][name="' + CardPaymentForm.WIDGET_BIRTH_DATE + '"]').prop("disabled", hide);
    };

    PaymentView.hideOrShowExpiryDate = function(hide){
        	var $form = $(this).closest("form");
        	PaymentView.hideOrShowElement($form, ".wpwl-group-expiry", hide);
    };

	return PaymentView;
});

// To focus element defined on Options.autofocus
define('module/AutoFocus',['require','jquery','module/Options'],function(require) {

    var $ = require('jquery');
    var Options = require('module/Options');

    var AutoFocus = {};

    function getSelector() {
        return 'input[name="' + Options.autofocus + '"], select[name="' + Options.autofocus + '"]';
    }

    function checkSingleElement(element) {
        if (typeof element.setInputToFocus === 'function' && element.getIframeName() === Options.autofocus) {
            element.setInputToFocus();
        }
        else if (AutoFocus.isOptionSafe(Options.autofocus)) {
            $(element).find(getSelector()).focus();
        }
    }

    AutoFocus.isOptionSafe = function(selector) {
        return /^[a-zA-Z]([a-zA-Z\d])*(\.([a-zA-Z\d])+){0,2}$/.test(selector);
    };

    AutoFocus.checkAutoFocus = function(elements) {

        if (typeof Options.autofocus !== 'undefined') {

            for (var index=0; index<elements.length; index++) {

                if (typeof elements[index] !== 'undefined') {
                    checkSingleElement(elements[index]);
                }
            }
        }
    };

    return AutoFocus;
});

define('lib/Channel',['require','jquery'],function(require){
	var $ = require('jquery');
	
	/*
	 * js_channel is a very lightweight abstraction on top of
	 * postMessage which defines message formats and semantics
	 * to support interactions more rich than just message passing
	 * js_channel supports:
	 *  + query/response - traditional rpc
	 *  + query/update/response - incremental async return of results
	 *	to a query
	 *  + notifications - fire and forget
	 *  + error handling
	 *
	 * js_channel is based heavily on json-rpc, but is focused at the
	 * problem of inter-iframe RPC.
	 *
	 * Message types:
	 *  There are 5 types of messages that can flow over this channel,
	 *  and you may determine what type of message an object is by
	 *  examining its parameters:
	 *  1. Requests
	 *	+ integer id
	 *	+ string method
	 *	+ (optional) any params
	 *  2. Callback Invocations (or just "Callbacks")
	 *	+ integer id
	 *	+ string callback
	 *	+ (optional) params
	 *  3. Error Responses (or just "Errors)
	 *	+ integer id
	 *	+ string error
	 *	+ (optional) string message
	 *  4. Responses
	 *	+ integer id
	 *	+ (optional) any result
	 *  5. Notifications
	 *	+ string method
	 *	+ (optional) any params
	 */

	;var Channel = (function() {
		"use strict";

		// current transaction id, start out at a random *odd* number between 1 and a million
		// There is one current transaction counter id per page, and it's shared between
		// channel instances.  That means of all messages posted from a single javascript
		// evaluation context, we'll never have two with the same id.
		var s_curTranId = Math.floor(Math.random()*1000001);

		// no two bound channels in the same javascript evaluation context may have the same origin, scope, and window.
		// futher if two bound channels have the same window and scope, they may not have *overlapping* origins
		// (either one or both support '*').  This restriction allows a single onMessage handler to efficiently
		// route messages based on origin and scope.  The s_boundChans maps origins to scopes, to message
		// handlers.  Request and Notification messages are routed using this table.
		// Finally, channels are inserted into this table when built, and removed when destroyed.
		var s_boundChans = { };

		// add a channel to s_boundChans, throwing if a dup exists
		function s_addBoundChan(win, origin, scope, handler) {
			function hasWin(arr) {
				for (var i = 0; i < arr.length; i++) if (arr[i].win === win) return true;
				return false;
			}

			// does she exist?
			var exists = false;


			if (origin === '*') {
				// we must check all other origins, sadly.
				for (var k in s_boundChans) {
					if (!s_boundChans.hasOwnProperty(k)) continue;
					if (k === '*') continue;
					if (typeof s_boundChans[k][scope] === 'object') {
						exists = hasWin(s_boundChans[k][scope]);
						if (exists) break;
					}
				}
			} else {
				// we must check only '*'
				if ((s_boundChans['*'] && s_boundChans['*'][scope])) {
					exists = hasWin(s_boundChans['*'][scope]);
				}
				if (!exists && s_boundChans[origin] && s_boundChans[origin][scope])
				{
					exists = hasWin(s_boundChans[origin][scope]);
				}
			}
			if (exists) throw "A channel is already bound to the same window which overlaps with origin '"+ origin +"' and has scope '"+scope+"'";

			if (typeof s_boundChans[origin] != 'object') s_boundChans[origin] = { };
			if (typeof s_boundChans[origin][scope] != 'object') s_boundChans[origin][scope] = [ ];
			s_boundChans[origin][scope].push({win: win, handler: handler});
		}

		function s_removeBoundChan(win, origin, scope) {
			var arr = s_boundChans[origin][scope];
			for (var i = 0; i < arr.length; i++) {
				if (arr[i].win === win) {
					arr.splice(i,1);
				}
			}
			if (s_boundChans[origin][scope].length === 0) {
				delete s_boundChans[origin][scope];
			}
		}

		function s_isArray(obj) {
			if (Array.isArray) return Array.isArray(obj);
			else {
				return (obj.constructor.toString().indexOf("Array") != -1);
			}
		}

		// No two outstanding outbound messages may have the same id, period.  Given that, a single table
		// mapping "transaction ids" to message handlers, allows efficient routing of Callback, Error, and
		// Response messages.  Entries are added to this table when requests are sent, and removed when
		// responses are received.
		var s_transIds = { };

		// class singleton onMessage handler
		// this function is registered once and all incoming messages route through here.  This
		// arrangement allows certain efficiencies, message data is only parsed once and dispatch
		// is more efficient, especially for large numbers of simultaneous channels.
		var s_onMessage = function(e) {
			try {
			  var m = JSON.parse(e.data);
			  if (typeof m !== 'object' || m === null) throw "malformed";
			} catch(e) {
			  // just ignore any posted messages that do not consist of valid JSON
			  return;
			}

			var w = e.source;
			var o = e.origin;
			var s, i, meth;

			if (typeof m.method === 'string') {
				var ar = m.method.split('::');
				if (ar.length == 2) {
					s = ar[0];
					meth = ar[1];
				} else {
					meth = m.method;
				}
			}

			if (typeof m.id !== 'undefined') i = m.id;

			// w is message source window
			// o is message origin
			// m is parsed message
			// s is message scope
			// i is message id (or undefined)
			// meth is unscoped method name
			// ^^ based on these factors we can route the message

			// if it has a method it's either a notification or a request,
			// route using s_boundChans
			if (typeof meth === 'string') {
				var delivered = false;
				if (s_boundChans[o] && s_boundChans[o][s]) {
					for (var j = 0; j < s_boundChans[o][s].length; j++) {
						if (s_boundChans[o][s][j].win === w) {
							s_boundChans[o][s][j].handler(o, meth, m);
							delivered = true;
							break;
						}
					}
				}

				if (!delivered && s_boundChans['*'] && s_boundChans['*'][s]) {
					for (var j = 0; j < s_boundChans['*'][s].length; j++) {
						if (s_boundChans['*'][s][j].win === w) {
							s_boundChans['*'][s][j].handler(o, meth, m);
							break;
						}
					}
				}
			}
			// otherwise it must have an id (or be poorly formed
			else if (typeof i != 'undefined') {
				if (s_transIds[i]) s_transIds[i](o, meth, m);
			}
		};

		// Setup postMessage event listeners
		if (window.addEventListener) window.addEventListener('message', s_onMessage, false);
		else if(window.attachEvent) window.attachEvent('onmessage', s_onMessage);

		/* a messaging channel is constructed from a window and an origin.
		 * the channel will assert that all messages received over the
		 * channel match the origin
		 *
		 * Arguments to Channel.build(cfg):
		 *
		 *   cfg.window - the remote window with which we'll communicate
		 *   cfg.origin - the expected origin of the remote window, may be '*'
		 *				which matches any origin
		 *   cfg.scope  - the 'scope' of messages.  a scope string that is
		 *				prepended to message names.  local and remote endpoints
		 *				of a single channel must agree upon scope. Scope may
		 *				not contain double colons ('::').
		 *   cfg.debugOutput - A boolean value.  If true and window.console.log is
		 *				a function, then debug strings will be emitted to that
		 *				function.
		 *   cfg.debugOutput - A boolean value.  If true and window.console.log is
		 *				a function, then debug strings will be emitted to that
		 *				function.
		 *   cfg.postMessageObserver - A function that will be passed two arguments,
		 *				an origin and a message.  It will be passed these immediately
		 *				before messages are posted.
		 *   cfg.gotMessageObserver - A function that will be passed two arguments,
		 *				an origin and a message.  It will be passed these arguments
		 *				immediately after they pass scope and origin checks, but before
		 *				they are processed.
		 *   cfg.onReady - A function that will be invoked when a channel becomes "ready",
		 *				this occurs once both sides of the channel have been
		 *				instantiated and an application level handshake is exchanged.
		 *				the onReady function will be passed a single argument which is
		 *				the channel object that was returned from build().
		 */
		return {
			build: function(cfg) {
				var debug = function(m) {
					if (cfg.debugOutput && window.console && window.console.log) {
						// try to stringify, if it doesn't work we'll let javascript's built in toString do its magic
						try { if (typeof m !== 'string') m = JSON.stringify(m); } catch(e) { }
						console.log("["+chanId+"] " + m);
					}
				};

				/* browser capabilities check */
				if (!window.postMessage) throw("jschannel cannot run this browser, no postMessage");
				if (!window.JSON || !window.JSON.stringify || ! window.JSON.parse) {
					throw("jschannel cannot run this browser, no JSON parsing/serialization");
				}

				/* basic argument validation */
				if (typeof cfg != 'object') throw("Channel build invoked without a proper object argument");

				if (!cfg.window || !cfg.window.postMessage) throw("Channel.build() called without a valid window argument");

				/* we'd have to do a little more work to be able to run multiple channels that intercommunicate the same
				 * window...  Not sure if we care to support that */
				if (window === cfg.window) throw("target window is same as present window -- not allowed");

				// let's require that the client specify an origin.  if we just assume '*' we'll be
				// propagating unsafe practices.  that would be lame.
				var validOrigin = false;
				if (typeof cfg.origin === 'string') {
					var oMatch;
					if (cfg.origin === "*") validOrigin = true;
					// allow valid domains under http and https.  Also, trim paths off otherwise valid origins.
					else if (null !== (oMatch = cfg.origin.match(/^https?:\/\/(?:[-a-zA-Z0-9_\.])+(?::\d+)?/))) {
						cfg.origin = oMatch[0].toLowerCase();
						validOrigin = true;
					}
				}

				if (!validOrigin) throw ("Channel.build() called with an invalid origin");

				if (typeof cfg.scope !== 'undefined') {
					if (typeof cfg.scope !== 'string') throw 'scope, when specified, must be a string';
					if (cfg.scope.split('::').length > 1) throw "scope may not contain double colons: '::'";
				}

				/* private variables */
				// generate a random and psuedo unique id for this channel
				var chanId = (function () {
					var text = "";
					var alpha = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
					for(var i=0; i < 5; i++) text += alpha.charAt(Math.floor(Math.random() * alpha.length));
					return text;
				})();

				// registrations: mapping method names to call objects
				var regTbl = { };
				// current oustanding sent requests
				var outTbl = { };
				// current oustanding received requests
				var inTbl = { };
				// are we ready yet?  when false we will block outbound messages.
				var ready = false;
				var pendingQueue = [ ];

				var createTransaction = function(id,origin,callbacks) {
					var shouldDelayReturn = false;
					var completed = false;

					return {
						origin: origin,
						invoke: function(cbName, v) {
							// verify in table
							if (!inTbl[id]) throw "attempting to invoke a callback of a nonexistent transaction: " + id;
							// verify that the callback name is valid
							var valid = false;
							for (var i = 0; i < callbacks.length; i++) if (cbName === callbacks[i]) { valid = true; break; }
							if (!valid) throw "request supports no such callback '" + cbName + "'";

							// send callback invocation
							postMessage({ id: id, callback: cbName, params: v});
						},
						error: function(error, message) {
							completed = true;
							// verify in table
							if (!inTbl[id]) throw "error called for nonexistent message: " + id;

							// remove transaction from table
							delete inTbl[id];

							// send error
							postMessage({ id: id, error: error, message: message });
						},
						complete: function(v) {
							completed = true;
							// verify in table
							if (!inTbl[id]) throw "complete called for nonexistent message: " + id;
							// remove transaction from table
							delete inTbl[id];
							// send complete
							postMessage({ id: id, result: v });
						},
						delayReturn: function(delay) {
							if (typeof delay === 'boolean') {
								shouldDelayReturn = (delay === true);
							}
							return shouldDelayReturn;
						},
						completed: function() {
							return completed;
						}
					};
				};

				var setTransactionTimeout = function(transId, timeout, method) {
				  return window.setTimeout(function() {
					if (outTbl[transId]) {
					  // XXX: what if client code raises an exception here?
					  var msg = "timeout (" + timeout + "ms) exceeded on method '" + method + "'";
					  (1,outTbl[transId].error)("timeout_error", msg);
					  delete outTbl[transId];
					  delete s_transIds[transId];
					}
				  }, timeout);
				};

				var onMessage = function(origin, method, m) {
					// if an observer was specified at allocation time, invoke it
					if (typeof cfg.gotMessageObserver === 'function') {
						// pass observer a clone of the object so that our
						// manipulations are not visible (i.e. method unscoping).
						// This is not particularly efficient, but then we expect
						// that message observers are primarily for debugging anyway.
						try {
							cfg.gotMessageObserver(origin, m);
						} catch (e) {
							debug("gotMessageObserver() raised an exception: " + e.toString());
						}
					}

					// now, what type of message is this?
					if (m.id && method) {
						// a request!  do we have a registered handler for this request?
						if (regTbl[method]) {
							var trans = createTransaction(m.id, origin, m.callbacks ? m.callbacks : [ ]);
							inTbl[m.id] = { };
							try {
								// callback handling.  we'll magically create functions inside the parameter list for each
								// callback
								if (m.callbacks && s_isArray(m.callbacks) && m.callbacks.length > 0) {
									for (var i = 0; i < m.callbacks.length; i++) {
										var path = m.callbacks[i];
										var obj = m.params;
										var pathItems = path.split('/');
										for (var j = 0; j < pathItems.length - 1; j++) {
											var cp = pathItems[j];
											if (typeof obj[cp] !== 'object') obj[cp] = { };
											obj = obj[cp];
										}
										obj[pathItems[pathItems.length - 1]] = (function() {
											var cbName = path;
											return function(params) {
												return trans.invoke(cbName, params);
											};
										})();
									}
								}
								var resp = regTbl[method](trans, m.params);
								if (!trans.delayReturn() && !trans.completed()) trans.complete(resp);
							} catch(e) {
								// automagic handling of exceptions:
								var error = "runtime_error";
								var message = null;
								// * if it's a string then it gets an error code of 'runtime_error' and string is the message
								if (typeof e === 'string') {
									message = e;
								} else if (typeof e === 'object') {
									// either an array or an object
									// * if it's an array of length two, then  array[0] is the code, array[1] is the error message
									if (e && s_isArray(e) && e.length == 2) {
										error = e[0];
										message = e[1];
									}
									// * if it's an object then we'll look form error and message parameters
									else if (typeof e.error === 'string') {
										error = e.error;
										if (!e.message) message = "";
										else if (typeof e.message === 'string') message = e.message;
										else e = e.message; // let the stringify/toString message give us a reasonable verbose error string
									}
								}

								// message is *still* null, let's try harder
								if (message === null) {
									try {
										message = JSON.stringify(e);
										/* On MSIE8, this can result in 'out of memory', which
										 * leaves message undefined. */
										if (typeof(message) == 'undefined')
										  message = e.toString();
									} catch (e2) {
										message = e.toString();
									}
								}

								trans.error(error,message);
							}
						}
					} else if (m.id && m.callback) {
						if (!outTbl[m.id] ||!outTbl[m.id].callbacks || !outTbl[m.id].callbacks[m.callback])
						{
							debug("ignoring invalid callback, id:"+m.id+ " (" + m.callback +")");
						} else {
							// XXX: what if client code raises an exception here?
							outTbl[m.id].callbacks[m.callback](m.params);
						}
					} else if (m.id) {
						if (!outTbl[m.id]) {
							debug("ignoring invalid response: " + m.id);
						} else {
							// XXX: what if client code raises an exception here?
							if (m.error) {
								(1,outTbl[m.id].error)(m.error, m.message);
							} else {
								if (m.result !== undefined) (1,outTbl[m.id].success)(m.result);
								else (1,outTbl[m.id].success)();
							}
							delete outTbl[m.id];
							delete s_transIds[m.id];
						}
					} else if (method) {
						// tis a notification.
						if (regTbl[method]) {
							// yep, there's a handler for that.
							// transaction has only origin for notifications.
							regTbl[method]({ origin: origin }, m.params);
							// if the client throws, we'll just let it bubble out
							// what can we do?  Also, here we'll ignore return values
						}
					}
				};

				// now register our bound channel for msg routing
				s_addBoundChan(cfg.window, cfg.origin, ((typeof cfg.scope === 'string') ? cfg.scope : ''), onMessage);

				// scope method names based on cfg.scope specified when the Channel was instantiated
				var scopeMethod = function(m) {
					if (typeof cfg.scope === 'string' && cfg.scope.length) m = [cfg.scope, m].join("::");
					return m;
				};

				// a small wrapper around postmessage whose primary function is to handle the
				// case that clients start sending messages before the other end is "ready"
				var postMessage = function(msg, force) {
					if (!msg) throw "postMessage called with null message";

					// delay posting if we're not ready yet.
					var verb = (ready ? "post  " : "queue ");
					debug(verb + " message: " + JSON.stringify(msg));
					if (!force && !ready) {
						pendingQueue.push(msg);
					} else {
						if (typeof cfg.postMessageObserver === 'function') {
							try {
								cfg.postMessageObserver(cfg.origin, msg);
							} catch (e) {
								debug("postMessageObserver() raised an exception: " + e.toString());
							}
						}

						try{
							// throws errors in tests, when child iframe is not loaded
							cfg.window.postMessage(JSON.stringify(msg), cfg.origin);
						} catch (e) {
							console.log(e);
						}
					}
				};

				var onReady = function(trans, type) {
					debug('ready msg received');
					if (ready) throw "received ready message while in ready state.  help!";

					if (type === 'ping') {
						chanId += '-R';
					} else {
						chanId += '-L';
					}

					obj.unbind('__ready'); // now this handler isn't needed any more.
					ready = true;
					debug('ready msg accepted.');

					if (type === 'ping') {
						obj.notify({ method: '__ready', params: 'pong' });
					}

					// flush queue
					while (pendingQueue.length) {
						postMessage(pendingQueue.pop());
					}

					// invoke onReady observer if provided
					if (typeof cfg.onReady === 'function') cfg.onReady(obj);
				};

				var obj = {
					// tries to unbind a bound message handler.  returns false if not possible
					unbind: function (method) {
						if (regTbl[method]) {
							if (!(delete regTbl[method])) throw ("can't delete method: " + method);
							return true;
						}
						return false;
					},
					bind: function (method, cb) {
						if (!method || typeof method !== 'string') throw "'method' argument to bind must be string";
						if (!cb || typeof cb !== 'function') throw "callback missing from bind params";

						if (regTbl[method]) throw "method '"+method+"' is already bound!";
						regTbl[method] = cb;
						return this;
					},
					call: function(m) {
						if (!m) throw 'missing arguments to call function';
						if (!m.method || typeof m.method !== 'string') throw "'method' argument to call must be string";
						if (!m.success || typeof m.success !== 'function') throw "'success' callback missing from call";

						// now it's time to support the 'callback' feature of jschannel.  We'll traverse the argument
						// object and pick out all of the functions that were passed as arguments.
						var callbacks = { };
						var callbackNames = [ ];
						var seen = [ ];

						var pruneFunctions = function (path, obj) {
							if ($.inArray(obj, seen) !== -1) {
								throw "params cannot be a recursive data structure"
							}
							seen.push(obj);
						   
							if (typeof obj === 'object') {
								for (var k in obj) {
									if (!obj.hasOwnProperty(k)) continue;
									var np = path + (path.length ? '/' : '') + k;
									if (typeof obj[k] === 'function') {
										callbacks[np] = obj[k];
										callbackNames.push(np);
										delete obj[k];
									} else if (typeof obj[k] === 'object') {
										pruneFunctions(np, obj[k]);
									}
								}
							}
						};
						pruneFunctions("", m.params);

						// build a 'request' message and send it
						var msg = { id: s_curTranId, method: scopeMethod(m.method), params: m.params };
						if (callbackNames.length) msg.callbacks = callbackNames;

						if (m.timeout)
						  // XXX: This function returns a timeout ID, but we don't do anything with it.
						  // We might want to keep track of it so we can cancel it using clearTimeout()
						  // when the transaction completes.
						  setTransactionTimeout(s_curTranId, m.timeout, scopeMethod(m.method));

						// insert into the transaction table
						outTbl[s_curTranId] = { callbacks: callbacks, error: m.error, success: m.success };
						s_transIds[s_curTranId] = onMessage;

						// increment current id
						s_curTranId++;

						postMessage(msg);
					},
					notify: function(m) {
						if (!m) throw 'missing arguments to notify function';
						if (!m.method || typeof m.method !== 'string') throw "'method' argument to notify must be string";

						// no need to go into any transaction table
						postMessage({ method: scopeMethod(m.method), params: m.params });
					},
					destroy: function () {
						s_removeBoundChan(cfg.window, cfg.origin, ((typeof cfg.scope === 'string') ? cfg.scope : ''));
						if (window.removeEventListener) window.removeEventListener('message', onMessage, false);
						else if(window.detachEvent) window.detachEvent('onmessage', onMessage);
						ready = false;
						regTbl = { };
						inTbl = { };
						outTbl = { };
						cfg.origin = null;
						pendingQueue = [ ];
						debug("channel destroyed");
						chanId = "";
					}
				};

				obj.bind('__ready', onReady);
				setTimeout(function() {
					postMessage({ method: scopeMethod('__ready'), params: "ping" }, true);
				}, 0);

				return obj;
			}
		};
	})();
	
	return Channel;
});
define('module/StylePropertiesFilter',['require','jquery'],function(require){
    var $ = require("jquery");

    // list of regexp to test css values
    var valueBlacklist = [];
    valueBlacklist.push(/url/ig);
    valueBlacklist.push(/javascript/ig);
    valueBlacklist.push(/expression/ig);
    valueBlacklist.push(/script/ig);
    valueBlacklist.push(/style/ig);
    valueBlacklist.push(/import/ig);
    valueBlacklist.push(/[<>\{\}/\\]/ig);

    var StylePropertiesFilter = {};

    StylePropertiesFilter.isStylePropertyValueSafe = function(value) {
        return valueBlacklist.every(function(pattern) {
            return !pattern.test(value);
        });
    };

    StylePropertiesFilter.getDangerousStyles = function(styles){
        var dangerousStyles = {};

        filter(styles, function(key, value){
            $.each(valueBlacklist, function(index){
                if(valueBlacklist[index].test(value)){
                    dangerousStyles[key] = value;
                }
            });
        });

        return dangerousStyles;
    };

    StylePropertiesFilter.sanitize = function(value) {
        if (!value) {
            return value;
        }

        return valueBlacklist.reduce(function(r, reg) {
            return r.replace(reg, '');
        }, value);
    };

    function filter(obj, predicate){
        var result = {};

        $.each(obj || {}, function(key, value) {
            /* istanbul ignore else */
            if (predicate(key, value)) {
                result[key] = value;
            }
        });

        return result;
    }

    return StylePropertiesFilter;
});

define('module/ParentToIframeCommunication',['require','jquery','lib/Channel','module/Options','module/PaymentView','module/StylePropertiesFilter','module/Tracking','module/Wpwl','module/Util'],function(require){
	var $ = require('jquery');
	var Channel = require('lib/Channel');
	var Options = require('module/Options');
	var PaymentView = require('module/PaymentView');
	var StylePropertiesFilter = require('module/StylePropertiesFilter');
	var Tracking = require('module/Tracking');
	var Wpwl = require('module/Wpwl');
	var Util = require('module/Util');

	var COMMUNICATION_TIMEOUT = 60000;

	var ParentToIframeCommunication = function(elements, callbacks){
        this.isEmpty = true;
		// elements
		this.$form = elements.$form;
		this.$iframe = elements.$iframe;
		// callbacks
		this.setIsValid = callbacks.setIsValid;
		// create new deferred instance
		this.onReadyDeferred = $.Deferred();
	};
	
	ParentToIframeCommunication.prototype.setupChannel = function(win, scope){
		try {
			this.channel = Channel.build({
				//debugOutput: true,
				window: win,
				origin: Wpwl.url,
				scope: scope,
				onReady: $.proxy(this, "onReady")
			});
		}
		catch (e) {
			this.rejectDeferred();
		}
		
		this.timeout = setTimeout($.proxy(this, "rejectDeferred"), COMMUNICATION_TIMEOUT);

		return this.onReadyDeferred.promise();
	};

	ParentToIframeCommunication.prototype.stopListening = function(){
		this.channel.destroy();
	};
	
	ParentToIframeCommunication.prototype.onReady = function(){
	    this.sendWpwl();
		this.timeout = clearTimeout(this.timeout);
		this.onReadyDeferred.resolve(this);
	};
	
	ParentToIframeCommunication.prototype.rejectDeferred = function(){
		if (this.timeout !== undefined){
            this.timeout = clearTimeout(this.timeout);
			//This is needed because some cases call directly the rejectDeferred without waiting for the timeout
		}
		this.onReadyDeferred.reject("Unable to set up number and cvv inputs.");
	};
	
	ParentToIframeCommunication.prototype.initListeners = function(){
		var parentToIframeCommunication = this;
		
		this.channel.bind("getBrand", function(){
			return parentToIframeCommunication.getBrand(parentToIframeCommunication.$form);
		});

    	this.channel.bind("setDetectedBrands", function(context, info) {
    	    parentToIframeCommunication.updateBrands(info.brands, info.inputLength);
    	});
				
		this.channel.bind("onBlur", function(context, isEmpty){
			parentToIframeCommunication.onBlur(isEmpty);
		});
		
		this.channel.bind("onFocus", function(context, isEmpty){
			parentToIframeCommunication.onFocus(isEmpty);
		});

		this.channel.bind("onIframeTriggeredSubmit", function() {
			parentToIframeCommunication.iframeTriggeredSubmit(parentToIframeCommunication.$form);
		});

		this.channel.bind("setIsValid", function(context, obj){
			parentToIframeCommunication.setIsValid(parentToIframeCommunication, obj);
		});

		return this;
	};
	
	ParentToIframeCommunication.prototype.hasChannel = function(){
		return !!this.channel;
	};
	
	// iframe calls on parent
	ParentToIframeCommunication.prototype.getBrand = function($form){
		return PaymentView.getBrand($form);
	};

	ParentToIframeCommunication.prototype.updateBrands = function(brands, inputLength) {
		return PaymentView.updateCardBrands(brands, inputLength);
	};
		
	ParentToIframeCommunication.prototype.onBlur = function(isEmpty){
		this.isEmpty = isEmpty;
		Options.onBlurIframeCommunication.call(this);
	};
	
	ParentToIframeCommunication.prototype.onFocus = function(isEmpty){
        this.isEmpty = isEmpty;
        Options.onFocusIframeCommunication.call(this);
	};

	ParentToIframeCommunication.prototype.iframeTriggeredSubmit = function($form) {
		$form.trigger('submit');
	};

	// parent calls on iframe
	ParentToIframeCommunication.prototype.applyInputPlaceholder = function(placeholder){
		return createSendMessageOnChannelPromise.call(this, "applyInputPlaceholder", placeholder);
	};
	
	ParentToIframeCommunication.prototype.applyInputStyles = function(stylesObject){
		var dangerousStyles = StylePropertiesFilter.getDangerousStyles(stylesObject);
		if (!$.isEmptyObject(dangerousStyles)){
			Tracking.event("PCI Iframe", "applyInputStyles", "stylesObject", JSON.stringify(dangerousStyles));
		}

		return createSendMessageOnChannelPromise.call(this, "applyInputStyles", stylesObject);
	};

	ParentToIframeCommunication.prototype.applyIframeStyles = function(stylesObject) {
        return createSendMessageOnChannelPromise.call(this, "applyIframeStyles", stylesObject);
    };
	
	ParentToIframeCommunication.prototype.submitFormAndGetToken = function(){
		return createSendMessageOnChannelPromise.call(this, "submitFormAndGetToken");
	};
	
	ParentToIframeCommunication.prototype.validateInput = function(allowEmptyValue, eventName) {
		return createSendMessageOnChannelPromise.call(this, "validateInput",
				{ allowEmptyValue: allowEmptyValue, eventName:eventName } );
	};
	
	ParentToIframeCommunication.prototype.enableBrandDetection = function(){
		return createSendMessageOnChannelPromise.call(this, "enableBrandDetection");
	};

	ParentToIframeCommunication.prototype.disableBrandDetection = function(){
		return createSendMessageOnChannelPromise.call(this, "disableBrandDetection");
	};

	ParentToIframeCommunication.prototype.setInputToFocus = function(){
		return createSendMessageOnChannelPromise.call(this, "setInputToFocus");
	};

	ParentToIframeCommunication.prototype.getIframeName = function(){
		return this.$iframe.attr('name');
	};

	ParentToIframeCommunication.prototype.updateCardFormatting = function(){
		
		if ( this.channel )
		{
			return createSendMessageOnChannelPromise.call(this, "updateCardFormatting");
		}
	};
	
	ParentToIframeCommunication.prototype.applyInputProperties = function(properties){
		return createSendMessageOnChannelPromise.call(this, "applyInputProperties", properties);
	};
	
	ParentToIframeCommunication.prototype.applyCheckoutId = function(checkoutId){
		return createSendMessageOnChannelPromise.call(this, "applyCheckoutId", checkoutId);
	};

	ParentToIframeCommunication.prototype.sendWpwl = function(){
        var cleanWpwl = Util.cleanObjectFunctions(window.wpwl);
        var cleanWpwlOptions = Util.cleanObjectFunctions(window.wpwlOptions);
        cleanWpwl.wpwlOptions = cleanWpwlOptions;
        return createSendMessageOnChannelPromise.call(this, "sendWpwlOptions", cleanWpwl);
    };

	function createSendMessageOnChannelPromise(method, params){
		var deferred = $.Deferred();
		
		this.channel.call({
			method: method,
			timeout: COMMUNICATION_TIMEOUT,
			params: params,
			success: deferred.resolve,
			error: deferred.reject
		});
		
		return deferred.promise();
	}

	return ParentToIframeCommunication;
}); 

/**
 * Copyright (c) 2011-2014 Felix Gnass
 * Licensed under the MIT license
 */
(function(root, factory) {

  /* CommonJS */
  if (typeof exports == 'object')  module.exports = factory()

  /* AMD module */
  else if (typeof define == 'function' && define.amd) define('lib/Spinner',factory)

  /* Browser global */
  else root.Spinner = factory()
}
(this, function() {
  "use strict";

  var prefixes = ['webkit', 'Moz', 'ms', 'O'] /* Vendor prefixes */
    , animations = {} /* Animation rules keyed by their name */
    , useCssAnimations /* Whether to use CSS animations or setTimeout */

  /**
   * Utility function to create elements. If no tag name is given,
   * a DIV is created. Optionally properties can be passed.
   */
  function createEl(tag, prop) {
    var el = document.createElement(tag || 'div')
      , n

    for(n in prop) el[n] = prop[n]
    return el
  }

  /**
   * Appends children and returns the parent.
   */
  function ins(parent /* child1, child2, ...*/) {
    for (var i=1, n=arguments.length; i<n; i++)
      parent.appendChild(arguments[i])

    return parent
  }

  /**
   * Insert a new stylesheet to hold the @keyframe or VML rules.
   */
  var sheet = (function() {
    var el = createEl('style', {type : 'text/css'})
    ins(document.getElementsByTagName('head')[0], el)
    return el.sheet || el.styleSheet
  }())

  /**
   * Creates an opacity keyframe animation rule and returns its name.
   * Since most mobile Webkits have timing issues with animation-delay,
   * we create separate rules for each line/segment.
   */
  function addAnimation(alpha, trail, i, lines) {
    var name = ['opacity', trail, ~~(alpha*100), i, lines].join('-')
      , start = 0.01 + i/lines * 100
      , z = Math.max(1 - (1-alpha) / trail * (100-start), alpha)
      , prefix = useCssAnimations.substring(0, useCssAnimations.indexOf('Animation')).toLowerCase()
      , pre = prefix && '-' + prefix + '-' || ''

    if (!animations[name]) {
      sheet.insertRule(
        '@' + pre + 'keyframes ' + name + '{' +
        '0%{opacity:' + z + '}' +
        start + '%{opacity:' + alpha + '}' +
        (start+0.01) + '%{opacity:1}' +
        (start+trail) % 100 + '%{opacity:' + alpha + '}' +
        '100%{opacity:' + z + '}' +
        '}', sheet.cssRules.length)

      animations[name] = 1
    }

    return name
  }

  /**
   * Tries various vendor prefixes and returns the first supported property.
   */
  function vendor(el, prop) {
    var s = el.style
      , pp
      , i

    prop = prop.charAt(0).toUpperCase() + prop.slice(1)
    for(i=0; i<prefixes.length; i++) {
      pp = prefixes[i]+prop
      if(s[pp] !== undefined) return pp
    }
    if(s[prop] !== undefined) return prop
  }

  /**
   * Sets multiple style properties at once.
   */
  function css(el, prop) {
    for (var n in prop)
      el.style[vendor(el, n)||n] = prop[n]

    return el
  }

  /**
   * Fills in default values.
   */
  function merge(obj) {
    for (var i=1; i < arguments.length; i++) {
      var def = arguments[i]
      for (var n in def)
        if (obj[n] === undefined) obj[n] = def[n]
    }
    return obj
  }

  /**
   * Returns the absolute page-offset of the given element.
   */
  function pos(el) {
    var o = { x:el.offsetLeft, y:el.offsetTop }
    while((el = el.offsetParent))
      o.x+=el.offsetLeft, o.y+=el.offsetTop

    return o
  }

  /**
   * Returns the line color from the given string or array.
   */
  function getColor(color, idx) {
    return typeof color == 'string' ? color : color[idx % color.length]
  }

  // Built-in defaults

  var defaults = {
    lines: 12,            // The number of lines to draw
    length: 7,            // The length of each line
    width: 5,             // The line thickness
    radius: 10,           // The radius of the inner circle
    rotate: 0,            // Rotation offset
    corners: 1,           // Roundness (0..1)
    color: '#000',        // #rgb or #rrggbb
    direction: 1,         // 1: clockwise, -1: counterclockwise
    speed: 1,             // Rounds per second
    trail: 100,           // Afterglow percentage
    opacity: 1/4,         // Opacity of the lines
    fps: 20,              // Frames per second when using setTimeout()
    zIndex: 2e9,          // Use a high z-index by default
    className: 'spinner', // CSS class to assign to the element
    top: '50%',           // center vertically
    left: '50%',          // center horizontally
    position: 'absolute'  // element position
  }

  /** The constructor */
  function Spinner(o) {
    this.opts = merge(o || {}, Spinner.defaults, defaults)
  }

  // Global defaults that override the built-ins:
  Spinner.defaults = {}

  merge(Spinner.prototype, {

    /**
     * Adds the spinner to the given target element. If this instance is already
     * spinning, it is automatically removed from its previous target b calling
     * stop() internally.
     */
    spin: function(target) {
      this.stop()

      var self = this
        , o = self.opts
        , el = self.el = css(createEl(0, {className: o.className}), {position: o.position, width: 0, zIndex: o.zIndex})
        , mid = o.radius+o.length+o.width

      css(el, {
        left: o.left,
        top: o.top
      })
        
      if (target) {
        target.insertBefore(el, target.firstChild||null)
      }

      el.setAttribute('role', 'progressbar')
      self.lines(el, self.opts)

      if (!useCssAnimations) {
        // No CSS animation support, use setTimeout() instead
        var i = 0
          , start = (o.lines - 1) * (1 - o.direction) / 2
          , alpha
          , fps = o.fps
          , f = fps/o.speed
          , ostep = (1-o.opacity) / (f*o.trail / 100)
          , astep = f/o.lines

        ;(function anim() {
          i++;
          for (var j = 0; j < o.lines; j++) {
            alpha = Math.max(1 - (i + (o.lines - j) * astep) % f * ostep, o.opacity)

            self.opacity(el, j * o.direction + start, alpha, o)
          }
          self.timeout = self.el && setTimeout(anim, ~~(1000/fps))
        })()
      }
      return self
    },

    /**
     * Stops and removes the Spinner.
     */
    stop: function() {
      var el = this.el
      if (el) {
        clearTimeout(this.timeout)
        if (el.parentNode) el.parentNode.removeChild(el)
        this.el = undefined
      }
      return this
    },

    /**
     * Internal method that draws the individual lines. Will be overwritten
     * in VML fallback mode below.
     */
    lines: function(el, o) {
      var i = 0
        , start = (o.lines - 1) * (1 - o.direction) / 2
        , seg

      function fill(color, shadow) {
        return css(createEl(), {
          position: 'absolute',
          width: (o.length+o.width) + 'px',
          height: o.width + 'px',
          background: color,
          boxShadow: shadow,
          transformOrigin: 'left',
          transform: 'rotate(' + ~~(360/o.lines*i+o.rotate) + 'deg) translate(' + o.radius+'px' +',0)',
          borderRadius: (o.corners * o.width>>1) + 'px'
        })
      }

      for (; i < o.lines; i++) {
        seg = css(createEl(), {
          position: 'absolute',
          top: 1+~(o.width/2) + 'px',
          transform: o.hwaccel ? 'translate3d(0,0,0)' : '',
          opacity: o.opacity,
          animation: useCssAnimations && addAnimation(o.opacity, o.trail, start + i * o.direction, o.lines) + ' ' + 1/o.speed + 's linear infinite'
        })

        if (o.shadow) ins(seg, css(fill('#000', '0 0 4px ' + '#000'), {top: 2+'px'}))
        ins(el, ins(seg, fill(getColor(o.color, i), '0 0 1px rgba(0,0,0,.1)')))
      }
      return el
    },

    /**
     * Internal method that adjusts the opacity of a single line.
     * Will be overwritten in VML fallback mode below.
     */
    opacity: function(el, i, val) {
      if (i < el.childNodes.length) el.childNodes[i].style.opacity = val
    }

  })


  function initVML() {

    /* Utility function to create a VML tag */
    function vml(tag, attr) {
      return createEl('<' + tag + ' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">', attr)
    }

    // No CSS transforms but VML support, add a CSS rule for VML elements:
    sheet.addRule('.spin-vml', 'behavior:url(#default#VML)')

    Spinner.prototype.lines = function(el, o) {
      var r = o.length+o.width
        , s = 2*r

      function grp() {
        return css(
          vml('group', {
            coordsize: s + ' ' + s,
            coordorigin: -r + ' ' + -r
          }),
          { width: s, height: s }
        )
      }

      var margin = -(o.width+o.length)*2 + 'px'
        , g = css(grp(), {position: 'absolute', top: margin, left: margin})
        , i

      function seg(i, dx, filter) {
        ins(g,
          ins(css(grp(), {rotation: 360 / o.lines * i + 'deg', left: ~~dx}),
            ins(css(vml('roundrect', {arcsize: o.corners}), {
                width: r,
                height: o.width,
                left: o.radius,
                top: -o.width>>1,
                filter: filter
              }),
              vml('fill', {color: getColor(o.color, i), opacity: o.opacity}),
              vml('stroke', {opacity: 0}) // transparent stroke to fix color bleeding upon opacity change
            )
          )
        )
      }

      if (o.shadow)
        for (i = 1; i <= o.lines; i++)
          seg(i, -2, 'progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)')

      for (i = 1; i <= o.lines; i++) seg(i)
      return ins(el, g)
    }

    Spinner.prototype.opacity = function(el, i, val, o) {
      var c = el.firstChild
      o = o.shadow && o.lines || 0
      if (c && i+o < c.childNodes.length) {
        c = c.childNodes[i+o]; c = c && c.firstChild; c = c && c.firstChild
        if (c) c.opacity = val
      }
    }
  }

  var probe = css(createEl('group'), {behavior: 'url(#default#VML)'})

  if (!vendor(probe, 'transform') && probe.adj) initVML()
  else useCssAnimations = vendor(probe, 'animation')

  return Spinner

}));
define('module/Template',['require','module/Util'],function(require){
    var Util = require("module/Util");

    var Template = function(html, data){
        this.html = html || "";
        this.data = data || {};

        this._compiled = Util.template(this.html);
    };

    Template.prototype.addObject = function(object){
        Util.extend(this.data, object);
        return this;
    };

    Template.prototype.render = function(){
        return this._compiled(this.data);
    };

    return Template;
});

define('module/forms/VirtualAccountPaymentForm',['require','shim/ObjectCreate','module/forms/PaymentForm','module/Parameter'],function(require){
	var ObjectCreate = require('shim/ObjectCreate');
	var PaymentForm = require('module/forms/PaymentForm');
	var Parameter = require('module/Parameter');
	
	var VirtualAccountPaymentForm = function($form){
		PaymentForm.call(this, $form);
	};
	
	// extend Form
	VirtualAccountPaymentForm.prototype = ObjectCreate(PaymentForm.prototype);
	VirtualAccountPaymentForm.prototype.constructor = VirtualAccountPaymentForm;
	
	VirtualAccountPaymentForm.prototype.getHolder = function(){
		return this.getHolderElement().val();
	};
	
	VirtualAccountPaymentForm.prototype.getHolderElement = function(){
		return this.getElement(Parameter.VIRTUALACCOUNT_HOLDER);
	};

	VirtualAccountPaymentForm.prototype.isGtcChecked = function(){
		return this.getGtcElement().is(":checked");
	};

	VirtualAccountPaymentForm.prototype.getGtcElement = function(){
		return this.getElement("generalTermsAndConditions");
	};

	VirtualAccountPaymentForm.prototype.isAcceptChecked = function(){
		return this.getAcceptElement().is(":checked");
	};

	VirtualAccountPaymentForm.prototype.getAcceptElement = function(){
		return this.getElement("accept");
	};

	return VirtualAccountPaymentForm;
});
define('module/Validate',['require','jquery','module/forms/CardPaymentForm','module/forms/BankAccountPaymentForm','module/Parameter','module/PaymentView','module/Setting','module/Util','module/forms/VirtualAccountPaymentForm','module/Options'],function(require){
	var $ = require('jquery');
	var CardPaymentForm = require('module/forms/CardPaymentForm');
	var BankAccountPaymentForm = require('module/forms/BankAccountPaymentForm');
	var Parameter = require('module/Parameter');
	var PaymentView = require('module/PaymentView');
	var Setting = require('module/Setting');
	var Util = require('module/Util');
	var VirtualAccountPaymentForm = require('module/forms/VirtualAccountPaymentForm');
	var Options = require('module/Options');

	var Validate = {};

	/**
	 * card validation
	 */
	Validate.validateCardPaymentForm = function(form) {
		var $form = $(form);
		var paymentForm = new CardPaymentForm($form);

		var $accountNumber = paymentForm.getNumberElement();
		var $accountBrand = paymentForm.getBrandElement();
		var $accountHolder = paymentForm.getHolderElement();
	    var $idDocId = paymentForm.getIdentificationDocIdElement();
        var $idDocType = paymentForm.getIdentificationDocTypeElement();

		var l = Validate.validateCardPaymentElement( $accountHolder );
		var m = Validate.validateCardPaymentElement( $accountNumber, $accountBrand );
		var o2 = Validate.validateCardPaymentElement( $idDocId, $idDocType );

		var validationErrors;

		var $accountExpiryMonth;
		var $accountExpiryYear;

		if (Options.enableSAQACompliance) {
			validationErrors = Util.extend({}, l, m, o2);
		} else {
			$accountExpiryMonth = paymentForm.getExpiryMonthElement();
			$accountExpiryYear = paymentForm.getExpiryYearElement();
			var o = Validate.validateCardPaymentElement( $accountExpiryMonth, $accountExpiryYear, $accountBrand );
			validationErrors = Util.extend({}, l, m, o, o2);
		}

		if (paymentForm.getBrand() === "UNIONPAY_SMS") {
            if ((paymentForm.getMobileNumberElement().val() === "") || (!(/^\d+$/.test(paymentForm.getMobileNumberElement().val())))) {
                validationErrors = Util.extend(validationErrors, { mobileError: paymentForm.getMobileNumberElement()});
            }

            if ((paymentForm.getMobileCountryCodeElement().val() === "") || (!(/^\d+$/.test(paymentForm.getMobileCountryCodeElement().val())))) {
                validationErrors = Util.extend(validationErrors, { mobileContryCodeError: paymentForm.getMobileCountryCodeElement()});
            }
		}

		validationErrors = Util.extend(validationErrors, Validate.validateBirthDate(paymentForm));

		var $accountVerification;
		var $surName;
		var $givenName;

		
		if (Options.requireCvv) {
			$accountVerification = paymentForm.getCvvElement();
			var n = Validate.validateCardPaymentElement( $accountVerification, $accountBrand );
			
			validationErrors = Util.extend( validationErrors, n);
		}
		
		if( !Options.enableSAQACompliance && Options.forceCardHolderEqualsBillingName ){
			$surName = paymentForm.getSurNameElement();
			$givenName = paymentForm.getGivenNameElement();
			
			var p = Validate.validateCardPaymentElement( $surName );
			var q = Validate.validateCardPaymentElement( $givenName );
			
			validationErrors = Util.extend( validationErrors, p, q);
		}
		
		if( Options.billingAddress !== undefined ){
			validationErrors = Validate.validateBillingParameters(paymentForm, validationErrors);
		}

		if( Util.isEmpty( validationErrors ) ){
			// trim values

			if (Options.requireCvv) {
				$accountVerification.val( Util.trimAll( paymentForm.getCvv() ) );
			}
			$accountNumber.val( Util.trimAll( paymentForm.getNumber() ) );
			$accountBrand.val( Util.trimAll( paymentForm.getBrand() ) );
			if (!Options.enableSAQACompliance) {
				$accountExpiryMonth.val( Util.trimAll( paymentForm.getExpiryMonth() ) );
				$accountExpiryYear.val( Util.trimAll( paymentForm.getExpiryYear() ) );
			}
			$accountHolder.val( Util.trim( paymentForm.getHolder() ) );

			if( !Options.enableSAQACompliance && Options.forceCardHolderEqualsBillingName ){
				$surName.val( Util.trim( paymentForm.getSurName() ) );
				$givenName.val( Util.trim( paymentForm.getGivenName() ) );
			}

		}

		return validationErrors;
	};

	Validate.validateBirthDate = function(paymentForm) {

		if( !Validate.usesBirthDate(paymentForm) ) {
			return;
		}

		var birthDateElement = paymentForm.getVisibleBirthDateElement();

		var ddmmyyyy = birthDateElement.val(); 

		var birthDate = Util.parseDate(ddmmyyyy);

		if (birthDate===null || birthDate.year<1900) {
			return { birthDateError: birthDateElement};
		}

		// validation successful; populate the parameter that will be sent to opp
		Validate.populateOppBirthDateField(birthDate, paymentForm);
	};

	Validate.usesBirthDate = function(paymentForm) {
		return Setting.subTypeLabelMap[paymentForm.getBrand()].birthDate;
	};

	Validate.populateOppBirthDateField = function(birthDate, paymentForm){
		var oppBirthDateElement = paymentForm.getOppBirthDateElement();   
		oppBirthDateElement.val(birthDate.year + '-' + birthDate.month + '-' + birthDate.day);
	};
		
	Validate.validateCardPaymentElement = function( f, t, b ) {
		if( $(f).attr("disabled") !== undefined ) {
			return;
		}
		var fieldName = $(f).attr("name");
		var fieldValue = $(f).val();

		if( fieldName === Parameter.CARD_HOLDER && !Validate.validateAccountHolder( fieldValue)) {
			return { cardHolderError: f};
		}
		if( fieldName === Parameter.SUR_NAME && !Validate.validateBillingName( fieldValue)) {
			return { surNameError: f};
		}
		if( fieldName === Parameter.GIVEN_NAME && !Validate.validateBillingName( fieldValue)) {
			return { givenNameError: f};
		}
		//Billing data
		if( fieldName === Parameter.BILLING_COUNTRY &&
			(Options.mandatoryBillingFields.country === true || fieldValue.trim() !== '') &&
			!Validate.validateName(fieldValue)) {
			    return { billingCountryError: f};
		}
		if( fieldName === Parameter.BILLING_STATE &&
			(Options.mandatoryBillingFields.state === true || fieldValue.trim() !== '') &&
			!Validate.validateName(fieldValue, 1)) {
			    return { billingStateError: f};
		}
		if( fieldName === Parameter.BILLING_CITY &&
			(Options.mandatoryBillingFields.city === true || fieldValue.trim() !== '') &&
			!Validate.validateName(fieldValue, 1)) {
			    return { billingCityError: f};
		}
		if( fieldName === Parameter.BILLING_STREET1 &&
			(Options.mandatoryBillingFields.street1 === true || fieldValue.trim() !== '') &&
			!Validate.validateName(fieldValue)) {
			    return { billingStreetError: f};
		}
		if( fieldName === Parameter.BILLING_STREET2 &&
			(Options.mandatoryBillingFields.street2 === true || fieldValue.trim() !== '') &&
			!Validate.validateName(fieldValue)) {
                return { billingStreetError2: f};
        }

		var $country = $(f).closest("form").find("select[name='billing.country']");

		if( fieldName === Parameter.BILLING_POST_CODE &&
			$country.val() === "CA" &&
			(Options.mandatoryBillingFields.postcode === true || fieldValue.trim() !== '') &&
			!Validate.validateCAPostCode( fieldValue)) {
			    return { billingPostCodeError: f};
		}
		if( fieldName === Parameter.BILLING_POST_CODE &&
			$country.val() === "US" &&
			(Options.mandatoryBillingFields.postcode === true || fieldValue.trim() !== '') &&
			!Validate.validateUSPostCode( fieldValue)) {
			return { billingPostCodeError: f};
		}
		if( fieldName === Parameter.BILLING_POST_CODE &&
			(Options.mandatoryBillingFields.postcode === true || fieldValue.trim() !== '') &&
			!Validate.validatePostCode(fieldValue)) {
			return { billingPostCodeError: f};
		}

	    if( fieldName === Parameter.ID_DOC_ID &&
	    	$(t).attr("name") === Parameter.ID_DOC_TYPE &&
	    	$(t).val() === "TAXSTATEMENT" &&
	    	!Validate.validateTaxNumber( fieldValue))
	    {
	        return { taxNumberError: f};
	    }

		// when pci compliance is used, f is an iframe
		if( $(f).is("input") && fieldName === Parameter.CARD_NUMBER && !Validate.validateCardNumber( fieldValue, $(t).val())) {
			return { cardNumberError: f};
		}
		if( $(f).is("input") && fieldName === Parameter.CARD_CVV && !Validate.validateCVC( fieldValue, $(t).val())) {
			return { cvvError: f};
		}
		if( fieldName === Parameter.CARD_EXPIRY_MONTH && !Validate.validateExpiry( fieldValue, $(t).val(), $(b).val())) {
			return $.extend({ expiryMonthError: f}, { expiryYearError: t});
		}
	};

	Validate.validateCardNumber = function(num, brand) {
		num = Util.stripRawCardNumber(num);

		if("binlist" === Options.brandDetectionType){
			return Validate.validateUsingLuhn(num, brand);
		} else {
			return Validate.validateUsingRegExpAndLuhn(num, brand);
		}
	};

	Validate.validateUsingLuhn = function(num, brand) {
		var useLuhn = Validate.useLuhn(brand);
		return !useLuhn || Validate.luhnCheck(num);
	};

	Validate.validateUsingRegExpAndLuhn = function(num, brand) {
		var luhnResult = Validate.validateUsingLuhn(num, brand);
		var numRule = (Setting.cardValidation[brand] !== undefined && Setting.cardValidation[brand].number !== undefined) ?
						Setting.cardValidation[brand].number :
						/^\d{10,19}$/;

		var numberResult = new RegExp(numRule).test(num);
    	return numberResult && luhnResult;
	};

	Validate.useLuhn = function(brand) {
		return (Setting.cardValidation[brand] !== undefined) ?
				!!Setting.cardValidation[brand].luhn :
				true;
	};


	Validate.validateCVC = function(cvc, brand) {
	    cvc = Util.parseEasternNumber(cvc);
		var brandSettings = Setting.subTypeLabelMap[brand];
		if (brandSettings && brandSettings.noCvv) {
			return true;
		}

        var hasCvcValueForValidation = !Util.isNullOrUndefined(cvc) && Util.trimAll(cvc).length>0;
		var brandSpecificValidation = Setting.cardValidation[brand];
		if (!hasCvcValueForValidation && brandSpecificValidation && brandSpecificValidation.optionalCvv) {
			return true;
		}

		var cvvLength = brandSpecificValidation && brandSpecificValidation.cvvLength ?
			brandSpecificValidation.cvvLength : 3;
		return cvc = Util.trimAll(cvc), /^\d+$/.test(cvc) && cvc.length === cvvLength;
	};

	Validate.mandatoryExpiryDate = function(brand) {
	    var brandSpecificValidation = Setting.cardValidation[brand];


	    return brandSpecificValidation && brandSpecificValidation.expiryDate !== undefined ?
	    	brandSpecificValidation.expiryDate : true;
    };

	Validate.validateExpiry = function(t, n, b) {
		var r, i;

        if(Options.disableCardExpiryDateValidation === true) {
            return true;
        }
		if(!t && !n && !Validate.mandatoryExpiryDate(b)) {
		    return true;
		}
		return t = Util.trim(t), n = Util.trim(n), /^\d+$/.test(t) ? /^\d+$/.test(n) ? parseInt(t, 10) > 0 ? parseInt(t, 10) <= 12 ? (i = new Date(n, t), r = new Date(), i.setMonth(i.getMonth() - 1), i.setMonth(i.getMonth() + 1, 1), i > r) : !1 : !1 : !1 : !1;
	};

	Validate.luhnCheck = function(number) {
		var digit, digits, odd, sum, _i, _len;
        odd = true;
        sum = 0;
        digits = (number + '').split('').reverse();
        for (_i = 0, _len = digits.length; _i < _len; _i++) {
            digit = digits[_i];
            digit = parseInt(digit, 10);
            if ((odd = !odd)) {
                digit *= 2;
            }
            if (digit > 9) {
                digit -= 9;
            }
            sum += digit;
        }
        return sum % 10 === 0;
	};

	/**
	 * bank account / direct debit validation
	 */
	Validate.validateDirectDebitPaymentForm = function(form) {
		var $form = $(form);

		PaymentView.updateBankAccountInputs(form);

		var paymentForm = new BankAccountPaymentForm($form);

		var l = [], m = [], n = [], sepa =[];
		var $holder = paymentForm.getHolderElement();
		var $ibanOrAccountNumber = paymentForm.getIbanOrAccountNumberElement();
		var $bicOrBankCode = paymentForm.getBicOrBankCodeElement();
        var $idDocId = paymentForm.getIdentificationDocIdElement();
        var $idDocType = paymentForm.getIdentificationDocTypeElement();

		l = Validate.validateDirectDebitPaymentElement($holder);
		m = Validate.validateDirectDebitPaymentElement($ibanOrAccountNumber);

		// BIC is no longer necessary when IBAN is provided.
		if (!isValidIban($ibanOrAccountNumber))
		{
			n = Validate.validateDirectDebitPaymentElement($bicOrBankCode);
		}

		var n2 = Validate.validateDirectDebitPaymentElement($idDocId, false, $idDocType);
		
		// For SEPA check that the user agreed to pay
		var $mandateConfirmation = paymentForm.getMandateConfirmationCheckbox();
		sepa = Validate.validateDirectDebitPaymentCheckbox($mandateConfirmation);

		var validationErrors = Util.extend({}, l, m, n, n2, sepa);

		if (Options.billingAddress !== undefined) {
          	validationErrors = Validate.validateBillingParameters(paymentForm,validationErrors);
        }

		if( Util.isEmpty( validationErrors ) ) {
			// trim values
			$holder.val( Util.trim(paymentForm.getHolder() ) );
			$ibanOrAccountNumber.val( Util.trimAll( paymentForm.getIbanOrAccountNumber() ).toUpperCase() );
			$bicOrBankCode.val( Util.trimAll( paymentForm.getBicOrBankCode() ).toUpperCase() );
		}

		return validationErrors;
	};

	// To check if it is IBAN and Sepa enabled and correct IBAN
	function isValidIban(input)
	{
		return Validate.validateIban( $(input).val() );
	}

	function getBankAccountFormFromInput(input)
	{
		var $form = $(input).closest("form");
        return new BankAccountPaymentForm($form);
	}

	Validate.validateDirectDebitPaymentElement = function(input, allowEmptyValue, hiddenInput) {
		var $input = $(input);
		var value = $input.val();

		// REVIEW #13194 COPYandPAY Giropay - Make fields optional but validate combinations
		if (allowEmptyValue && Util.isEmpty(value)) {
			return;
		}

		var name = $input.attr("name");
		var paymentForm = getBankAccountFormFromInput(input);

		// holder
		if( name === Parameter.BANKACCOUNT_HOLDER ) {
		    if (paymentForm.isSepaForm()){
		        if (!Validate.validateAccountHolderSepa( value )){
		            return{ accountHolderError : input};
		        }
		    }
			else if (!Validate.validateAccountHolder( value )){
				return { accountHolderError: input};
			}
		}

		// iban or number
		if( name === Parameter.BANKACCOUNT_IBAN || name === Parameter.BANKACCOUNT_NUMBER ) {
			if ( paymentForm.isSimplifiedForm() ) {
				if ( !Validate.validateIban( value ) ) {
					return { accountIbanError: input };
				}
			}
			else {
				if (!Validate.validateAccountNumberOrIban( value ) ) {
					return { accountNumberIbanError: input };
				}
			}
		}

		// bic or bank code
		if( name === Parameter.BANKACCOUNT_BIC || name === Parameter.BANKACCOUNT_BANKCODE ){
			if ( paymentForm.isSimplifiedForm() ) {
				if ( !Validate.validateBic( value ) ) {
					return { accountBicError: input };
				}
			}
			else {
				if (!Validate.validateAccountBankOrBic( value ) ) {
					return { accountBankBicError: input };
				}
			}
		}

		// tax number
		if (name === Parameter.ID_DOC_ID &&
			$(hiddenInput).attr("name") === Parameter.ID_DOC_TYPE &&
			$(hiddenInput).val() === "TAXSTATEMENT" &&
			!Validate.validateTaxNumber(value))
		{
            return { taxNumberError: input };
		}
	};

	Validate.validateDirectDebitPaymentCheckbox = function($checkbox) {
        var isChecked = $checkbox.is(":checked");

        if (!isChecked) {
            if ($checkbox.hasClass('wpwl-checkbox-mandateConfirmation')) {
				return { 'mandateConfirmationError': $checkbox };
            }
        }
    };

	Validate.validateAccountHolder = function(t) {
		return t = (t + ""), (Util.trim(t).length > 2 || Util.trim(t).length === 0) && !Validate.validateCVVSize(t) && !Validate.validateAccountNumberSize(t);
	};

	Validate.validateAccountHolderSepa = function(t) {
	    if (t === undefined || t === null){
    	    return false;
    	}
    	return t = (t + ""), Util.trim(t).length > 2 && !Validate.validateCVVSize(t) && !Validate.validateAccountNumberSize(t);
    };

	Validate.validateCVVSize = function(t) {
		return t = (t + "").replace(/\s+|-/g, ""), /^\d{3,4}$/.test(t);
	};

	Validate.validateAccountNumberSize = function(t) {
    	return t = (t + "").replace(/\s+|-/g, ""), /\d{10,}/.test(t);
    };

	Validate.validateName = function(t, minLength) {
		if (typeof minLength === "undefined" || minLength === null) minLength = 2;
		return t = (t + ""), Util.trim(t).length >= minLength;
	};

	Validate.validateBillingName = function(t) {
		return t = (t + ""), Util.trim(t).length >= 1 && /^([^0-9])*$/.test(t) ;
	};

	Validate.validateAccountNumberOrIban = function(val) {
		return ( Validate.validateAccountNumber(val) || Validate.validateIban(val) );
	};

	Validate.validateAccountNumber = function(t) {
		return t = (t + "").replace(/\s+|-/g, ""), /^\d+$/.test(t) && t.length >= 3 && t.length <= 11;
	};

	Validate.validatePostCode = function(t) {
		return t = (t + ""), Util.trim(t).length >= 2;
	};

	Validate.validateCAPostCode = function(t) {
		return t = (t + "").replace(/\s+|-/g, ""), /^(?:[a-zA-Z]\d){3}$/.test(t);
	};

	Validate.validateUSPostCode = function(t) {
		return t = (t + "").replace(/\s+|-/g, ""), /^[0-9]*$/.test(t) && t.length >= 2;
	};

	Validate.validateIban = function(iban) {
		if (iban === undefined || iban === null)
			return false;

		iban = iban.replace(/ /g,'').toUpperCase(); // remove spaces and to upper case

		// general pattern test
		if (!(/^([A-Z0-9]{4} ){2,8}[A-Z0-9]{1,4}|[A-Z0-9]{12,34}$/.test(iban)))
			return false;

		// check checksum, first convert to digits
		var ibancheck = iban.substring(4,iban.length) + iban.substring(0,4);
		var ibancheckdigits = "";
		var leadingZeroes = true;
		var charAt;
		for (var i =0; i<ibancheck.length; i++) {
			charAt = ibancheck.charAt(i);
			if (charAt !== "0") {
				leadingZeroes = false;
			}
			if (!leadingZeroes) {
				ibancheckdigits += "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".indexOf(charAt);
			}
		}

		// calculate the result of: ibancheckdigits % 97
		var cRest = '';
		var cOperator = '';
		for (var p=0; p<ibancheckdigits.length; p++) {
			var cChar = ibancheckdigits.charAt(p);
			cOperator = '' + cRest + '' + cChar;
			cRest = cOperator % 97;
		}
		return cRest === 1;
	};

	Validate.validateAccountBankOrBic = function(val) {
		return ( Validate.validateAccountBank(val) || Validate.validateBic(val) );
	};

	Validate.validateAccountBank = function(t) {
		// SEPA BIC has 8 digits while US Routing Number is 9 digits long
		return t = (t + "").replace(/\s+|-/g, ""), /^\d{8,9}$/.test(t);
	};

	Validate.validateBic = function(bic) {
		if (bic === undefined || bic === null)
			return false;

		bic = bic.replace(/ /g,'').toUpperCase(); // remove spaces and to upper case

		return /^[A-Z]{6}[A-Z0-9]{2}(?:X{3}|[A-WY-Z0-9][A-Z0-9]{2})?$/.test(bic);
	};

    Validate.validateTaxNumber = function(t) {
        function calcChecksumDigit(digits, n, factor) {
            var sum = 0;
            for (var i = 0; i < n; ++i) {
                sum += digits[i] * (factor - i);
            }
            var res = sum * 10 % 11 % 10;
            return res;
        }

        var value = ("" + t).replace(/[-.]/g, "");

        // Must contain only digits.
        if (!/^\d{11}$/.test(value)) {
            return false;
        }

        // Numbers like 000.000.000-00 ... 999.999.999-99 are considered invalid.
        for (var digit = 0; digit <= 9; ++digit) {
            var pattern = digit + "{" + value.length + "}"; // e. g. 5{11}
            if (new RegExp(pattern).test(value)) {
                return false;
            }
        }

        // Converts string to digits.
        var digits = Array(value.length);
        for (var i = 0; i < value.length; ++i) {
            digits[i] = parseInt(value.charAt(i));
        }

        // Calculate checksums.
        var cs1 = calcChecksumDigit(digits, 9, 10);
        var cs2 = calcChecksumDigit(digits, 10, 11);

        var valid = ((digits[9] === cs1) && (digits[10] === cs2));
        return valid;
    };

	/**
	 * online transfer validation
	 */
	// Review #13110 2014-01-20 STAGE // COPYandPAY Giropay // SEPA ready
	Validate.validateOnlineTransferForm = function( form ){
		var $form = $(form);

		var paymentForm = new BankAccountPaymentForm($form);
		var brand = paymentForm.getBrand();

		// by now, validation is done only for giropay inputs, e.g. iban/number or bic/bankCode
		if (!/GIROPAY/.test(brand)) {
			return;
		}

		PaymentView.updateBankAccountInputs(form);

		// check if form has at least one field to validate
		var $accountNumberIbanInput = paymentForm.getIbanOrAccountNumberElement();
		var $accountBankBicInput = paymentForm.getBicOrBankCodeElement();
        var $idDocIdInput = paymentForm.getIdentificationDocIdElement();
        var $idDocTypeInput = paymentForm.getIdentificationDocTypeElement();

		// validate inputs and collect validation errors
		var allowEmptyValue = true;
		var accountNumberIbanValidationErrors;

		//for Giropay method, we validate the IBAN only if Option.displayIban is set to true
		if (/^GIROPAY$/.test(brand) && Options.displayIban === true) {
			accountNumberIbanValidationErrors =
					Validate.validateDirectDebitPaymentElement($accountNumberIbanInput, allowEmptyValue);
		}

		var accountBankBicValidationErrors =
		    Validate.validateDirectDebitPaymentElement($accountBankBicInput, allowEmptyValue);

        var taxNumberValidationErrors =
            Validate.validateDirectDebitPaymentElement($idDocIdInput, allowEmptyValue, $idDocTypeInput);

		var validationErrors = $.extend(
		        accountNumberIbanValidationErrors,
		        accountBankBicValidationErrors,
				taxNumberValidationErrors);

		if( Options.billingAddress !== undefined ){
			validationErrors = Validate.validateBillingParameters(paymentForm, validationErrors);
		}

		// manipulations
		if( $.isEmptyObject( validationErrors ) ){
			var accountNumberIban = paymentForm.getIbanOrAccountNumber();
			var accountBankBic = paymentForm.getBicOrBankCode();
			// trim values
			$accountNumberIbanInput.val( Util.trimAll( accountNumberIban ).toUpperCase() );
			$accountBankBicInput.val( Util.trimAll( accountBankBic ).toUpperCase() );
		}

		return validationErrors;
	};

	/**
	 * virtual account validation
	 */
	Validate.validateVirtualAccountForm = function(form){

		var $form = $(form);
		var paymentForm = new VirtualAccountPaymentForm($form);

		var validationErrors = {};

		var brand = paymentForm.getBrand();

		if( Options.billingAddress !== undefined ){
			validationErrors = Validate.validateBillingParameters(paymentForm, validationErrors);
		}

		if (brand === "MBWAY") {
            // at this point we should take care of account ID in case we have MB WAY:
            // if the shopper enters both email and cell phone number, we need to send only one as
            // virtualAccountId
            validationErrors = Validate.validateMbwayForm(paymentForm);
		}
		else if (brand && brand.substring(0, 8) === "IKANOOI_") {
            validationErrors = Validate.validateIkanoOiForm(paymentForm);
		}
		else if (brand === "IK_PRIVATE_LABEL_VA") {
		    validationErrors = Validate.validateGiftCardForm(paymentForm);
		}
		else if (brand === "STC_PAY") {
			validationErrors = Validate.validateStcPayForm(paymentForm);
		}
		else {
            var cardHolderError, gtcError;

            var $cardHolder = paymentForm.getHolderElement();
            if ( $cardHolder.length && !Validate.validateAccountHolder(paymentForm.getHolder()) ){
                cardHolderError = { cardHolderError: $cardHolder};
            }

            var $gtc = paymentForm.getGtcElement();
            if ( $gtc.length && !paymentForm.isGtcChecked() ) {
                gtcError = { generalTermsAndConditionsError : $gtc };
            }

            validationErrors = Util.extend({}, cardHolderError, gtcError);

            // trim values
            if( Util.isEmpty( validationErrors ) ){
                $cardHolder.val( Util.trim( paymentForm.getHolder() ) );
            }
		}

		return validationErrors;
	};

	Validate.validatePrepaymentForm = function() {
		return {};
	};

	Validate.validateMbwayForm = function(paymentForm) {
        var validationErrors = {};
        var $email = paymentForm.getElementByCssClass("wpwl-control-customerEmail");
        var email = $email.val();
        var $mobilePhoneNumber = paymentForm.getElementByCssClass("wpwl-control-mobilePhone");
        var mobilePhoneNumber = $mobilePhoneNumber.val();

        if (Util.isBlank(email) && Util.isBlank(mobilePhoneNumber)) {
            validationErrors = Util.extend(validationErrors, {mbwayEmailOrPhoneMandatory: $email.add($mobilePhoneNumber)});
        } else {
            if (!Util.isBlank(email)) {
                // email has higher prio than phone number
                $mobilePhoneNumber.remove();
            } else {
                // email is empty, so we are sending Mobile phone number
                $email.remove();
            }
        }
        return validationErrors;
	};

	Validate.validateIkanoOiForm = function(paymentForm) {

        /*
        A Finnish national identification number is defined by DDMMYYCZZZQ, where DDMMYY is
        the date of birth, C the century sign, ZZZ the individual number and Q the control
        character. The control character is calculated as follows:
            Qtemp=DDMMYYZZZ mod 31
            Q=index[Qtemp] in string "0123456789ABCDEFHJKLMNPRSTUVWXY"
        */
	    function validateFinnishNationalIdentifier(input) {

            var valid = ((input !== "") &&
             (/^\d{6}[+\-A]\d{3}[\dABCDEFHJKLMNPRSTUVWXY]$/.test(input)) &&
             (Util.isValidDate(parseInt(input.substring(0, 2)), parseInt(input.substring(2, 4)), undefined)));

            if(valid === false) {
                return false;
            }

            var controlString = input.substring(0,6) + input.substring(7,10); //DDMMYYZZZ
            var remainder = controlString % 31;

            var controlChar = "0123456789ABCDEFHJKLMNPRSTUVWXY"[remainder];

            return input[10] === controlChar;
	    }

	    /*
	    A Swedish national identification number is defined by YYYYMMDDZZZC, where YYYYMMDD is the date of birth, ZZZ is
	    the individual number and C is the checksum. First 2 digits are ommited when calculating the checksum, the next
	    9 digits are individually multiplied with corresponding digit from 212121212. Each product greater than 9 will
	    have 9 subtracted from it. The checksum is the last digit of 10 - the last digit of the sum of these products.
	    */

	    function validateSwedishNationalIdentifier(input) {

            var valid = input !== "" &&
                        parseInt(input.substring(0, 2))>=19 &&
                        /^\d{12}$/.test(input) &&
                        Util.isValidDate(
                            parseInt(input.substring(6, 8)),
                            parseInt(input.substring(4, 6)),
                            parseInt(input.substring(0, 4))
                        );

            if(valid === false) {
                return false;
            }

            var sum=0;
            var product=0;
            var digits = input.split("").map(Number);

            for(var i=2,j=2; i<11; i++) {
                product = digits[i]*(j++%2||2);
                sum += product<10 ? product:product-9;
            }

            return digits[11] === (10-sum%10)%10;
	    }

        /*
        A Norwegian national identification number is defined by DDMMYYZZZKK, where DDMMYY
        is the date of birth, ZZZ is the individual number and KK are two control digits.
        If the 9 first digits of the national identification number are d1 d2 m1 m2 y1 y2 z1 z2 z3,
        the control digits k1 and k2 are calculated as follows:
        k1 = 11 - ((3 × d1 + 7 × d2 + 6 × m1 + 1 × m2 + 8 × y1 + 9 × y2 + 4 × z1 + 5 × z2 + 2 × z3) mod 11).
        If k1==11, then k1=0
        k2 = 11 - ((5 × d1 + 4 × d2 + 3 × m1 + 2 × m2 + 7 × y1 + 6 × y2 + 5 × z1 + 4 × z2 + 3 × z3 + 2 × k1) mod 11)
        If k2==11, then k2=0
        If k1 or k2 is outside the range of [0..9], the national identification number is invalid
        */
	    function validateNorwegianNationalIdentifier(input) {

            var valid = (input !== "") &&
                (/^\d{11}$/.test(input)) &&
                Util.isValidDate(parseInt(input.substring(0, 2)), parseInt(input.substring(2, 4)), undefined);

            if(valid === false) {
                return false;
            }

            var staticnumbers1 = [3, 7, 6, 1, 8, 9, 4, 5, 2];
            var staticnumbers2 = [5, 4, 3, 2, 7, 6, 5, 4, 3, 2];
            var digits = input.split('').map(Number);

            var k1=0;
            for(var i=0; i<=8; i++){
                k1 += staticnumbers1[i]*digits[i];
            }

            k1 = k1 % 11;
            if(k1 !== 0) {
                k1 = 11 - k1;
            }

            var k2 = 0;
            for(i = 0; i <= 8; i++){
                k2 += staticnumbers2[i]*digits[i];
            }
            k2 += staticnumbers2[i]*k1;

            k2 = k2 % 11;
            if(k2 !== 0) {
                k2 = 11 - k2;
            }

            return (k1 === digits[9]) && (k2 === digits[10]);
	    }

        var validationErrors = {};
        var element;
        if (paymentForm.getBrand() === "IKANOOI_FI") {
            element =  paymentForm.getIdentificationDocIdElement();
            if (!validateFinnishNationalIdentifier(element.val())) {
                validationErrors = Util.extend(validationErrors, { nationalIdentifierError: element});
            }
            element = paymentForm.getAcceptElement();
            if ( element.length && !paymentForm.isAcceptChecked() ) {
                validationErrors = Util.extend(validationErrors, { ikanoOpenInvoiceAcceptError : element });
            }

        }
        else if (paymentForm.getBrand() === "IKANOOI_NO") {
            element =  paymentForm.getIdentificationDocIdElement();
            if (!validateNorwegianNationalIdentifier(element.val())) {
                validationErrors = Util.extend(validationErrors, { nationalIdentifierError: element});
            }
            element = paymentForm.getAcceptElement();
            if ( element.length && !paymentForm.isAcceptChecked() ) {
                validationErrors = Util.extend(validationErrors, { ikanoOpenInvoiceAcceptError : element });
            }

        }
        else if (paymentForm.getBrand() === "IKANOOI_SE") {
            element =  paymentForm.getIdentificationDocIdElement();
            if (!validateSwedishNationalIdentifier(element.val())) {
                validationErrors = Util.extend(validationErrors, { nationalIdentifierError: element});
            }

            element = paymentForm.getAcceptElement();
            if ( element.length && !paymentForm.isAcceptChecked() ) {
                validationErrors = Util.extend(validationErrors, { ikanoOpenInvoiceAcceptError : element });
            }
        }
        return validationErrors;
	};

	Validate.validateBillingParameters = function(paymentForm, validationErrors) {
		var $country = paymentForm.getBillingCountryElement(); 
		var $state = paymentForm.getStateElement();
		var $city = paymentForm.getCityElement();
		var $street1 = paymentForm.getStreet1Element();
		var $street2 = paymentForm.getStreet2Element();
		var $postCode = paymentForm.getPostCodeElement();

		var r = Validate.validateCardPaymentElement($country);
		var s = Validate.validateCardPaymentElement($state);
		var t = Validate.validateCardPaymentElement($city);
		var u = Validate.validateCardPaymentElement($street1);
		var u2 = Validate.validateCardPaymentElement($street2);
		var v = Validate.validateCardPaymentElement($postCode);

		validationErrors = Util.extend(validationErrors, r, s, t, u, u2, v);

		if (Util.isEmpty(validationErrors)) {
		$country.val(Util.trim(paymentForm.getBillingCountry()));
		$state.val(Util.trim(paymentForm.getState()));
		$city.val(Util.trim(paymentForm.getCity()));
		$street1.val(Util.trim(paymentForm.getStreet1()));
		$postCode.val(Util.trim(paymentForm.getPostCode()));
		}
		
		return validationErrors;
    };

	Validate.validateGiftCardForm = function(paymentForm){
	    var brand = paymentForm.getBrand(paymentForm);
        var cardError = Validate.validateGiftCardElement(
            paymentForm.getElement(Parameter.GIFT_CARD_NUMBER), brand);
        var expiryError = Validate.validateGiftCardElement(
            paymentForm.getElement(Parameter.GIFT_CARD_EXPIRY_DATE), brand);
        return Util.extend({}, cardError, expiryError);
    };

    Validate.validateGiftCardElement = function($field, brand) {
        var fieldName = $field.attr("name");
        var fieldValue = $field.val();

        if (fieldName === Parameter.GIFT_CARD_EXPIRY_DATE &&
            !Validate.validateGiftCardExpiry(fieldValue, brand )) {
            return {expiryMonthError: $field};
        }

        if (fieldName === Parameter.GIFT_CARD_NUMBER &&
            !Validate.validateCardNumber(fieldValue, brand)){
            return {accountNumberError: $field};
        }
    };

    Validate.validateGiftCardExpiry = function(value, brand){
        var splittedMonthYear = PaymentView.splitMonthYear(value);
        var month = splittedMonthYear.month;
        var year = splittedMonthYear.year;

        return Validate.validateExpiry(month, year, brand );
	};
	
	Validate.validateStcPayForm = function(paymentForm){
		var validationErrors = {};
		var $mobileRadio = paymentForm.getElementByCssClass("wpwl-control-radio-mobile")[0];
		var $qrcodeRadio = paymentForm.getElementByCssClass("wpwl-control-radio-qrcode")[0];
        var $mobilePhoneNumber = paymentForm.getElementByCssClass("wpwl-control-mobilePhone");
        var mobilePhoneNumber = $mobilePhoneNumber.val();

		if (!$mobileRadio.checked && !$qrcodeRadio.checked) {
			validationErrors = Util.extend(validationErrors, {noSelectionError: $mobileRadio});
		} else if ($mobileRadio.checked && Util.isBlank(mobilePhoneNumber)) {
            validationErrors = Util.extend(validationErrors, {mobilePhoneError: $mobilePhoneNumber});
        }
        return validationErrors;
    };

	return Validate;
});


define('text!template/oneclickpayment/main.html',[],function () { return '<form class="wpwl-form wpwl-form-registrations wpwl-form-has-inputs wpwl-clearfix" action="<%- obj.registrations[0].endpoint %>" method="POST" target="<%- obj.registrations[0].paymentTarget %>" lang="en" accept-charset="UTF-8" data-action="submit-registration">\n    <% _.forEach(obj.registrations, function(registration, index){ %>\n    <div class="wpwl-group wpwl-group-registration <% if (registration.isCardAndCvvRequired) { %>wpwl-has-cvv<% } %> wpwl-clearfix <% if (index === 0) { %>wpwl-selected<% } %> ">\n        <label class="wpwl-registration">\n            <div class="wpwl-wrapper-registration wpwl-wrapper-registration-registrationId">\n                <input type="radio" name="registrationId" value="<%- registration.id %>" <% if (index === 0) { %>checked="checked"<% } %> data-action="change-registration">\n            </div>\n            <div class="wpwl-wrapper-registration  wpwl-wrapper-registration-brand">\n                <div class="wpwl-brand wpwl-brand-<%- registration.paymentBrand %> wpwl-brand-inline"></div>\n            </div>\n            <div class="wpwl-wrapper-registration  wpwl-wrapper-registration-details">\n                <% if (registration.number) { %>\n                <div class="wpwl-wrapper-registration wpwl-wrapper-registration-number">\n                    <%- registration.number %>\n                </div>\n                <% } %>\n                <% if (registration.expiry) { %>\n                <div class="wpwl-wrapper-registration wpwl-wrapper-registration-expiry">\n                    <%- registration.expiry %>\n                </div>\n                <% } %>\n                <% if (registration.holder) { %>\n                <div class="wpwl-wrapper-registration wpwl-wrapper-registration-holder">\n                    <%- registration.holder %>\n                </div>\n                <% } %>\n                <% if (registration.isHolderRequired && !registration.holder) { %>\n                <div class="wpwl-wrapper-registration wpwl-wrapper-required-registration-holder">\n                </div>\n                <% } %>\n                <% if (registration.displayVirtualAccountId) { %>\n                <div class="wpwl-wrapper-registration wpwl-wrapper-registration-virtualAccountId">\n                    <%- registration.virtualAccount.accountId %>\n                </div>\n                <% } %>\n            </div>\n            <div class="wpwl-wrapper wpwl-wrapper-registration wpwl-wrapper-registration-cvv">\n                <% if (registration.isCardAndCvvRequired && index === 0) { %>\n                <%= obj.iframeTemplate.addObject({registration: registration}).render() %>\n                <% } %>\n            </div>\n            <% if (registration.isBirthDateRequired) { %>\n                <div class="wpwl-wrapper-registration wpwl-wrapper-birthdate">\n                </div>\n            <% } %>\n        </label>\n    </div>\n    <% }) %>\n    <div class="wpwl-group wpwl-group-submit wpwl-clearfix">\n        <div class="wpwl-wrapper wpwl-wrapper-submit">\n            <% if (obj.registrations[0].options.useSummaryPage) { %>\n           <button type="submit" class="wpwl-button wpwl-button-pay" aria-label="<%- obj.registrations[0].lang.nextStep %>"><%- obj.registrations[0].lang.nextStep %></button>\n            <% }\n            else { %>\n           <button type="submit" class="wpwl-button wpwl-button-pay" aria-label="<%- obj.registrations[0].lang.submit %>"><%- obj.registrations[0].lang.submit %></button>\n            <% } %> \n        </div>\n    </div>\n    <input type="hidden" name="paymentBrand" value="<%- obj.registrations[0].paymentBrand %>">\n    <input type="hidden" name="shopperResultUrl" value="<%- obj.registrations[0].options.shopperResultUrl %>">\n    <% if (obj.registrations[0].options.shopperResultTarget) { %>\n    <input type="hidden" name="shopperResultTarget" value="<%- obj.registrations[0].options.shopperResultTarget %>">\n    <% } %>\n    <input type="hidden" name="forceUtf8" value="☠">\n    <% if (obj.shopOrigin) { %>\n    <input type="hidden" name="shopOrigin" value="<%- obj.shopOrigin %>">\n    <% } %>\n</form>\n<iframe name="registrations-target" class="wpwl-target" src="about:blank" frameborder="0"></iframe>\n';});


define('text!template/oneclickpayment/iframe.html',[],function () { return '<iframe class="wpwl-control wpwl-control-iframe wpwl-control-cvv disabled" src="<%- obj.registration.pciIframeSrc %>" name="card.cvv" placeholder="<%= obj.registration.lang.cvv  %>" aria-label="<%= obj.registration.lang.cvv  %>" scrolling="no" frameborder="0"></iframe>\n';});


define('text!template/oneclickpayment/paypalRestFraudNetJs.html',[],function () { return '<script type="application/json" fncls="fnparams-dede7cc5-15fd-4c75-a9f4-36c430ee3a99">\n    {\n        "f": "<%- obj.guid %>",\n        "s": "<%- obj.flowId %>"\n    }\n</script>\n<script type="text/javascript" src="https://c.paypal.com/da/r/fb.js"></script>';});


define('text!template/oneclickpayment/holderIframe.html',[],function () { return '<iframe class="wpwl-control wpwl-control-iframe wpwl-control-cardHolder disabled" src="<%- obj.registration.pciIframeSrc %>" name="card.holder" placeholder="<%= obj.registration.lang.cardHolder  %>" aria-label="<%= obj.registration.lang.cardHolder  %>" scrolling="no" frameborder="0"></iframe>';});

define('module/OneClickPaymentView',['require','jquery','module/OneClickPaymentUtil','module/Options','module/PaymentView','module/AutoFocus','module/ParentToIframeCommunication','module/RegistrationType','lib/Spinner','module/Template','module/Tracking','module/Generate','module/Validate','module/Util','module/I18n','module/DateFormatter','text!template/oneclickpayment/main.html','text!template/oneclickpayment/iframe.html','text!template/oneclickpayment/paypalRestFraudNetJs.html','text!template/oneclickpayment/holderIframe.html'],function(require){
    var $ = require("jquery");
    var OneClickPaymentUtil = require("module/OneClickPaymentUtil");
    var Options = require("module/Options");
    var PaymentView = require('module/PaymentView');
    var AutoFocus = require('module/AutoFocus');
    var ParentToIframeCommunication = require('module/ParentToIframeCommunication');
    var RegistrationType = require("module/RegistrationType");
    var Spinner = require("lib/Spinner");
    var Template = require("module/Template");
    var Tracking = require("module/Tracking");
    var Generate = require("module/Generate");
    var Validate = require("module/Validate");
    var Util = require('module/Util');
    var I18n = require("module/I18n");
    var DateFormatter = require('module/DateFormatter');

    var mainTemplateHtml = require("text!template/oneclickpayment/main.html");
    var iframeTemplateHtml = require("text!template/oneclickpayment/iframe.html");
    var fraudNetJsTemplateHtml = require("text!template/oneclickpayment/paypalRestFraudNetJs.html");
    var holderIframeTemplateHtml = require("text!template/oneclickpayment/holderIframe.html");

    var OneClickPaymentView = function(registrations, merchantInfo){
        this.registrations = registrations;
        this.merchantInfo = merchantInfo || {};

        $(document).on("change.wpwlEvent", OneClickPaymentView.changeSelector, $.proxy(this.onChange, this));
        $(document).on("submit.wpwlEvent", OneClickPaymentView.submitSelector, $.proxy(this.onSubmit, this));
        $(document).on("oneclick:rendered.wpwlEvent", $.proxy(this.initFormatter, this));

        this.brandSpecificHandlers = {
            PAYPAL: {
                onRender: this.onRenderPaypalHandler,
                onSubmit: this.onSubmitPaypalHandler
            }
        };

        this.brandSpecificHandlingMapping = {
            PAYPAL_CONTINUE: 'PAYPAL'
        };
    };

    OneClickPaymentView.changeSelector = "[data-action=\"change-registration\"]";

    OneClickPaymentView.submitSelector = "[data-action=\"submit-registration\"]";

    OneClickPaymentView.prototype.$container = $("<div class=\"wpwl-container wpwl-container-registration wpwl-clearfix\">");

    OneClickPaymentView.prototype.template = new Template(mainTemplateHtml);

    OneClickPaymentView.prototype.iframeTemplate = new Template(iframeTemplateHtml);

    OneClickPaymentView.prototype.holderIframeTemplate = new Template(holderIframeTemplateHtml);

    OneClickPaymentView.prototype.initFormatter = function() {
        new DateFormatter({
            selector: '.wpwl-control-birthDate'
        }).format();
    };

    OneClickPaymentView.prototype.render = function(){
        this.registrations = OneClickPaymentUtil.concatDetailsForView(this.registrations);
        this.template.addObject({registrations: this.registrations});
        // we can include other templates as objects and access them inside this template
        this.template.addObject({iframeTemplate: this.iframeTemplate});
        this.template.addObject({shopOrigin: Util.getOrigin()});
        this.$container.html(this.template.render());

        var firstRegistration = this.registrations[0];
        if(firstRegistration.isCardAndCvvRequired){
            this.prepareCvvPciCompliance();
            var customPlaceholder = I18n.cvvPlaceholder;
            if (!Util.isNullOrUndefined(customPlaceholder)) {
                this.$container.find(".wpwl-control.wpwl-control-iframe.wpwl-control-cvv")
                    .attr("placeholder", customPlaceholder);
            }
        }

        if(firstRegistration.isHolderRequired) {
            this.$container.find(".wpwl-wrapper-required-registration-holder:first").append(this.generateHolderInput(firstRegistration));
            if (Options.enableSAQACompliance) {
                this.prepareHolderPciCompliance();
            }
        }

        if(firstRegistration.isBirthDateRequired) {
            this.$container.find(".wpwl-wrapper-birthdate:first").append(this.generateBirthDateEditBox());
        }

        Util.chain(this.registrations)
            .map(function(registration) { return registration.paymentBrand; })
            .map(this.mapBrandForSpecificHandling.bind(this))
            // Removes duplicates to make sure brand specific handler will be called only once per brand
            .unique()
            .each(function(brand) {
                this.invokeBrandSpecificHandler(brand, function(handler) { return handler.onRender; });
            }.bind(this));

        return this.$container;
    };

    OneClickPaymentView.prototype.generateBirthDateEditBox = function() {

        return  Generate.generateLabel({label: I18n.birthDate, cssClass:"birthDate",
                                     component:"<div/>", name:"labelBirthDate"}) +
                Generate.inputElement({name: "customer.birthDate",
                               type: "text", label: I18n.ddmmyyyy,
                               cssClass: "birthDate"
                               });
    };

    OneClickPaymentView.prototype.generateHolderInput = function(registration) {
        var properties = registration.holderProperties;
        var cardHolderInput;
        if (Options.enableSAQACompliance) {
            this.holderIframeTemplate.addObject({registration: registration});
            cardHolderInput = this.holderIframeTemplate.render();
        } else {
            cardHolderInput = Generate.inputElement({name: properties.inputName,
                type: "text", label: properties.placeHolder,
                cssClass: properties.setup,
                value : properties.value,
                ariaLabel: properties.placeHolder
                });
        }
        return cardHolderInput;
    };

    /* jshint maxparams: 4 */
    OneClickPaymentView.prototype.setUpIframe = function setUpIframe(iframeName, $form, $iframe, setIsValid) {
        var self = this;
        $iframe.on('load', function () {
            self.iframeCommunication = new ParentToIframeCommunication({
                $form: $form,
                $iframe: $iframe
            }, {
                setIsValid: setIsValid
            });
            var spinner = new Spinner(Options.spinner).spin($form.parent().get(0));

            PaymentView.setupPciIframe(self.iframeCommunication)
                .always(function () {
                    spinner.stop();
                    disableInputsAndSubmitButton($form, false);

                    AutoFocus.checkAutoFocus([self.iframeCommunication]);
                })
                .fail(function (reason) {
                    PaymentView.showPleaseTryAgainMessage($form);
                    var info = "prepare" + iframeName + "PciCompliance failed because: " + reason;
                    Tracking.exception(info);
                });

        }
        );

    };

    OneClickPaymentView.prototype.prepareHolderPciCompliance = function () {

        var $form = this.$container.find('form');
        var $cardIframe = $form.find('iframe[name=\"card.holder\"]');
         //set up the card Holder iframe
        this.setUpIframe("Holder", $form, $cardIframe, PaymentView.setCardHolderIsValid);
    };

    OneClickPaymentView.prototype.prepareCvvPciCompliance = function () {

        var $form = this.$container.find('form');
        var $cvvIframe = $form.find('iframe[name=\"card.cvv\"]');
        //set up the card Cvv iframe
        this.setUpIframe("Cvv", $form, $cvvIframe, PaymentView.setCardCvvIsValid);

    };

    OneClickPaymentView.prototype.onChange = function(event){
        var $selected = $(event.target);
        var $form = $selected.closest("form");
        var registration = OneClickPaymentUtil.getRegistrationById(this.registrations, $selected.val());

        // payment brands
        $form.find("[name=\"paymentBrand\"]").val(registration.paymentBrand);

        // select registration
        $form.find(".wpwl-group-registration").removeClass("wpwl-selected");
        $selected.closest(".wpwl-group-registration").addClass("wpwl-selected");
        
        // in case cvv from previous selected registration was invalid restore pay now button state
        $form.find("button[type=\"submit\"]").removeClass("wpwl-button-error");
        PaymentView.disableSubmitButton($form, false);

        // empty wrapper to remove cvv iframe and error message
        $form.find(".wpwl-wrapper-registration-cvv").empty();
        if (registration.isCardAndCvvRequired){
            this.iframeTemplate.addObject({registration: registration});
            $selected.closest(".wpwl-registration").find(".wpwl-wrapper-registration-cvv").append(this.iframeTemplate.render());

            this.prepareCvvPciCompliance();
        }

        // empty wrapper to remove card holder and error message
        $form.find(".wpwl-wrapper-required-registration-holder").empty();
        if (registration.isHolderRequired){
            $selected.closest(".wpwl-registration").find(".wpwl-wrapper-required-registration-holder")
                .append(this.generateHolderInput(registration));
            if (Options.enableSAQACompliance) {
                this.prepareHolderPciCompliance();
            }
        }

        $form.find(".wpwl-wrapper-birthdate").empty();
        if(registration.isBirthDateRequired) {
            $selected.closest(".wpwl-registration").find(".wpwl-wrapper-birthdate")
                .append(this.generateBirthDateEditBox());
        }

        $(document).trigger("oneclick:rendered");
    };

    OneClickPaymentView.prototype.onSubmit = function(event){
        var $selected = $(event.target).find(OneClickPaymentView.changeSelector + ":checked");
        var registration = OneClickPaymentUtil.getRegistrationById(this.registrations, $selected.val());

        if (isValidation(registration)) {
            PaymentView.disableSubmitButton($selected.closest('form'), true);
        }

        var result = true;
        if(registration.isHolderRequired) {
            if (Options.enableSAQACompliance) {
                result = validateCardHolderIframe(this.holderIframeCommunication, result, this.iframeCommunication);
            } else {
                result = validateHolder($selected, registration);
            }
        }

        if(result && registration.isCardAndCvvRequired) {
            result = validateCvv(this.iframeCommunication, result) && result;
        }
        var birthDateValidationOutput;
        if(registration.isBirthDateRequired) {
            birthDateValidationOutput = validateBirthDate($selected);
            result = birthDateValidationOutput.result && result;
        }
 
        // before submitting, change birthdate to expected format
        if(result && registration.isBirthDateRequired) {
            convertBirthDate(birthDateValidationOutput.validDate, $selected);
        }

        this.invokeBrandSpecificHandler(registration.paymentBrand, function(handler) { return handler.onSubmit; });

        return result;
    };

    /**
     * Invokes handler function for specified brand. Ignores missing handler object or missing handler functions.
     */
    OneClickPaymentView.prototype.invokeBrandSpecificHandler = function(brand, handlerFunctionGetter) {
        var mappedBrand = this.mapBrandForSpecificHandling(brand);
        var brandSpecificHandler = this.brandSpecificHandlers[mappedBrand];

        if (!Util.isNullOrUndefined(brandSpecificHandler)) {
            var handlerFunction = handlerFunctionGetter(brandSpecificHandler);

            if (!Util.isNullOrUndefined(handlerFunction)) {
                handlerFunction.call(this);
            }
        }
    };

    /**
     * Remaps brand for invoking brand specific handlers.
     */
    OneClickPaymentView.prototype.mapBrandForSpecificHandling = function(brand) {
        if (!Util.isBlank(this.brandSpecificHandlingMapping[brand])) {
            return this.brandSpecificHandlingMapping[brand];
        }

        return brand;
    };

    /**
     * Renders FraudNet javascript blocks within widget container if checkout object contains particular data.
     */
    OneClickPaymentView.prototype.onRenderPaypalHandler = function() {
        if (!Util.isBlank(this.merchantInfo.websiteId)) {
            this.fraudNetUuid = Util.generateUuid();

            var fraudNetJsTemplateData = {
                guid: this.fraudNetUuid,
                flowId: this.merchantInfo.websiteId
            };

            this.$container.append(new Template(fraudNetJsTemplateHtml, fraudNetJsTemplateData).render());
        }
    };

    /**
     * Adds additional field to widget form, so it will be sent to OPP backend during submit action.
     */
    OneClickPaymentView.prototype.onSubmitPaypalHandler = function() {
        if (!Util.isBlank(this.fraudNetUuid)) {
            var hiddenInput = $('<input/>', {
                type: 'hidden',
                name: 'customer.browser.deviceId',
                value: this.fraudNetUuid
            });

            this.$container.find('form').append(hiddenInput);
        }
    };

    function getBirthDate(selected) {
        var birthDateElement = getBirthDateElement(selected);

        if(birthDateElement === null) {
            return null;
        }

        var ddmmyyyy = birthDateElement.val() + ""; 

        return Util.parseDate(ddmmyyyy);
    }

    function validateBirthDate(selected) {
        var birthDate = getBirthDate(selected);

        if (birthDate === null || birthDate.year < 1900) {
            generateError(selected, { birthDateError: getBirthDateElement(selected) });
            return { result: false };
        }
        
        return { result: true, validDate: birthDate };
    }

    function convertBirthDate(birthDate, selected) {
        getBirthDateElement(selected).val(birthDate.year + '-' + birthDate.month + '-' + birthDate.day);
    }

    function getBirthDateElement(selected) {
        return selected.closest(".wpwl-registration").find(".wpwl-control-birthDate");
    }

    function isValidation(registration) {
        return registration.isCardAndCvvRequired || registration.isHolderRequired || registration.isBirthDateRequired;
    }
    
    function validateHolder(selected, registration) {        
        if (registration.type === RegistrationType.card) {
            return validateCardHolder(selected);
        }
        else {
            return validateBankAccountHolder(selected);
        }
    }

    function validateBankAccountHolder(selected) {
        var holderElement = selected.closest(".wpwl-registration").find(".wpwl-control-accountHolder");    
        var value = holderElement.val() + "";
        if (Util.trim(value).length <= 2)
        {
        	generateError(selected, { accountHolderError : holderElement });
            return false;
        }
        return true;
    }

    function validateCardHolder(selected) {
        var holderElement = selected.closest(".wpwl-registration").find(".wpwl-control-cardHolder");
        var value = holderElement.val() + "";
        if (Util.trim(value).length <= 2 || !Validate.validateAccountHolder( value))
        {
            generateError(selected, { cardHolderError: holderElement });
            return false;
        }
        return true;
    }

    function validateCardHolderIframe(iframeCommunication, prevValidationResult, cvvIframeCommunication){
        var iframePromise = iframeCommunication.validateInput(false);

        iframePromise
        .then(function(isValid) {
            if (isValid && prevValidationResult) {
                submitHolderIframe(iframeCommunication, cvvIframeCommunication, prevValidationResult);
            }
        })
        .fail(function(error, message) {
            var info = "validateCardHolder failed with error: " + error + " and message: " + message;
            PaymentView.showSupportMessage(info, iframeCommunication.$form);
            Tracking.exception(info);
        });
        return false;
    }
    
    function generateError(selected, errors) {
        PaymentView.generateErrorRow(errors);
        PaymentView.triggerFormValidationStatus(selected.closest('form'));    
    }

    function validateCvv(iframeCommunication, prevValidationResult){
        var validateCvvPromise = iframeCommunication.validateInput(false);

        validateCvvPromise
        .then(function(isValidCvv) {
            if (isValidCvv && prevValidationResult) {
                submitCvvIframe(iframeCommunication);
            }
        })
        .fail(function(error, message) {
            var info = "validateCvv failed with error: " + error + " and message: " + message;
            PaymentView.showSupportMessage(info, iframeCommunication.$form);
            Tracking.exception(info);
        });
        return false;
    }

    function submitCvvIframe(iframeCommunication){
        var submitCvvPromise = iframeCommunication.submitFormAndGetToken();

        submitCvvPromise
        .then(function() {
            unbindCardSubmitEventAndSubmitForm(iframeCommunication);
        })
        .fail(function(error, reason) {
            PaymentView.submitPciIframeFailed(error, reason, iframeCommunication.$form);
        });
    }

    function submitHolderIframe(iframeCommunication, cvvIframeCommunication, prevValidationResult){
        var iframePromise = iframeCommunication.submitFormAndGetToken();

        iframePromise
        .then(function() {
            if(cvvIframeCommunication){
                validateCvv(cvvIframeCommunication, prevValidationResult);
            } else {
                unbindCardSubmitEventAndSubmitForm(iframeCommunication);
            }
        })
        .fail(function(error, reason) {
            PaymentView.submitPciIframeFailed(error, reason, iframeCommunication.$form);
        });
    }

    function unbindCardSubmitEventAndSubmitForm(iframeCommunication){
        var $form = iframeCommunication.$form;
        $(document).off("submit", OneClickPaymentView.submitSelector);
        $form.submit();
    }

    function disableInputsAndSubmitButton($form, disabled)
    {
        $form.find(OneClickPaymentView.changeSelector).prop("disabled", disabled);
        $form.find(OneClickPaymentView.changeSelector).closest("label").toggleClass("disabled", disabled);
        PaymentView.disableSubmitButton($form, disabled);
    }

    return OneClickPaymentView;
});
define('module/SpecForm',['require','jquery'],function(require){
	var $ = require("jquery");

	var SpecForm = function(form){
		this.$form = $(form);
	};
	
	SpecForm.prototype.setBrands = function(brands){
		this.$form.data('brands', brands);
	};
	
	SpecForm.prototype.getBrands = function(){
		return this.$form.data('brands');
	};
	
	SpecForm.prototype.getAction = function(){
		return this.$form.attr('action');
	};
	
	SpecForm.prototype.setCheckoutId = function(brands){
		this.$form.data('checkoutId', brands);
	};
	
	SpecForm.prototype.getCheckoutId = function(){
		return this.$form.data('checkoutId');
	};
	
	SpecForm.prototype.remove = function(){
		this.$form.remove();
	};
	
	return SpecForm;
});
define('module/OneClickPaymentWidget',['require','jquery','module/I18n','module/OneClickPaymentUtil','module/OneClickPaymentView','module/Options','module/RegistrationType','module/SpecForm','module/Util','module/Wpwl'],function(require){
    var $ = require("jquery");
    var I18n = require("module/I18n");
    var OneClickPaymentUtil = require("module/OneClickPaymentUtil");
    var OneClickPaymentView = require("module/OneClickPaymentView");
    var Options = require("module/Options");
    var RegistrationType = require("module/RegistrationType");
    var SpecForm = require("module/SpecForm");
    var Util = require("module/Util");
    var Wpwl = require("module/Wpwl");

    var OneClickPaymentWidget = function(forms){
        this.forms = forms;
        this.registrationsJson = Wpwl.checkout.config.registrations;
        $(document).on("click.wpwlEvent", OneClickPaymentWidget.showInitialPaymentFormsSelector, OneClickPaymentWidget.showInitialPaymentForms);
    };

    OneClickPaymentWidget.$showInitialPaymentForms = $("<div class=\"wpwl-form wpwl-form-registrations wpwl-clearfix\"><div class=\"wpwl-wrapper wpwl-wrapper-submit\"><button type=\"button\" class=\"wpwl-button wpwl-button-pay\" data-action=\"show-initial-forms\" aria-label=\"" + I18n.showOtherPaymentMethods + "\">" + I18n.showOtherPaymentMethods + "</button></div></div>");

    OneClickPaymentWidget.showInitialPaymentForms = function(){
        $(".wpwl-container").show();
        OneClickPaymentWidget.$showInitialPaymentForms.hide();
    };
    
    OneClickPaymentWidget.showInitialPaymentFormsSelector = "[data-action=\"show-initial-forms\"]";

    OneClickPaymentWidget.prototype.$container = $("<div id=\"wpwl-registrations\"/>");

    OneClickPaymentWidget.prototype.generateForms = function(){
        if(!Util.isEmpty(this.forms) && !Util.isEmpty(this.registrationsJson)){
            saveShopperResultUrl(this.forms[0]);
            prepareRegistrations.call(this);
            render.call(this);
            $(this.forms[0]).before(this.$container);
            if (Options.registrations.hideInitialPaymentForms) {
                $(this.$container).after(OneClickPaymentWidget.$showInitialPaymentForms);
            }
            $(document).trigger("oneclick:rendered");
        }
    };

    function saveShopperResultUrl(form){
        Options.shopperResultUrl = new SpecForm(form).getAction();
    }

    function prepareRegistrations(){
        var registrations = OneClickPaymentUtil.convertToRegistrations(this.registrationsJson);
        this.cardRegistrations = filterRegistrations(registrations, RegistrationType.card);
        this.directDebitRegistrations = filterRegistrations(registrations, RegistrationType.directDebit);
    }

    function filterRegistrations(registrations, type){
        return OneClickPaymentUtil.getRegistrationsByRenderType(registrations, type);
    }

    function render(){
        if (this.cardRegistrations.length || this.directDebitRegistrations.length){
            var registrations = this.cardRegistrations.concat(this.directDebitRegistrations);
            this.$container.append(renderCard(registrations));
        }
    }

    function renderCard(registrations){
        var view = new OneClickPaymentView(registrations, Wpwl.checkout.config.merchant);
        return view.render();
    }

    return OneClickPaymentWidget;
});

define('module/InternalRequestCommunicationSettings',[],function() {
    var InternalRequestCommunicationSettings = {};

    InternalRequestCommunicationSettings.IFRAME_NAME = 'internalRequest';
    InternalRequestCommunicationSettings.SCOPE = 'internalRequestIframeCommunication';
    InternalRequestCommunicationSettings.SEND_METHOD = 'send';
    InternalRequestCommunicationSettings.LOAD_IOVATION_MDR = 'loadIovationMdr';

    return InternalRequestCommunicationSettings;
});

/**
 * Module represents a sender responsible for communicating with internalRequestIframe.
 *
 * Upon initialization sender will setup communication channel with iframe window and will
 * be ready to send messages, which will be handled by its conterpart - InternalRequestListener.
 */
define('module/InternalRequestSender',['require','jquery','lib/Channel','module/Wpwl','module/InternalRequestCommunicationSettings'],function(require) {
    var $ = require('jquery');
    var Channel = require('lib/Channel');
    var Wpwl = require('module/Wpwl');
    var InternalRequestCommunicationSettings = require('module/InternalRequestCommunicationSettings');

    var COMMUNICATION_TIMEOUT = 60000;

    var InternalRequestSender = function() {
        this.channelReadyDeferred = $.Deferred();

        this.$internalRequestIframe = $('[name=' + InternalRequestCommunicationSettings.IFRAME_NAME + ']');
    };

    InternalRequestSender.prototype.init = function() {
        return this.iframeLoad()
            .then(this.setupChannel.bind(this));
    };

    InternalRequestSender.prototype.iframeLoad = function() {
        var iframeLoadDeferred = $.Deferred();

        this.$internalRequestIframe.on('load', function() {
            iframeLoadDeferred.resolve();
        });

        setTimeout(function() {
            iframeLoadDeferred.reject(new Error('Failed to load internalRequest iframe within timeout.'));
        }, COMMUNICATION_TIMEOUT);

        return iframeLoadDeferred.promise();
    };

    InternalRequestSender.prototype.setupChannel = function() {
        try {
            this.channel = Channel.build({
                window: this.$internalRequestIframe.get(0).contentWindow,
                origin: Wpwl.url,
                scope: InternalRequestCommunicationSettings.SCOPE,
                onReady: this.onChannelReady.bind(this)
            });
        } catch (e) {
            this.rejectDeferred(e);
        }

        this.timeout = setTimeout(
            this.rejectDeferred.bind(this, new Error('Failed to setup channel with internalRequest iframe within timeout.')),
            COMMUNICATION_TIMEOUT);

        return this.channelReadyDeferred.promise();
    };

    InternalRequestSender.prototype.rejectDeferred = function(reason) {
        if (this.timeout !== undefined) {
            this.timeout = clearTimeout(this.timeout);
            // This is needed because some cases call directly the rejectDeferred without waiting for the timeout
        }
        this.channelReadyDeferred.reject(reason);
    };

    InternalRequestSender.prototype.onChannelReady = function() {
        this.timeout = clearTimeout(this.timeout);
        this.channelReadyDeferred.resolve(this);
    };

    InternalRequestSender.prototype.send = function(params) {
        return this.callChannelAndReturnPromise(InternalRequestCommunicationSettings.SEND_METHOD, params);
    };

    InternalRequestSender.prototype.loadIovationMdr = function(checkoutUrl) {
        return this.callChannelAndReturnPromise(InternalRequestCommunicationSettings.LOAD_IOVATION_MDR, checkoutUrl);
    };

    InternalRequestSender.prototype.callChannelAndReturnPromise = function(method, params) {
        var deferred = $.Deferred();

        this.channel.call({
            method: method,
            timeout: COMMUNICATION_TIMEOUT,
            params: params,
            success: deferred.resolve,
            error: deferred.reject
        });

        return deferred.promise();
    };

    return InternalRequestSender;
});

define('lib/iovation',[],function() {
var iovation = {};
iovation.load = function() {

/*
 Copyright(c) 2018, iovation, inc. All rights reserved.
*/
(function B(){function v(e,a){var b={},c;for(c=e.length-1;-1<c;c--)0<c?b[c]=function(){var d=c;return function(){return w(e[d],b[d+1],a)}}():w(e[c],b[c+1],a)}function w(e,n,k){var c=document.createElement("script"),f,g,l;l=A(a[k]&&a[k].staticVer&&a[k].staticVer+"/"||e[1]);e[0]=e[0].replace("##version##",l);f=e[0].split("?")[0].split("/");g=f[f.length-1].split(".")[0];u.test(e[1])&&l!==e[1]&&d("loader: Overriding configured version with staticVer.");c.setAttribute("src",e[0]);c&&c.addEventListener?
c.addEventListener("error",function(){b[k+"_"+g+"_load_failure"]="true"}):c.attachEvent&&c.attachEvent("onerror",function(){b[k+"_"+g+"_load_failure"]="true"});n&&(c.onload=n);document.getElementsByTagName("head")[0].appendChild(c)}function d(e){if("function"===typeof a.trace_handler)try{a.trace_handler(e)}catch(b){}}function f(b,a){var d=null!==b&&void 0!==b;return!d||"1"!==b.toString()&&"true"!==b.toString().toLowerCase()?!d||"0"!==b.toString()&&"false"!==b.toString().toLowerCase()?"boolean"===
typeof a?a:!1:!1:!0}function A(a){d("********** version before replace: "+a+" **********");d('localNamespace[ "url_dots_to_dashes" ]: '+b.url_dots_to_dashes);d("numericVersionPattern.test( output ): "+u.test(a));b.url_dots_to_dashes&&u.test(a)&&(a=a.replace(/\./g,"-"));d("version after replace: "+a);return a}var g=window,x=g.io_global_object_name||"IGLOO",a=g[x]=g[x]||{},b=a.loader=a.loader||{},y=[],z=[],u=/^[0-9]{1,3}(\.[0-9]{1,3}){2}\/$/;if(b.loaderMain)return d("loader: Loader script has already run, try reducing the number of places it's being included."),
!1;b.loaderMain=B;b.loaderVer="5.2.2";(function(){var e=f(b.tp,!0),n=f(b.fp_static,!0),k=f(b.fp_dyn,!0),c=f(b.enable_legacy_compatibility),u=f(b.tp_split),v=b.tp_host&&b.tp_host.replace(/\/+$/,"")||"https://mpsnare.iesnare.com",l=b.fp_static_override_uri,m=void 0!==b.uri_hook?b.uri_hook+"/":"/iojs/",p=(b.version||"versionOrAliasIsRequired")+"/",w=b.subkey?g.encodeURIComponent(b.subkey)+"/":"",x=b.tp_resource||"wdp.js",q=b.tp_host?"&tp_host="+g.encodeURIComponent(b.tp_host):"",C=l?"&fp_static_uri="+
g.encodeURIComponent(l):"",r,t,h;b.tp_host=v;r=f(a.enable_flash,!0);t=a.io&&a.io.enable_flash;h=a.fp&&a.fp.enable_flash;t=void 0!==t&&null!==t?f(t,!0):r;void 0!==h&&null!==h?h=f(h,!0):t=r;r=t?"&flash=true":"&flash=false";h=h?"&flash=true":"&flash=false";q="?loaderVer="+b.loaderVer+"&compat="+c+"&tp="+e+"&tp_split="+u+q+"&fp_static="+n+"&fp_dyn="+k+C;e||n||d("loader: Not currently configured to load fp_static or tp script(s).");a.fp&&a.fp.staticVer&&a.fp.staticVer+"/"!==p&&(p=A(a.fp.staticVer+"/"),
d("loader: Configured version replaced with that from pre-loaded static script."));n||a.fp&&a.fp.staticMain?(m=(m+"##version##"+w).replace(/\/\//g,"/"),n&&(a.fp&&a.fp.staticMain?c&&!a.fp.preCompatMain&&d("loader: enable_legacy_compatibility on, but included static does not have the compat wrapper."):l?y.push([l,""]):y.push([m+"static_wdp.js"+q+h,p])),!k||a.fp&&a.fp.dynMain?a.fp&&a.fp.dynMain&&d("loader: First party dynamic script has already been loaded, disable fp_dyn or make sure you're not manually including the dynamic file separately."):
y.push([m+"dyn_wdp.js"+q+h,p])):f(b.fp_dyn)&&d("loader: Invalid Config, first party dynamic script set to load without static.");e&&(a.io&&a.io.staticMain?d("loader: Third party script has already been loaded."):(m=v+"/##version##"+w,u?(z.push([m+"static_wdp.js"+q+r,p]),z.push([m+"dyn_wdp.js"+q+r,p]),b.tp_resource&&d("loader: Invalid Config: both tp_resource and tp_split set. Ignoring tp_resource.")):z.push([m+x+q+r,p])))})();v(y,"fp");v(z,"io")})();

};

return iovation;
});

/*jshint camelcase: false */
define('module/IovationLoader',['require','jquery','lib/iovation'],function(require){
	var $ = require("jquery");
    var iovationjs = require("lib/iovation");

    var IovationLoader = {};

    IovationLoader.load = function(checkoutUrl) {
        window.io_global_object_name = "IGLOO";
        window.IGLOO = window.IGLOO || {
            "enable_flash": false,
            "bb_callback": function (bb, complete) {
                if (complete) {
                    var params = {
                        url: checkoutUrl,
                        method: "POST",
                        contentType: "application/x-www-form-urlencoded",
                        data: "customer.browserFingerprint.value=" + encodeURIComponent(bb)
                    };
                    $.ajax(params);
                }
            },
            "loader": {
                "uri_hook": "/fddr",
                "version": "general5"
            }
        };

        iovationjs.load();
    };

    return IovationLoader;
});

/**
 * Module represents a listener within internalRequestIframe.
 *
 * Upon initialization listener will setup communication channel with parent window and listen
 * for incoming messages from corresponding counterpart - InternalRequestSender.
 */
define('module/InternalRequestListener',['require','jquery','lib/Channel','module/InternalRequestCommunicationSettings','module/IovationLoader'],function(require) {
    var $ = require('jquery');
    var Channel = require('lib/Channel');
    var InternalRequestCommunicationSettings = require('module/InternalRequestCommunicationSettings');
    var IovationLoader = require('module/IovationLoader');

    var InternalRequestListener = function() {
        this.channelReadyDeferred = $.Deferred();
    };

    InternalRequestListener.prototype.init = function() {
        this.setupChannel()
            .done(this.initListeners.bind(this));
    };

    InternalRequestListener.prototype.setupChannel = function() {
        try {
            this.channel = Channel.build({
                window: window.parent,
                origin: "*",
                scope: InternalRequestCommunicationSettings.SCOPE,
                onReady: this.onChannelReady.bind(this)
            });
        } catch (e) {
            this.channelReadyDeferred.reject(e);
        }

        return this.channelReadyDeferred.promise();
    };

    InternalRequestListener.prototype.onChannelReady = function() {
        this.channelReadyDeferred.resolve();
    };

    InternalRequestListener.prototype.initListeners = function() {
        this.channel.bind(InternalRequestCommunicationSettings.SEND_METHOD, function(trans, params) {
            var requestResult = this.send(params);

            convertPromiseToTransAndDelayReturn(trans, requestResult);
        }.bind(this));

        this.channel.bind(InternalRequestCommunicationSettings.LOAD_IOVATION_MDR, function(trans, checkoutUrl) {
            IovationLoader.load(checkoutUrl);
        }.bind(this));
    };

    InternalRequestListener.prototype.send = $.ajax;

    function convertPromiseToTransAndDelayReturn(trans, promise) {
        promise
            .then(trans.complete)
            .fail(trans.error);

        trans.delayReturn(true);
    }

    return InternalRequestListener;
});

/**
 * Module provides ability to communicate with OPP backend without performing cross-site request.
 *
 * This is implemented using hidden iframe loaded from OPP domain and with communication between
 * payment widget and that iframe: widget -> iframe -> OPP backend.
 */
define('module/InternalRequestCommunication',['require','jquery','module/Generate','module/Util','module/Wpwl','module/Options','module/InternalRequestSender','module/InternalRequestListener','module/InternalRequestCommunicationSettings'],function(require) {
    var $ = require('jquery');
    var Generate = require('module/Generate');
    var Util = require('module/Util');
    var Wpwl = require('module/Wpwl');
    var Options = require('module/Options');
    var InternalRequestSender = require('module/InternalRequestSender');
    var InternalRequestListener = require('module/InternalRequestListener');
    var InternalRequestCommunicationSettings = require('module/InternalRequestCommunicationSettings');

    var InternalRequestCommunication = {};

    var senderDeferred = $.Deferred();
    var senderPromise = senderDeferred.promise();

    /**
     * Initializes internal request sender so it can be used to send requests via internalRequestIframe
     * to OPP backend. To obtain sender itself method 'getSender' should be used.
     *
     * Upon invocation current method will render hidden iframe and setup sender instance. Method should
     * be called once per lifecycle of payment widgets. It can be called again after 'unloadSender'
     * has been called.
     */
    InternalRequestCommunication.initSender = function($wpwlContainer) {
        var lastWpwlContainer = $wpwlContainer.last();

        if (!Util.isNullOrUndefined(lastWpwlContainer)) {
            $(lastWpwlContainer).after(generateHiddenInternalRequestIframe());

            var sender = new InternalRequestSender();

            sender.init()
                .then(function() {
                    senderDeferred.resolve(sender);
                })
                .fail(function(reason) {
                    senderDeferred.reject(reason);
                });
        }
    };

    /**
     * Removes hidden iframe and releases sender instance.
     */
    InternalRequestCommunication.unloadSender = function() {
        senderPromise.then(function(sender) {
            sender.channel.destroy();
        });

        senderDeferred = $.Deferred();
        senderPromise = senderDeferred.promise();

        $('[name=' + InternalRequestCommunicationSettings.IFRAME_NAME + ']').remove();
    };

    /**
     * Returns sender instance wrapped within promise.
     *
     * Since process of sender loading is asynchronous this method cannot return direct reference to sender
     * instance as it can be not fully initialized yet.
     */
    InternalRequestCommunication.getSender = function() {
        return senderPromise;
    };

    /**
     * Initializes internal request listener.
     *
     * This method will do nothing if it has been called outside of scope of internalRequestIframe html.
     */
    InternalRequestCommunication.initListener = function() {
        // Message namespace with specific value will indicate that javascript code is being
        // executed within internalRequestIframe scope, and it is the only place where we need
        // to initialize internalRequestListener
        if (Options.messageNamespace === 'internalRequest') {
            new InternalRequestListener().init();
        }
    };

    function generateHiddenInternalRequestIframe() {
        return Generate.outerHtml(
            $('<iframe/>', {
                'class': 'wpwl-control wpwl-control-iframe wpwl-control-internalRequestIframe disabled',
                'style': 'display: none',
                'name': InternalRequestCommunicationSettings.IFRAME_NAME,
                'src': getInternalRequestIframeSrc()
            })
        );
    }

    function getInternalRequestIframeSrc() {
        return Generate.string(Wpwl.url, '/v', Wpwl.apiVersion, '/internalRequestIframe.html', (Wpwl.minified ? '' : '?minified=false'));
    }

    return InternalRequestCommunication;
});

/* jshint ignore:start */
define('module/integrations/AffirmLoader',['require','module/Wpwl'],function(require) {

	var Wpwl = require('module/Wpwl');

    var AffirmLoader = {};

	AffirmLoader.loadScript = function() {
		if (Wpwl.checkout.config.workflowSpecificConfig.affirmConfig !== undefined) {
			if (Wpwl.checkout.config.workflowSpecificConfig.affirmConfig.active === true) {
				var affirmConfig = {
					public_api_key: Wpwl.checkout.config.workflowSpecificConfig.affirmConfig.publicKey,
					script: Wpwl.isTestSystem ? "https://cdn1-sandbox.affirm.com/js/v2/affirm.js" : "https://cdn1.affirm.com/js/v2/affirm.js"
				};

				(function (l, g, m, e, a, f, b) {
					var d, c = l[m] || {},
						h = document.createElement(f),
						n = document.getElementsByTagName(f)[0],
						k = function (a, b, c) {
							return function () {
								a[b]._.push([c, arguments])
							}
						};
					c[e] = k(c, e, "set");
					d = c[e];
					c[a] = {};
					c[a]._ = [];
					d._ = [];
					c[a][b] = k(c, a, b);
					a = 0;
					for (b = "set add save post open empty reset on off trigger ready setProduct".split(" ");
						 a < b.length; a++) d[b[a]] = k(c, e, b[a]);
					a = 0;
					for (b = ["get", "token", "url", "items"]; a < b.length; a++) d[b[a]] = function () {
					};
					h.async = !0;
					h.src = g[f];
					n.parentNode.insertBefore(h, n);
					delete g[f];
					d(g);
					l[m] = c
				})(window, affirmConfig, "affirm", "checkout", "ui", "script", "ready");
			}
		}
    };

	return AffirmLoader;
});
/* jshint ignore:end */;
define('module/logging/LoggerFactory',['require','jquery','module/Generate','module/Wpwl'],function(require){
    var $ = require('jquery');
    var Generate = require('module/Generate');
    var Wpwl = require('module/Wpwl');

    var logsUrl;

    var LogPusher = {
        interval: null,
        messageQueue: null,

        /**
         * Impure method, will remove from the messageQueue the messages that will be flushed.
         */
        getDataToFlush: function(){
            var data = {};
            var messagesToBeFlushed = this.messageQueue.length;
            for (var i = 0; i < messagesToBeFlushed; i++) {
                var message = this.messageQueue.shift();
                var messagePrefix = 'messages[' + i + ']';
                data[messagePrefix + '.logger'] = message.component;
                data[messagePrefix + '.timestamp'] = message.timestamp;
                data[messagePrefix + '.message'] = message.message;
                data[messagePrefix + '.level'] = message.level;
            }
            return data;
        },

        isDirty: function(){
            return !!this.messageQueue.length;
        },
        init: function(){
            this.clean();
        },
        clean: function(){
            this.messageQueue = [];
        },
        flush: function(){
            if (!logsUrl && Wpwl.checkout.id){
                logsUrl = Generate.string(Wpwl.url, "/v", Wpwl.apiVersion, "/checkouts/", Wpwl.checkout.id, "/logs");
            }
            if(logsUrl && this.isDirty()){
                $.ajax({
                    method: "POST",
                    url: logsUrl,
                    dataType: "json",
                    error: function(jqXHR, textStatus, errorThrown) {
                        console.log("Error sending ajax: " + textStatus + " - " + errorThrown);
                    },
                    data: this.getDataToFlush()
                });
            }
        },
        pushMessage: function(component, level, message){
            this.messageQueue.push({component: component,
                level: level,
                timestamp: Date.now(),
                message: message});
        },
        start : function(_window){
            var callPush = function() {LogPusher.flush();};
            $(_window).on('beforeunload.wpwlEvent', callPush);
            if(this.interval){
                clearInterval(this.interval);
            }
            this.interval = setInterval(callPush, 5000);
        }

    };

    LogPusher.init();


    var Logger = function(component){
        this.component = component;
    };

    Logger.prototype.info = function(message){
        this.logMessage("INFO", message);
    };

    Logger.prototype.debug = function(message){
        this.logMessage("DEBUG", message);
    };

    Logger.prototype.error = function(message){
        this.logMessage("ERROR", message);
    };

    Logger.prototype.logMessage = function(level, message){
        LogPusher.pushMessage(this.component, level, message);
    };

    var LoggerFactory = {};

    LoggerFactory.getLogger = function(component){
        return new Logger(component);
    };

    LoggerFactory.initFor = function(_window){
        LogPusher.start(_window);
    };

    LoggerFactory.flush = function(){
        LogPusher.flush();
    };

    return LoggerFactory;
});


/**
 * Error that should be specifically used when we integrate external widgets to pass the error to our clients.
 */

define('module/error/WidgetError',['require','shim/ObjectCreate','module/error/OppError'],function(require) {

    var ObjectCreate = require('shim/ObjectCreate');
    var OppError = require('module/error/OppError');

    var WidgetError = function (brand, event, message) {
        this.brand = brand || 'UNKNOWN_WIDGET';
        this.event = event || 'closed';
        this.message = message || 'Widget error: could not complete payment';
    };

    WidgetError.prototype = ObjectCreate(new OppError('Widget error: could not complete payment', 'WidgetError'));

    return WidgetError;
});
define('module/error/SessionError',['require','module/Options','module/error/OppError'],function(require) {

    var Options = require('module/Options');
    var OppError = require('module/error/OppError');

    var SessionError = {};

    SessionError.onTimeoutError = function() {
        Options.onError(new OppError('Session timed out!', 'InvalidCheckoutIdError'));
    };

    SessionError.isSessionTimeout = function(reason) {
        return reason.status === 400 &&
             reason.responseText.includes('200.300.404') &&
             reason.responseText.includes('No payment session found');
    };
    return SessionError;
});

define('module/integrations/Affirm',['require','jquery','module/Generate','module/InternalRequestCommunication','module/PaymentView','module/Options','module/integrations/AffirmLoader','module/logging/LoggerFactory','module/error/WidgetError','module/error/OppError','module/error/SessionError'],function(require) {

    var $ = require('jquery');
    var Generate = require("module/Generate");
    var InternalRequestCommunication = require('module/InternalRequestCommunication');
    var PaymentView = require("module/PaymentView");
    var Options = require("module/Options");
    var AffirmLoader = require("module/integrations/AffirmLoader");
    var LoggerFactory = require('module/logging/LoggerFactory');
    var logger = LoggerFactory.getLogger('Affirm');
    var WidgetError = require('module/error/WidgetError');
    var OppError = require('module/error/OppError');
    var SessionError = require('module/error/SessionError');

    var Affirm = {};

    Affirm.createAffirmButton = function (affirmConfig, $form, checkoutsEndpoint) {
        if (affirmConfig && affirmConfig.active === true) {
            // Add affirm script to the page head tag.
            Affirm.loadAffirmScript();

            // Create Affirm button
            var $button = $(Generate.buttonWithLogo("AFFIRM"));
            $button.attr('id', "affirmButton");
            $form.children("div.wpwl-group-button").append($button);

            // Attach the click handler
            $button.on('click.wpwlEvent', function (event) {
                event.preventDefault();

                // Call GET checkout to obtain the most updated Affirm checkoutData
                InternalRequestCommunication.getSender().then(function (sender) {
                    return sender.send({
                        url: checkoutsEndpoint + "/affirm",
                        datatype: 'json'
                    });

                }).then(function (checkoutData) {
                    return Affirm.redirectToAffirm($form, checkoutData);

                }).fail(function (reason) {
                    notifyError(reason);
                    PaymentView.showPleaseTryAgainMessage($form);
                });
            });
        }
    };

    Affirm.loadAffirmScript = function() {
        AffirmLoader.loadScript();
    };

    Affirm.redirectToAffirm = function ($form, checkoutData) {
        affirm.checkout.open_vcn({                                                                                      // jshint ignore:line
            success: function (cardDetails) {
                Affirm.submitPayment($form, cardDetails);
            },
            error: Affirm.handleVcnError,
            checkout_data: checkoutData                                                                                 // jshint ignore:line
        });
    };

    Affirm.handleVcnError = function (errorDetails) {
        logger.error(JSON.stringify(errorDetails));
        Options.onError(new WidgetError('AFFIRM', 'closed'));
    };

    Affirm.submitPayment = function ($form, responseContent) {
        var isValidVirtualData = Affirm.validateVirtualDetails(responseContent);
        if (!isValidVirtualData) {
            var message = "No virtual data was received, please check your account in Affirm.";
            $form.append(message);
            logger.error(message);

            PaymentView.showPleaseTryAgainMessage($form);
            return;
        }

        var splittedMonthYear = PaymentView.splitMonthYear(responseContent.expiration);
        var expiryYear = splittedMonthYear.year;
        var expiryMonth = splittedMonthYear.month;

        $form.find('input[name="paymentBrand"]').attr("value", "VISA");

        $form.append(Generate.generateHiddenFields(
            {
                "virtualCard.number": responseContent.number,
                "virtualCard.expiryMonth": expiryMonth,
                "virtualCard.expiryYear": expiryYear,
                "virtualCard.cvv": responseContent.cvv,
                "virtualCard.holder": responseContent.cardholder_name                                                   // jshint ignore:line
            }));

        $form.submit();
    };

    Affirm.validateVirtualDetails = function (cardDetails) {
        return cardDetails &&
            cardDetails.number && cardDetails.expiration && cardDetails.cvv && cardDetails.cardholder_name;             // jshint ignore:line
    };

    function notifyError(reason) {
        var errorMessage = "Redirect to Affirm failed. Reason: " + reason;
        logger.error(errorMessage);

        if (SessionError.isSessionTimeout(reason)) {
            SessionError.onTimeoutError();
        }
        else {
            Options.onError(new OppError(errorMessage, 'AffirmRedirectError'));
        }
    }

    return Affirm;
});
/*global ApplePaySession,ApplePayError,Promise*/
define('module/ApplePay',['require','jquery','module/Generate','module/InternalRequestCommunication','module/Locale','module/Options','module/PaymentView','module/Tracking','module/Util','module/Wpwl','module/Parameter'],function(require){

	var $ = require('jquery');
	var Generate = require("module/Generate");
    var InternalRequestCommunication = require('module/InternalRequestCommunication');
	var Locale = require('module/Locale');
	var Options = require('module/Options');
    var PaymentView = require('module/PaymentView');
    var Tracking = require("module/Tracking");
    var Util = require('module/Util');
    var Wpwl = require('module/Wpwl');
    var Parameter = require('module/Parameter');

    // Options, defined in wpwlOptions.applePay, are copied to the Apple Pay payment request
    var REQUEST_OPTIONS = [
        // Required. Default is {label: "With Apple Pay", amount: amount_from_checkout}
        "total",

        // Required. Default is Locale.country: US
        "countryCode",

        // Required. Default is the checkout's currency
        "currencyCode",

        // Required. Default is ['supports3DS'], defined in Options.js
        "merchantCapabilities",

        // Required. Default is ['amex', 'discover', 'masterCard', 'visa'], defined in Options.js
        "supportedNetworks",

        // Example, [{label: 'Shipping', amount: '0.00'}]
        "lineItems",

        // Example, [{label: 'Free Shipping', amount: '0.00', identifier: 'free', detail: '...'}, ...]
        "shippingMethods",

        // Can be: shipping, delivery, storePickup, servicePickup
        "shippingType",

        // Limit payments to cards from specific countries. Example, ['US']
        "supportedCountries",

        // Can contain: email, name, phone, postalAddress, phoneticName
        "requiredBillingContactFields", "requiredShippingContactFields"];

    var ApplePay = {};

    ApplePay.checkAndShowButton = function($form) {
        // Check browser compatibility
        if (!window.ApplePaySession ||
                !ApplePaySession.supportsVersion(Options.applePay.version)) {
            $form.remove();
            return;
        }

        if (Options.applePay.checkAvailability === "canMakePayments") {
            if (ApplePaySession.canMakePayments()) {
                showButton($form);
            } else {
                $form.remove();
            }
        } else if (Options.applePay.checkAvailability === "canMakePaymentsWithActiveCard") {
            var promise = ApplePaySession.canMakePaymentsWithActiveCard(
                Options.applePay.merchantIdentifier);
            promise.then(function (canMakePayments) {
                if (canMakePayments) {
                    showButton($form);
                } else {
                    $form.remove();
                }
            });
        }
    };

    function showButton($form) {
        // Check the button style
        var style = Options.applePay.style;
        if (!Util.contains(["white-with-line", "white", "black"], style)) {
            PaymentView.showSupportMessage("Invalid Apple Pay style: " + style, $form);
            return;
        }

        // Create Apple Pay button
        var $button = $(Generate.string(
            "<button type='button' class='wpwl-apple-pay-button wpwl-apple-pay-button-",
            style,
            "'>",
            "</button>"
        ));

        // Attach the click handler
        $button.on('click.wpwlEvent', function(event) {
            if (Options.onBeforeSubmitCard.call($form[0], event) !== false &&
                    !(event.isDefaultPrevented())) {
                ApplePay.start($form);
            }
        });

        // Append the button to the form
        $form.children("div.wpwl-group-button").append($button);
    }

    ApplePay.start = function($form) {
        var session = new ApplePaySession(Options.applePay.version, createPaymentRequest());

        if (Options.applePay.onCancel) {
            session.oncancel = ApplePay.onCancel;
        }

        if (Options.applePay.onPaymentMethodSelected) {
            session.onpaymentmethodselected = function(event) {
                ApplePay.onPaymentMethodSelected(session, event.paymentMethod);
            };
        }

        if (Options.applePay.onShippingContactSelected) {
            session.onshippingcontactselected = function(event) {
                ApplePay.onShippingContactSelected(session, event.shippingContact);
            };
        }

        if (Options.applePay.onShippingMethodSelected) {
            session.onshippingmethodselected = function(event) {
                ApplePay.onShippingMethodSelected(session, event.shippingMethod);
            };
        }

        session.onvalidatemerchant = function(event) {
            ApplePay.onValidateMerchant(session, event.validationURL);
        };
        session.onpaymentauthorized = function(event) {
            ApplePay.onPaymentAuthorized(session, event.payment, $form);
        };

        // Show the payment sheet
        if (Wpwl.checkout.id) {
            session.begin();
        } else {
            ApplePay.fastCheckout(session, $form);
        }
    };

    function createPaymentRequest() {
        var paymentRequest = {
            currencyCode: Wpwl.checkout.currency || Options.applePay.currencyCode,
            countryCode: Locale.country,
        };
        REQUEST_OPTIONS.forEach(function(option) {
            if (Options.applePay[option]) {
                paymentRequest[option] = Options.applePay[option];
            }
        });
        paymentRequest.total.amount = paymentRequest.total.amount || Wpwl.checkout.amount;
        return paymentRequest;
    }

    ApplePay.fastCheckout = function(session, $form) {
        // Look for the createCheckout callback function
        if (typeof Options.createCheckout !== "function") {
            var info = "Checkout ID and createCheckout not found";
            PaymentView.showSupportMessage(info, $form);
            Tracking.exception(info);
            return;
        }

        // Calling the callback function to create checkout and then begin session
        var createCheckoutResult = Options.createCheckout();
        var promise = Promise.resolve(createCheckoutResult);
        promise.then(function(checkoutId) {
            // Only begin the Apple Pay session if the returned checkoutId is truthy
            if (checkoutId) {
                Wpwl.checkout.id = checkoutId;
                return session.begin();
            }
        }, function(response) {
            var info = "Creating checkout returned error: " + JSON.stringify(response);
            Tracking.exception(info);
        });
        return promise;
    };

    ApplePay.onCancel = function() {
        Options.applePay.onCancel();
    };

    ApplePay.onPaymentMethodSelected = function(session, paymentMethod) {
        // Callback function should handle ApplePayPaymentMethod
        // {displayName, network, type, paymentPass}
        // and return ApplePayPaymentMethodUpdate {newTotal, newLineItems}
        var callbackUpdate = Options.applePay.onPaymentMethodSelected(paymentMethod);
        // The callback result can be a promise or directly an update object.
        // We wrap it with Promise.resolve() to handle both cases.
        // Note that any then-able objects (esp. JavaScript and jQuery promises) should work.
        var promise = Promise.resolve(callbackUpdate);
        promise.then(function(update) {
            if (update && update.status === "ABORT") {
                session.abort();
                return;
            }
            if (Options.applePay.version <= 2) {
                session.completePaymentMethodSelection(update.newTotal, update.newLineItems || null);
            } else {
                session.completePaymentMethodSelection(update);
            }
        });
        return promise;
    };

    ApplePay.onShippingContactSelected = function(session, shippingContact) {
        // Callback function should handle ApplePayPaymentContact
        // {emailAddress, familyName, givenName, phoneNumber, phoneticFamilyName,
        //   phoneticGivenName, addressLines, locality, subLocality,
        //   administrativeArea, subAdministrativeArea, postalCode, country, countryCode}
        // and return ApplePayShippingContactUpdate
        // {errors, newLineItems, newShippingMethods, newTotal}
        var callbackUpdate = Options.applePay.onShippingContactSelected(shippingContact);

        // The callback result can be a promise or directly an update object.
        // We wrap it with Promise.resolve() to handle both cases.
        // Note that any then-able objects (esp. JavaScript and jQuery promises) should work.
        var promise = Promise.resolve(callbackUpdate);
        promise.then(function(update) {
            if (update && update.status === "ABORT") {
                session.abort();
                return;
            }
            if (Options.applePay.version <= 2) {
                var status = getStatusFromOnShippingContactSelectedErrors(update.errors);
                session.completeShippingContactSelection(status, update.newShippingMethods || [],
                    update.newTotal, update.newLineItems || null);
            } else {
                var errors = [];
                if (update.errors) {
                    // Convert errors to ApplePayError objects
                    update.errors.forEach(function(error) {
                        errors.push(new ApplePayError(error.code, error.contactField, error.message));
                    });
                }
                update.errors = errors;
                session.completeShippingContactSelection(update);
            }
        });
        return promise;
    };

    function getStatusFromOnShippingContactSelectedErrors(errors) {
        // status can be STATUS_SUCCESS, STATUS_INVALID_SHIPPING_POSTAL_ADDRESS, STATUS_FAILURE
        var status = ApplePaySession.STATUS_SUCCESS;
        if (errors) {
            status = ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS;
            for (var i = 0; i < errors.length; i++) {
                if (errors[i].code !== "shippingContactInvalid") {
                    status = ApplePaySession.STATUS_FAILURE;
                    break;
                }
            }
        }
        return status;
    }

    ApplePay.onShippingMethodSelected = function(session, shippingMethod) {
        // Callback function should handle ApplePayShippingMethod
        // {label, amount identifier, detail}
        // and return ApplePayShippingMethodUpdate {newTotal, newLineItems}
        var callbackUpdate = Options.applePay.onShippingMethodSelected(shippingMethod);

        // The callback result can be a promise or directly an update object.
        // We wrap it with Promise.resolve() to handle both cases.
        // Note that any then-able objects (esp. JavaScript and jQuery promises) should work.
        var promise = Promise.resolve(callbackUpdate);
        promise.then(function(update) {
            if (update && update.status === "ABORT") {
                session.abort();
                return;
            }
            if (Options.applePay.version <= 2) {
                // Always return success
                session.completeShippingMethodSelection(ApplePaySession.STATUS_SUCCESS,
                    update.newTotal, update.newLineItems || null);
            } else {
                session.completeShippingMethodSelection(update);
            }
        });
        return promise;
    };

    // Call the server to validate merchant (aka starting session)
    ApplePay.onValidateMerchant = function(session, validationURL) {
        var createApplePaySessionUrl = Generate.string(Wpwl.url, "/v", Wpwl.apiVersion,
            "/checkouts/", Wpwl.checkout.id, "/applePaySession");
        return InternalRequestCommunication.getSender().then(function (sender) {
            return sender.send({
                method: "POST",
                url: createApplePaySessionUrl,
                dataType: "json",
                data: {
                    "applePay.validationUrl": validationURL,
                    "applePay.displayName": Options.applePay.displayName,
                    "applePay.domainName": window.location.hostname
                }
            });
        })
        .done(function(response) {
            try {
                session.completeMerchantValidation(response);
            } catch (error) {
                // Do nothing. This error could happen when the merchant was successfully validated
                // but the shopper canceled the payment and, as a result, invalidated the session.
            }
        })
        .fail(function(response) {
            session.abort();
            var info = "Starting Apple Pay session returned with status " + response.status;
            Tracking.exception(info);
        });
    };

    ApplePay.onPaymentAuthorized = function(session, payment, $form) {
        if (Options.applePay.onPaymentAuthorized) {
            // Callback function should handle
            // {shippingContact, billingContact} (ApplePayPaymentContact)
            // and return {status, errors: [{code, contactField, message}]},
            // similar to ApplePayPaymentAuthorizationResult
            var callbackResult = Options.applePay.onPaymentAuthorized({
                "shippingContact": payment.shippingContact,
                "billingContact": payment.billingContact
            });
            // The callback result can be a promise or directly an result object.
            // We wrap it with Promise.resolve() to handle both cases.
            // Note that any then-able objects (esp. JavaScript and jQuery promises) should work.
            var promise = Promise.resolve(callbackResult);
            promise.then(function(result) {
                handleOnPaymentAuthorizedResult(session, payment, $form, result);
            }, function() {
                // If the callback promise is rejected
                session.completePayment((Options.applePay.version <= 2) ?
                    ApplePaySession.STATUS_FAILURE : {
                        status: ApplePaySession.STATUS_FAILURE,
                        errors: [new ApplePayError("unknown")]
                    });
            });
            return promise;
        } else {
            ApplePay.pay(session, payment, $form);
        }
    };

    /* jshint maxparams: 4 */
    function handleOnPaymentAuthorizedResult(session, payment, $form, result) {
        // Handle possible failure
        if (result && result.status === "ABORT") {
            session.abort();
            return;
        }
        if (result && (result.status === "FAILURE" ||
                (result.errors && result.errors.length))) {
            if (Options.applePay.version <= 2) {
                var status = getStatusFromOnPaymentAuthorizationErrors(result.errors);
                session.completePayment(status);
            } else {
                var errors = [];
                result.errors.forEach(function(error) {
                    errors.push(new ApplePayError(
                        error.code, error.contactField, error.message));
                });
                session.completePayment({
                    status: ApplePaySession.STATUS_FAILURE,
                    errors: errors
                });
            }
            return;
        }

        ApplePay.pay(session, payment, $form);
    }

    // Convert {code, contactField, message} to Apple Pay status code
    function getStatusFromOnPaymentAuthorizationErrors(errors) {
        var status = ApplePaySession.STATUS_FAILURE;
        if (!errors || !errors.length) {
            return status;
        }

        // Older API versions only support one error
        var error = errors[0];
        switch (error.code) {
        case "shippingContactInvalid":
            status = ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS;
            if (Util.contains(["phoneNumber", "emailAddress"], error.contactField)) {
                status = ApplePaySession.STATUS_INVALID_SHIPPING_CONTACT;
            }
            break;
        case "billingContactInvalid":
            status = ApplePaySession.STATUS_INVALID_BILLING_POSTAL_ADDRESS;
            break;
        }
        return status;
    }

    // Send payment for processing
    ApplePay.pay = function(session, payment, $form) {
        $form.append(Generate.hiddenInput(
            "applePay.paymentToken", JSON.stringify(payment.token.paymentData)));
        $form.append(Generate.hiddenInput(Parameter.TOKEN_SOURCE, "APPLEPAY"));

        if (Options.applePay.submitOnPaymentAuthorized) {
            ApplePay.appendContacts(payment, $form);
        }

        var paymentUrl = Generate.string(Wpwl.url, "/v", Wpwl.apiVersion,
            "/checkouts/", Wpwl.checkout.id, "/payment");
        InternalRequestCommunication.getSender().then(function (sender) {
            return sender.send({
                method: "POST",
                url: paymentUrl,
                dataType: "json",
                data: $form.serialize()
            });
        })
        .done(function () {
            session.completePayment((Options.applePay.version <= 2) ?
                ApplePaySession.STATUS_SUCCESS :
                { status: ApplePaySession.STATUS_SUCCESS });
        })
        .fail(function() {
            session.completePayment((Options.applePay.version <= 2) ?
                ApplePaySession.STATUS_FAILURE : {
                    status: ApplePaySession.STATUS_FAILURE,
                    errors: [new ApplePayError("unknown")]
                });
        })
        .always(function(response) {
            if (response && response.redirect && response.redirect.shortUrl) {
                ApplePay.redirect(response.redirect.shortUrl, $form);
            }
        });
    };

    // Append contact detail to the form
    ApplePay.appendContacts = function(payment, $form) {
        var submitOnPaymentAuthorized = Options.applePay.submitOnPaymentAuthorized || [];
        if (submitOnPaymentAuthorized.indexOf('billing') > -1) {
            appendBilling(payment.billingContact, $form);
        }
        if (submitOnPaymentAuthorized.indexOf('customer') > -1) {
            appendCustomer(payment.billingContact, $form);
        }
    };

    function appendBilling(billingContact, $form) {
        if (!billingContact) {
            return;
        }

        if (billingContact.addressLines && billingContact.addressLines.length > 0) {
            appendHiddenInput($form, Parameter.BILLING_STREET1, billingContact.addressLines[0]);
            if (billingContact.addressLines.length > 1) {
                appendHiddenInput($form, Parameter.BILLING_STREET2,
                    billingContact.addressLines.slice(1).join(", "));
            }
        }

        appendHiddenInput($form, Parameter.BILLING_CITY,
            billingContact.locality, billingContact.subLocality);
        appendHiddenInput($form, Parameter.BILLING_STATE,
            billingContact.administrativeArea, billingContact.subAdministrativeArea);
        appendHiddenInput($form, Parameter.BILLING_POST_CODE, billingContact.postalCode);
        appendHiddenInput($form, Parameter.BILLING_COUNTRY,
            (billingContact.countryCode) ? billingContact.countryCode.toUpperCase() : null);
    }

    function appendCustomer(billingContact, $form) {
        if (!billingContact) {
            return;
        }

        appendHiddenInput($form, Parameter.PHONE, billingContact.phoneNumber);
        appendHiddenInput($form, Parameter.EMAIL, billingContact.emailAddress);
        appendHiddenInput($form, Parameter.GIVEN_NAME, billingContact.givenName);
        appendHiddenInput($form, Parameter.SUR_NAME, billingContact.familyName);
    }

    // Append a hidden input, with given name name values, to the form
    function appendHiddenInput($form, name, value1, value2) {
        // value = value2, value1
        var value;
        if (value1) {
            if (value2) {
                value = value2 + ", " + value1;
            } else {
                value = value1;
            }
        }

        if (value) {
            $form.append(Generate.hiddenInput(name, value));
        }
    }

    ApplePay.doRedirect = function(url, $form){
        var $submitForm = $("<form/>", {
            action: url,
            method: "GET",
            // id of the container of the form is the name of the target iframe
            target: Options.paymentTarget ? Options.paymentTarget : $form.parent().attr("id")
        });
        $form.before($submitForm);
        $submitForm.submit();
    };

    ApplePay.redirect = function(url, $form) {
        if (Options.applePay.redirectDelay !== 0){
            setTimeout(ApplePay.doRedirect, Options.applePay.redirectDelay, url, $form);
        } else {
            ApplePay.doRedirect(url, $form);
        }
    };

    return ApplePay;
});
// Google Pay API - https://developers.google.com/pay/api/web/reference/client
/*global Promise*/
define('module/GooglePay',['require','jquery','module/Generate','module/InternalRequestCommunication','module/Options','module/Wpwl','module/Parameter','module/PaymentView','module/Tracking','module/error/WidgetError','module/logging/LoggerFactory'],function(require) {
    var $ = require('jquery');
    var Generate = require('module/Generate');
    var InternalRequestCommunication = require('module/InternalRequestCommunication');
    var Options = require('module/Options');
    var Wpwl = require('module/Wpwl');
    var Parameter = require('module/Parameter');
    var PaymentView = require('module/PaymentView');
    var Tracking = require("module/Tracking");
    var WidgetError = require("module/error/WidgetError");
    var LoggerFactory = require('module/logging/LoggerFactory');
    var logger = LoggerFactory.getLogger('GooglePay');

    var paymentsClient = null;

    var GooglePay = {};
    var SUCCESS = "SUCCESS";

    GooglePay.createButton = function($form) {
        GooglePay.$form = $form;

        GooglePay.loadScript().done(function() {
            var paymentsClient = GooglePay.getGooglePaymentsClient();
            paymentsClient.isReadyToPay(getIsReadyToPayRequest())
                .then(function(response) {
                    if (response.result) {
                        var button = paymentsClient.createButton({
                            onClick: GooglePay.onClick
                        });
                        $form.children("div.wpwl-group-button").append(button);

                        paymentsClient.prefetchPaymentData(getPrefetchPaymentDataRequest());
                    }
                })
                .catch(function(err) {
                    var message = "isReadyToPay - IsReadyToPayRequest passed to GooglePay.isReadyToPay(), " +
                    "was improperly formatted, missed the minimum required parameters to determine a " +
                    "user's readiness to pay, or it contains an invalid parameter and/or value. " +
                     "GooglePay returned -> " + JSON.stringify(err);
                    logger.error(message);
                    Options.onError(new WidgetError('GOOGLEPAY', 'isReadyToPay', message));
                });
        });
    };

    GooglePay.loadScript = function() {
        return $.getScript("https://pay.google.com/gp/p/js/pay.js");
    };

    GooglePay.getGooglePaymentsClient = function() {
        if (paymentsClient === null) {
            var env = Wpwl.isTestSystem ? 'TEST' : 'PRODUCTION';
            var callBacks = GooglePay.getPaymentDataCallbacks();
            paymentsClient = new google.payments.api.PaymentsClient({  // jshint ignore:line
                environment: env,
                paymentDataCallbacks: callBacks
            });
        }
        return paymentsClient;
    };

    GooglePay.getPaymentDataCallbacks = function() {
        var paymentDataCallbacks = {};
        paymentDataCallbacks.onPaymentAuthorized = GooglePay.onPaymentAuthorized;
        if(Options.googlePay.onPaymentDataChanged) {
            paymentDataCallbacks.onPaymentDataChanged = GooglePay.onPaymentDataChanged;
        }
        return paymentDataCallbacks;
    };

    GooglePay.onPaymentDataChanged = function(address) {
        if(Options.googlePay.onPaymentDataChanged) {
            return Options.googlePay.onPaymentDataChanged(address);
        }
    };

    GooglePay.onPaymentAuthorized = function(paymentData) {
        if(Options.googlePay.onPaymentAuthorized) {
            var promise = Options.googlePay.onPaymentAuthorized(paymentData);
            promise.then(function(promiseResult) {
                if(promiseResult.transactionState === SUCCESS) {
                    GooglePay.processPayment(paymentData);
                }
            })
            .catch(function(data) {  // jshint ignore:line
                var message = "onPaymentAuthorized - Merchant passed a reject() to GooglePay.onPaymentAuthorized()" +
                 "GooglePay returned PaymentDataError as -> " + JSON.stringify(data);
                logger.error(message);
                Options.onError(new WidgetError('GOOGLEPAY', 'onPaymentAuthorized', message));
                // This would be called when merchant passes reject(). When reject() is passed
                // Google errors as "DEVELOPER_ERROR in loadPaymentData: An error occurred in call back,
                // please try to avoid this by setting structured error in callback response"
            });
            return promise;
        }
        else {
            GooglePay.processPayment(paymentData);
            return new Promise(function(resolve, reject) {  // jshint ignore:line
                resolve({ transactionState: SUCCESS });
            });
        }
    };

    function getIsReadyToPayRequest() {
        return {
            apiVersion: Options.googlePay.apiVersion,
            apiVersionMinor: Options.googlePay.apiVersionMinor,
            allowedPaymentMethods: [{
                type: 'CARD',
                parameters: GooglePay.setCardParameters()
            }]
        };
    }

    function getPrefetchPaymentDataRequest() {
        var request = getPaymentDataRequest();
        request.transactionInfo.totalPriceStatus = Options.googlePay.prefetchPriceStatus;
        return request;
    }

    function getLoadPaymentDataRequest() {
        var request = getPaymentDataRequest();
        request.transactionInfo.totalPriceStatus = Options.googlePay.totalPriceStatus;
        request.transactionInfo.totalPrice = Wpwl.checkout.amount || Options.googlePay.amount;
        return request;
    }

    function getPaymentDataRequest() {
        var request = getIsReadyToPayRequest();
        request.allowedPaymentMethods[0].tokenizationSpecification = {
            type: 'PAYMENT_GATEWAY',
            parameters: {
                'gateway': 'aciworldwide',
                'gatewayMerchantId': Options.googlePay.gatewayMerchantId
            }
        };
        request.merchantInfo = {
            merchantId: Options.googlePay.merchantId,
            merchantName: Options.googlePay.merchantName
        };

        GooglePay.setBaseTransactionInfo(request);
        GooglePay.setCallBackIntents(request);
        return request;
    }

    GooglePay.setCardParameters = function() {
        var cardParameters = {};
        cardParameters.allowedAuthMethods = Options.googlePay.allowedAuthMethods;
        cardParameters.allowedCardNetworks = Options.googlePay.allowedCardNetworks;
        if(Options.googlePay.billingAddressRequired) {
            cardParameters.billingAddressRequired = Options.googlePay.billingAddressRequired;
            cardParameters.billingAddressParameters = Options.googlePay.billingAddressParameters;
        }
        if(Options.googlePay.allowPrepaidCards) {
            cardParameters.allowPrepaidCards = Options.googlePay.allowPrepaidCards;
        }
        if(Options.googlePay.allowCreditCards) {
            cardParameters.allowCreditCards = Options.googlePay.allowCreditCards;
        }
        return cardParameters;
    };

    GooglePay.setBaseTransactionInfo = function(request) {
        request.transactionInfo = {};
        request.transactionInfo.currencyCode = Wpwl.checkout.currency || Options.googlePay.currencyCode;
        if(Options.googlePay.displayItems) {
            request.transactionInfo.displayItems = Options.googlePay.displayItems;
            if(Options.googlePay.totalPriceLabel) {
                request.transactionInfo.totalPriceLabel = Options.googlePay.totalPriceLabel;
            }
            else {
                request.transactionInfo.totalPriceLabel = "Total";
            }
        }

    };

    GooglePay.setCallBackIntents = function(request) {
        var callbackIntentsArray = [];
        callbackIntentsArray.push("PAYMENT_AUTHORIZATION");
        if(Options.googlePay.onPaymentDataChanged) {
            callbackIntentsArray.push("SHIPPING_ADDRESS");
            request.shippingAddressRequired = true;
            if(Options.googlePay.shippingAddressParameters) {
                request.shippingAddressParameters = Options.googlePay.shippingAddressParameters;
            }

            if(Options.googlePay.shippingOptionRequired) {
                callbackIntentsArray.push("SHIPPING_OPTION");
                request.shippingOptionRequired = true;
                if(Options.googlePay.shippingOptionParameters) {
                    request.shippingOptionParameters = Options.googlePay.shippingOptionParameters;
                }
            }
        }

        request.callbackIntents = callbackIntentsArray;

        if(Options.googlePay.emailRequired) {
            request.emailRequired = Options.googlePay.emailRequired;
        }
    };

    GooglePay.onClick = function() {
        if (! Wpwl.checkout.id && typeof Options.createCheckout !== "function") {
            var info = "Fast Checkout - Checkout ID and createCheckout not found";
            PaymentView.showSupportMessage(info, GooglePay.$form);
            Tracking.exception(info);
            return;
        }
        var paymentsClient = GooglePay.getGooglePaymentsClient();
        GooglePay.resolveCheckoutId()
            .then(function() {
                paymentsClient.loadPaymentData(getLoadPaymentDataRequest())
                    .catch(function(err) {
                        GooglePay.onCancel(err);
                    });
            });
    };

    GooglePay.onCancel = function(googleError) {
        // For example, the payment sheet is closed - {statusCode: "CANCELED"}
        // OR when {statusCode: "DEVELOPER_ERROR"} when the passed PaymentDataRequest
        // object was improperly formatted, missing the minimum required parameters,
        // or contains an invalid parameter and/or value
        var stringifiedGoogleError = JSON.stringify(googleError);
        logger.error("Error on loadPaymentData is " + stringifiedGoogleError);
        if (googleError.statusCode === 'CANCELED') {
            if (Options.googlePay.onCancel) {
                logger.error('User closed GooglePay Widget. Merchant implementation of onCancel callback being called.');
                Options.googlePay.onCancel(googleError.statusCode);
            }
            else {
                logger.error('User closed GooglePay Widget. Merchant not implemented onCancel callback. ' +
                    'Calling onError (if defined by merchant, else the default ACI implementation of onError).');
                Options.onError(new WidgetError('GOOGLEPAY', 'closed', 'User closed GooglePay Widget! ' + stringifiedGoogleError));
            }
        }
        else if (googleError.statusCode === 'DEVELOPER_ERROR') {
            logger.error('loadPaymentData - DEVELOPER_ERROR ' +
                'Calling onError (if defined by merchant, else the default ACI implementation of onError).');
            Options.onError(new WidgetError('GOOGLEPAY', 'developer_error',
            'The passed PaymentDataRequest object was improperly formatted ' + stringifiedGoogleError));
        }
        else {
            logger.error('loadPaymentData - Unknown error status code from GooglePay. ' +
                'Calling onError (if defined by merchant, else the default ACI implementation of onError).');
            Options.onError(new WidgetError('GOOGLEPAY', googleError.statusCode,
            'Unknown error status code ' + stringifiedGoogleError));
        }
    };

    GooglePay.resolveCheckoutId = function() {
        if(Wpwl.checkout.id) {
            return Promise.resolve(Wpwl.checkout.id); // jshint ignore:line
        }
        else {
            // Calling the callback function to create checkout and then begin session
            var createCheckoutResult = Options.createCheckout();
            var promise = Promise.resolve(createCheckoutResult);
            promise.then(function(checkoutId) {
                if (checkoutId) {
                    Wpwl.checkout.id = checkoutId;
                }
            }, function(response) {
                var info = "Creating checkout returned error: " + JSON.stringify(response);
                Tracking.exception(info);
            });
            return promise;
        }
    };

    GooglePay.processPayment = function(paymentData) {
        GooglePay.$form.append(Generate.hiddenInput(
            "googlePay.paymentToken", paymentData.paymentMethodData.tokenizationData.token));
        GooglePay.$form.append(Generate.hiddenInput(Parameter.TOKEN_SOURCE, "GOOGLEPAY"));

        if (Options.googlePay.submitOnPaymentAuthorized) {
            GooglePay.appendContacts(paymentData);
        }

        var paymentUrl = Generate.string(Wpwl.url, "/v", Wpwl.apiVersion,
            "/checkouts/", Wpwl.checkout.id, "/payment");
        InternalRequestCommunication.getSender().then(function (sender) {
            return sender.send({
                method: "POST",
                url: paymentUrl,
                dataType: "json",
                data: GooglePay.$form.serialize()
            });
        })
        .always(function(response) {
            if (response && response.redirect && response.redirect.shortUrl) {
                GooglePay.redirect(response.redirect.shortUrl);
            }
        });
    };

    // Append contact detail to the form
    GooglePay.appendContacts = function(paymentData) {
        var submitOnPaymentAuthorized = Options.googlePay.submitOnPaymentAuthorized || [];
        if (submitOnPaymentAuthorized.indexOf('billing') > -1) {
            appendBilling(paymentData.paymentMethodData.info.billingAddress);
        }
        if (submitOnPaymentAuthorized.indexOf('customer') > -1) {
            appendCustomer(paymentData.email, paymentData.paymentMethodData.info.billingAddress);
        }
    };

    function appendBilling(billingAddress) {
        if (!billingAddress) {
            return;
        }

        appendHiddenInput(Parameter.BILLING_STREET1, billingAddress.address1);
        appendHiddenInput(Parameter.BILLING_STREET2,
            billingAddress.address2, billingAddress.address3);
        appendHiddenInput(Parameter.BILLING_CITY, billingAddress.locality);
        appendHiddenInput(Parameter.BILLING_STATE, billingAddress.administrativeArea);
        appendHiddenInput(Parameter.BILLING_POST_CODE, billingAddress.postalCode);
        appendHiddenInput(Parameter.BILLING_COUNTRY, billingAddress.countryCode);
    }

    function appendCustomer(email, billingAddress) {
        appendHiddenInput(Parameter.EMAIL, email);

        if (!billingAddress) {
            return;
        }

        appendHiddenInput(Parameter.PHONE, billingAddress.phoneNumber);

        // Split Google Pay's name into givenName and surname
        if (billingAddress.name) {
            var givenName, surname;
            var firstSpaceIndex = billingAddress.name.indexOf(" ");
            if (firstSpaceIndex === -1) {
                givenName = billingAddress.name;
            } else {
                givenName = billingAddress.name.substring(0, firstSpaceIndex);
                surname = billingAddress.name.substring(firstSpaceIndex + 1);
            }
            appendHiddenInput(Parameter.GIVEN_NAME, givenName);
            appendHiddenInput(Parameter.SUR_NAME, surname);
        }
    }

    // Append a hidden input, with given name name values, to the form
    function appendHiddenInput(name, value1, value2) {
        // value = value1, value2
        var value = value1;
        if (!value) {
            return;
        }
        if (value2) {
            value += ", " + value2;
        }
        GooglePay.$form.append(Generate.hiddenInput(name, value));
    }

    GooglePay.redirect = function(url) {
        // Google Pay could redirect to 3D-Secure. This logic is the same as in card payment (Payment.js)
        var numberOfRedirects = 0;
        var $iframe = GooglePay.$form.next();
        $iframe.on("load", function(){
            // The first redirect is to OPP. The second redirect is 3D-Secure.
            if( ++numberOfRedirects === 2 )	{
                GooglePay.$form.hide();
                $iframe.show();

                var dim = Options.threeDIframeSize;
                $iframe.width(dim.width);
                $iframe.height(dim.height);

                Options.onLoadThreeDIframe.call($iframe.get(0));
            }
        });

        var $submitForm = $("<form/>", {
            action: url,
            method: "GET",
            target: Options.paymentTarget ? Options.paymentTarget : GooglePay.$form.parent().attr("id")
        });
        GooglePay.$form.before($submitForm);
        $submitForm.submit();
    };

    return GooglePay;
});
define('module/Console',[],function() {
	// Avoid `console` errors in browsers that lack a console.
	var method;
	/* istanbul ignore next */
	var noop = function() {};
	var methods = [
		'assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error', 
		'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log', 
		'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd', 
		'timeline', 'timelineEnd', 'timeStamp', 'trace', 'warn'
	];
	var length = methods.length;
	var console = (window.console = window.console || /* istanbul ignore next */ {});

	while (length--) {
		method = methods[length];

		// Only stub undefined methods.
		if (!console[method]) {
			console[method] = noop;
		}
	}
	
	return console;
});
define('module/CountDownLatch',[],function(){
	var CountDownLatch = function(count) {
		this.count = count || 0;
	};
	
	CountDownLatch.prototype.countDown = function() {
		return --this.count <= 0; 
	};
	
	return CountDownLatch;
});
define('module/Parameters',[],function(){
	var HiddenParameters = function(){
		this.parameters = {};
	};

	HiddenParameters.prototype.add = function(key, value){
		this.parameters[key] = value;
	};

	HiddenParameters.prototype.getParameters = function(){
		return this.parameters;
	};

	return HiddenParameters;
});

define('module/StyleLoader',['require','jquery'],function(require) {
    var $ = require('jquery');

    var StyleLoader = function(){};
    
    StyleLoader.prototype.load = function(link){
        var styleLoader = this;

        injectLinkElement(link);

        var styleSheets = window.document.styleSheets;
        var styleHref = $(link).attr("href");

        var deferred = $.Deferred();

        styleLoader.interval = window.setInterval(function(){
            var i = styleSheets.length;
            while(i--){
                if(styleSheets[i].href === styleHref){
                    afterLoading.call(styleLoader);
                    deferred.resolve();
                }
            }
        }, 30);

        // waiting 10 secs for the css to load and rejects promise
        styleLoader.timeout = window.setTimeout(function(){
            afterLoading.call(styleLoader);
            deferred.reject();
        }, 10000);

        return deferred.promise();
    };
    
    function injectLinkElement(link){
        if (!linkElementAlreadyInjected()){
            $("head").prepend(link);
        }
    }
    
    function linkElementAlreadyInjected(){
        return $('#wpwl-style').length !== 0;
    }

    function afterLoading(){
        var styleLoader = this;

        window.clearInterval(styleLoader.interval);
        window.clearTimeout(styleLoader.timeout);
    }

    return StyleLoader;
});
define('module/InlineFlow',['require','module/Options'],function(require) {

    var Options = require('module/Options');

	var InlineFlow = {};

    InlineFlow.isInlineFlow = function(brand) {
        return Options.inlineFlow !== undefined && Options.inlineFlow !== null && Options.inlineFlow.filter(
        function(value) {
            return value === brand;
        }).length > 0;
    };

    return InlineFlow;
});
/**
 * This module contains the logic specific to rendering the Klarna Payments inline widget.
 */
/*jshint camelcase: false */
define('module/integrations/KlarnaPaymentsInlineWidget',['require','jquery','module/InlineFlow','module/forms/PaymentForm','module/Generate','module/InternalRequestCommunication','module/Options','module/error/WidgetError','module/error/SessionError','module/logging/LoggerFactory','module/Wpwl'],function(require) {
    var $ = require('jquery');
    var InlineFlow = require('module/InlineFlow');
    var PaymentForm = require('module/forms/PaymentForm');
    var Generate = require('module/Generate');
    var InternalRequestCommunication = require('module/InternalRequestCommunication');
    var Options = require("module/Options");
    var WidgetError = require("module/error/WidgetError");
    var SessionError = require("module/error/SessionError");
    var LoggerFactory = require('module/logging/LoggerFactory');
    var logger = LoggerFactory.getLogger('KlarnaPaymentsInlineWidget');
    var Wpwl = require('module/Wpwl');

    var KlarnaPaymentsInlineWidget = {
        successCallbackUrl: null,
        failureCallbackUrl: null,
        parentDivClassSelector: null,
        paymentBrand: null,
        accountDiscoveryTxId: null
    };

    KlarnaPaymentsInlineWidget.isKlarnaBrand = function(brand) {
        return (brand === "KLARNA_PAYMENTS_PAYNOW" ||
                brand === "KLARNA_PAYMENTS_PAYLATER" ||
                brand === "KLARNA_PAYMENTS_SLICEIT");
    };

    KlarnaPaymentsInlineWidget.isKlarnaBrandAndInlineFlow = function() {
        return this.isKlarnaBrand(this.paymentBrand) &&
               InlineFlow.isInlineFlow(this.paymentBrand);
    };

    KlarnaPaymentsInlineWidget.getPaymentMethodCategory = function () {
        if (this.paymentBrand === "KLARNA_PAYMENTS_PAYNOW")
            return "pay_now";
        else if (this.paymentBrand === "KLARNA_PAYMENTS_PAYLATER")
            return "pay_later";
        else if (this.paymentBrand === "KLARNA_PAYMENTS_SLICEIT")
            return "pay_over_time";
    };

    KlarnaPaymentsInlineWidget.loadKlarnaPaymentsLibrary = function() {
        var script = "https://x.klarnacdn.net/kp/lib/v1/api.js";
        this.klarnaJsLoaded = $.getScript(script)
            .then(function (__, successStatus, jqXhr) {
                return jqXhr;
            });
        return this.klarnaJsLoaded;
    };

    KlarnaPaymentsInlineWidget.onBeforeSubmitVirtualAccountCheckInline = function (selectedPaymentForm) {
        this.formClassSelector = this.returnClassSelector($(selectedPaymentForm).attr('class'));
        var $form = $(this.formClassSelector);
        var paymentForm = new PaymentForm($form);
        this.paymentBrand = paymentForm.getBrand();

        if (this.isKlarnaBrandAndInlineFlow()) {
            // sometimes (in rare cases) in FF the offsetParent is missing so we fallback to parentElement
            var parent = selectedPaymentForm.offsetParent || selectedPaymentForm.parentElement;
            if (parent) {
                this.parentDivClassSelector = this.returnClassSelector($(parent).attr('class'));
                this.prepareFormAndCreatePendingTx($form);

            } else {
                this.parentDivClassSelector = "";
                logger.error('Cannot identify the parent widget div!');
                Options.onError(new WidgetError('KLARNA_PAYMENTS', 'cannot_insert_widget', 'Parent container undefined'));
            }

            return false;
        }
        return true;
    };

    KlarnaPaymentsInlineWidget.returnClassSelector = function (classList) {
        if (classList) {
            return "." + classList.replace(/\s/g, ".");
        }
        return "";
    };

    KlarnaPaymentsInlineWidget.removeExistingKlarnaElements = function () {
        //Removes any already existing Klarna div container in the page or any button div created for the submit button.
        //This is needed when the user changes the Klarna payment brand, if there are more brands presented, after
        //already clicking on one of them.
        var alreadyCreatedKlarnaContainer = document.getElementById("klarna-payments-container");
        if (alreadyCreatedKlarnaContainer) {
            removeElementFromPage(alreadyCreatedKlarnaContainer);
        }

        var alreadyCreatedKlarnaButtonDiv = document.querySelectorAll('[class^="wpwl-container-virtualAccountSubmitInline"]');
        if (alreadyCreatedKlarnaButtonDiv) {
            for (var i = 0; i < alreadyCreatedKlarnaButtonDiv.length; i++) {
                removeElementFromPage(alreadyCreatedKlarnaButtonDiv[i]);
            }
        }
    };

    // will bind the passed function to the current module.
    // useful to wrap function references that otherwise would be called in the global scope instead of this module
    function withModuleScope(fct) {
        if (typeof fct === "function") {
            return fct.bind(KlarnaPaymentsInlineWidget);
        }
    }

    KlarnaPaymentsInlineWidget.prepareFormAndCreatePendingTx = function($form) {
        $form.append($.parseHTML(Generate.generateInlineFlowHiddenCustomParam($form)));
        $form.append($.parseHTML(Generate.generateIsSourceBrowserHiddenParam($form)));

        logger.info("Klarna Payments inline workflow detected, submitting the form via an Ajax call.");

        //synchronization point between the klarna script download and when the OPP call that retrieves the session data is completed
        $.when(this.klarnaJsLoaded
                .fail(withModuleScope(function (e) {
                    logger.error("Klarna SDK was not downloaded: " + toLoggableValue(e));
                    Options.onError(new WidgetError("KLARNA_PAYMENTS", "sdk_not_downloaded", "Klarna SDK was not downloaded: " + toLoggableValue(e)));
                })),
            ajaxSubmitForm($form)
                .fail(function (reason) {
                    notifyError(reason, "createPendingTx");
                })
        ).then(withModuleScope(this.doOnPendingTxCreated));
    };

    KlarnaPaymentsInlineWidget.doOnPendingTxCreated = function (scriptLoadedStatus, createSessionResponse) {
        if (createSessionResponse) {
            this.successCallbackUrl = createSessionResponse.callbackUrl;
            this.failureCallbackUrl = createSessionResponse.failureCallbackUrl;
            if (createSessionResponse.additionalAttributes) {
                this.accountDiscoveryTxId = createSessionResponse.additionalAttributes.connectorId;
            }
            this.initializeAndLoadKlarnaWidget(createSessionResponse.clientToken);

        } else {
            logger.error("No create session response received, cannot proceed.");
            Options.onError(new WidgetError("KLARNA_PAYMENTS", "no_session", "No create session response received, cannot proceed."));
        }
    };

    //submit the form via an ajax call (this would call the opp payment endpoint)
    function ajaxSubmitForm($form) {
        return InternalRequestCommunication.getSender()
            .then(function (sender) {
                return sender.send({
                    url: $form.attr("action"),
                    method: $form.attr("method"),
                    headers: {
                        Accept: "application/json; charset=utf-8"
                    },
                    data: $form.serialize()
                });
            });
    }

    // Will transform an input to a value that can be written to a log statement. We do not need to
    // return a string always as raw types will be logged properly.
    function toLoggableValue(param) {
        if (typeof param === 'object') {
            // object toString will return [object Object] so we must stringify, but not errors which stringified return {}
            return (param instanceof Error) ? param.toString() : JSON.stringify(param);

        } else if (typeof param === 'function') {
            return param.toString();

        } else {
            return param;
        }
    }

    function notifyError(reason, source) {
        logger.error("Exception occurred while submitting the form from " + source + " via an Ajax call. Reason: " + toLoggableValue(reason));

        if (SessionError.isSessionTimeout(reason)) {
            SessionError.onTimeoutError();

        } else {
            Options.onError(new WidgetError("KLARNA_PAYMENTS", "ajax_submit_fail", "Exception occurred while submitting the form via an Ajax call. Reason: " + toLoggableValue(reason)));
        }
    }

    //add a div container at the end of our container, in which the Klarna widget will be loaded
    function createWidgetContainer(parentDivSelector, paymentBrand) {
        var parentDiv = $(parentDivSelector);
        parentDiv.append($.parseHTML(
                "<div id=\"klarna-payments-container\" class=\"wpwl-container-virtualAccountSubmitInline-" + paymentBrand + "\"></div>"));

        if (parentDiv.length === 0) {
            logger.error('Could not add the container for the widget as we cannot identify a parent! Selector: [' + parentDivSelector + ']');
            Options.onError(new WidgetError('KLARNA_PAYMENTS', 'cannot_insert_widget', 'Parent container not found! [' + parentDivSelector + ']'));
            throw new Error("Cannot create widget container");
        }
    }

    KlarnaPaymentsInlineWidget.initializeAndLoadKlarnaWidget = function (clientToken) {
        if (window.Klarna) {
            try {
                this.initializeKlarnaJsSDK(clientToken);
                this.removeExistingKlarnaElements();

                createWidgetContainer(this.parentDivClassSelector, this.paymentBrand);

                this.loadKlarnaJsSDK();
            }
            catch (e) {
                console.error('Could not initialize and load Klarna inline widget: ' + toLoggableValue(e));
            }

        } else {
            this.redirectToFailureOrOnError({
                logMessage: "Handling failure because the Klarna SDK was not downloaded.",
                onErrorEventName: 'sdk_not_downloaded'
            });
        }
    };

    KlarnaPaymentsInlineWidget.initializeKlarnaJsSDK = function (clientToken) {
        if (clientToken) {
            try {
                logger.info("Initializing the Klarna Payments JS SDK.");
                window.Klarna.Payments.init({
                    client_token: clientToken
                });
            } catch (e) {
                this.redirectToFailureOrOnError({
                    logMessage: "Handling failure because the Klarna SDK couldn't be initialized. " + toLoggableValue(e),
                    onErrorEventName: 'sdk_not_initialized'
                });
                throw e;
            }
        } else {
            logger.error("Calling failureCallbackUrl because the client token is not defined and the Klarna SDK couldn't be initialized.");
            this.redirectToFailureUrl();
            throw new Error('clientToken undefined');
        }
    };

    KlarnaPaymentsInlineWidget.loadKlarnaJsSDK = function () {
        try {
            logger.info("Loading the Klarna Payments inline widget.");
            window.Klarna.Payments.load({
                    container: '#klarna-payments-container',
                    payment_method_category: this.getPaymentMethodCategory()
                },
                withModuleScope(this.doOnKlarnaWidgetLoaded));

        } catch (e) {
            this.redirectToFailureOrOnError({
                logMessage: "Handling failure because an exception was thrown while loading the Klarna Payments inline widget: " + toLoggableValue(e),
                onErrorEventName: 'widget_not_rendered'
            });
            throw e;
        }
    };

    function createSubmitButtonParent(paymentBrand, parentSelector) {
        var divHtml = "<div id=\"button-klarna-div-" + paymentBrand + "\" class=\"wpwl-container-virtualAccountSubmitInline-" + paymentBrand + "\"></div>";
        $(parentSelector).append($.parseHTML(divHtml));
        return document.getElementById("button-klarna-div-" + paymentBrand);
    }

    function createSubmitButton() {
        var buttonObj = document.createElement("BUTTON");
        buttonObj.innerHTML = "SUBMIT";
        buttonObj.className = "wpwl-button wpwl-button-pay";
        buttonObj.onclick = function() {
            KlarnaPaymentsInlineWidget.authorizePaymentAndSubmit();
        };
        return buttonObj;
    }

    KlarnaPaymentsInlineWidget.doOnKlarnaWidgetLoaded = function (loadWidgetResponse) {
        if (loadWidgetResponse.show_form === true && !(loadWidgetResponse.error)) {
            try {
                var submitButtonParent = createSubmitButtonParent(this.paymentBrand, this.parentDivClassSelector);
                submitButtonParent.appendChild(createSubmitButton());
                Options.onReadyExternal({ externalBrand : this.paymentBrand, message : this.paymentBrand + " is loaded." });
            } catch (e) {
                logger.error('Cannot create the submit button because an error occurred! ' + toLoggableValue(e));
                throw e;
            }

        } else {
            var errorLog = "Handling failure because the widget was not loaded, Klarna replied with \'show_form\'=" +
                loadWidgetResponse.show_form + " and \'error\'=" + toLoggableValue(loadWidgetResponse.error) + ".";

            this.redirectToFailureOrOnError({
                logMessage: errorLog,
                onErrorEventName: 'auth_rejected'
            });
        }
    };

    KlarnaPaymentsInlineWidget.authorizePaymentAndSubmit = function () {
        if (this.isKlarnaBrandAndInlineFlow() && !this.accountDiscoveryTxId) {
            logger.error("Inline flow requires a successful AccountDiscovery transaction before the payment");
            return;
        }

        var $form = $(this.formClassSelector);
        $form.append($.parseHTML(Generate.generateSubmitPACustomParam($form, this.accountDiscoveryTxId)));

        ajaxSubmitForm($form)
            .then(withModuleScope(this.updateCallbackUrlsAfterPaymentAuthorized))
            .then(withModuleScope(this.getClientSideBillingShippingAddress))
            .then(withModuleScope(this.authorizePaymentOnKlarnaApi))
            .fail(function (reason) {
                notifyError(reason, "authorizePaymentAndSubmit");
            });
    };

    KlarnaPaymentsInlineWidget.updateCallbackUrlsAfterPaymentAuthorized = function(paymentResponse) {
        if (paymentResponse) {
            this.successCallbackUrl = paymentResponse.callbackUrl;

            // only update the failure callback if the auth was successful and we do receive a failure URL, otherwise
            // leave the original failure callback set on AD tx to handle correctly the failures.
            this.failureCallbackUrl = paymentResponse.failureCallbackUrl || this.failureCallbackUrl;

        } else {
            logger.error("No API response on payment submission.");
            Options.onError(new WidgetError("KLARNA_PAYMENTS", "no_session", "Payment submission unsuccessful."));
        }
    };

    KlarnaPaymentsInlineWidget.authorizePaymentOnKlarnaApi = function (clientSideBillingShipping) {
        if (this.successCallbackUrl) {
            logger.info('Calling authorize on Klarna Payments JS SDK.');
            try {
                window.Klarna.Payments.authorize({
                        payment_method_category: this.getPaymentMethodCategory()
                    },
                    clientSideBillingShipping,
                    withModuleScope(this.doOnKlarnaClientSideAuthorized));

            } catch (e) {
                logger.error("Klarna authorization error: " + toLoggableValue(e));
                Options.onError(new WidgetError("KLARNA_PAYMENTS", "auth_error", "Klarna authorization error: " + toLoggableValue(e)));
            }
        } else {
            logger.error("Calling failureCallback because successCallbackUrl is not defined, cannot complete the workflow.");
            this.redirectToFailureUrl();
        }
    };

    KlarnaPaymentsInlineWidget.doOnKlarnaClientSideAuthorized = function (authorizationResponse) {
        if (isKlarnaAuthValid(authorizationResponse)) {
            this.redirectToSuccessUrl(authorizationResponse.authorization_token);

        } else {
            var errorLog = "Handling failure because the authorization call failed, Klarna replied with \'approved\'=" + authorizationResponse.approved +
                " and \'show_form\'=" + authorizationResponse.show_form +
                " and \'error\'=" + toLoggableValue(authorizationResponse.error);

            if (isKlarnaAuthCancelledByUser(authorizationResponse)) {
                this.redirectToFailureOrOnError({
                    logMessage: errorLog,
                    onErrorEventName: 'closed',
                    errorReason: 'cancelledByUser',
                    errorMsg: ''
                });

            } else if (isKlarnaAuthDataError(authorizationResponse)) {
                logger.error(errorLog);
                this.redirectToFailureUrl("dataError", encodeURIComponent(JSON.stringify(authorizationResponse.error)));

            } else if (isKlarnaAuthDeclined(authorizationResponse)) {
                logger.error(errorLog);
                this.redirectToFailureUrl("transactionDeclined");

            } else {
                // the only possible error states according to klarna documentation are the ones handled above.
                logger.error(errorLog);
                this.redirectToFailureUrl("unspecifiedBehavior");
            }
        }
    };

    // Everything is good, Klarna approved the transaction so for us is successful as well
    function isKlarnaAuthValid(authorizationResponse) {
        return authorizationResponse.approved === true &&
            authorizationResponse.show_form === true &&
            !authorizationResponse.error;
    }

    // When Klarna needs extra data from the user but the user closes the Klarna window that collects the info.
    // Update>> what is important to know is that this method will return true if the user will complete the missing data
    // that klarna needs, but klarna rejects the data. In that case the transaction will still be marked as
    // cancelled by user even though he was technically rejected. I really have no idea how this can be fixed, as we
    // do not know what the user does on the data collection window from the klarna. So it seems that we either choose to
    // never register transactions as cancelled by user or if we choose to do so we assume the fact that sometimes these
    // transactions are in fact rejected by klarna because the data inserted in the window that collects data was invalid
    function isKlarnaAuthCancelledByUser(authorizationResponse) {
        return authorizationResponse.approved === false &&
            authorizationResponse.show_form === true &&
            !authorizationResponse.error;
    }

    // When klarna validation failed. In this case we cannot do anything in the current inline workflow as the data is
    // missing from the AD request. The missing data will have to be set outside the widget and the widget re-initialized
    function isKlarnaAuthDataError(authorizationResponse) {
        return authorizationResponse.approved === false &&
            authorizationResponse.show_form === true &&
            authorizationResponse.error;
    }

    // When auth and show_form are both false the error is not solvable, the transaction is denied and shopper will not
    // be able to finish the current purchase with Klarna
    function isKlarnaAuthDeclined(authorizationResponse) {
        return authorizationResponse.approved === false &&
            authorizationResponse.show_form === false;
    }

    KlarnaPaymentsInlineWidget.getClientSideBillingShippingAddress = function () {
        if (Wpwl.checkout.config.sendShippingBillingKlarnaClientSide && this.successCallbackUrl) {

            var checkoutDataUrl = Generate.string(Wpwl.url, "/v", Wpwl.apiVersion, "/checkouts/", Wpwl.checkout.id);
            return InternalRequestCommunication.getSender()
                .then(function (sender) {
                    return sender.send({
                        url: checkoutDataUrl,
                        method: "GET",
                        headers: {
                            Accept: "application/json; charset=utf-8"
                        }
                    });
                })
                .then(this.extractBillingAndShippingAddress);
        }
        return {};
    };

    KlarnaPaymentsInlineWidget.extractBillingAndShippingAddress = function (checkoutResponse) {
        return !checkoutResponse ? {} : {
            billing_address: toKlarnaBillingAddress(checkoutResponse),
            shipping_address: toKlarnaShippingAddress(checkoutResponse)
        };
    };

    function toKlarnaBillingAddress(checkoutResponse) {
        return {
            given_name: checkoutResponse.customer.givenName,
            family_name: checkoutResponse.customer.surname,
            email: checkoutResponse.customer.email,
            street_address: checkoutResponse.billingAddress.street1,
            street_address2: checkoutResponse.billingAddress.street2,
            postal_code: checkoutResponse.billingAddress.postcode,
            city: checkoutResponse.billingAddress.city,
            region: checkoutResponse.billingAddress.state,
            phone: checkoutResponse.customer.mobile || checkoutResponse.customer.phone || checkoutResponse.KLARNA_phone,
            country: checkoutResponse.billingAddress.country
        };
    }

    function toKlarnaShippingAddress(checkoutResponse) {
        return {
            given_name: checkoutResponse.shippingAddress.givenName || checkoutResponse.shippingAddress.customer.givenName,
            family_name: checkoutResponse.shippingAddress.surname || checkoutResponse.shippingAddress.customer.surname,
            email: checkoutResponse.shippingAddress.customer.email,
            street_address: [checkoutResponse.shippingAddress.street1, checkoutResponse.shippingAddress.street2].join(' '),
            street_address2: checkoutResponse.shippingAddress.street2,
            postal_code: checkoutResponse.shippingAddress.postcode,
            city: checkoutResponse.shippingAddress.city,
            region: checkoutResponse.shippingAddress.state,
            phone: checkoutResponse.shippingAddress.customer.mobile || checkoutResponse.shippingAddress.customer.phone,
            country: checkoutResponse.shippingAddress.country
        };
    }

    KlarnaPaymentsInlineWidget.redirectToSuccessUrl = function(authorizationToken) {
        this.successCallbackUrl = this.successCallbackUrl.replace("{{authorization_token}}", authorizationToken);
        logger.info("Authorization was successful, calling callbackUrl received in the create session response.");
        //create a hidden form, having as action the successCallbackUrl, which is submitted whenever the SUBMIT button is clicked
        this.redirectToUrl(this.successCallbackUrl);
    };

    KlarnaPaymentsInlineWidget.redirectToFailureOrOnError = function (errorData) {
        if (errorData.logMessage) {
            logger.error(errorData.logMessage);
        }
        if (Wpwl.checkout.config.workflowSpecificConfig.klarnaConfig.redirectIfWidgetCloses === false) {
            Options.onError(new WidgetError('KLARNA_PAYMENTS', errorData.onErrorEventName));
        } else {
            this.redirectToFailureUrl(errorData.errorReason, errorData.errorMsg);
        }
    };

    KlarnaPaymentsInlineWidget.redirectToFailureUrl = function (errorReason, errorMsg) {
        var actionUrl = this.failureCallbackUrl;
        if (errorReason) {
            actionUrl += "&reason=" + errorReason;
            if (errorMsg) {
                actionUrl += "&message=" + errorMsg;
            }
        }
        this.redirectToUrl(actionUrl);
    };

    KlarnaPaymentsInlineWidget.redirectToUrl = function(callbackUrl) {
        if (callbackUrl) {
            var formHtml = '<form id=\"klarnaInlineSubmitForm\" action=' + callbackUrl + ' lang=\"en\" accept-charset=\"UTF-8\"  method=POST target=\"_top\" ></form>';
            var submitForm = $(formHtml);
            $(this.parentDivClassSelector).append(submitForm);
            this.submitHiddenForm(submitForm);

        } else {
            logger.error("A transaction was already created. Cannot submit the hidden form, the success/failure callback url is not defined.");
            Options.onError(new WidgetError("KLARNA_PAYMENTS", "callback_not_def", "A transaction was already created. Cannot submit the hidden form, the success/failure callback url is not defined."));
        }
    };

    KlarnaPaymentsInlineWidget.submitHiddenForm = function(form) {
        // We must flush the logger otherwise all the logs that were already added to logger queue since the last flush
        // could be lost once the form is submitted. And once we submit it we do not care of any other log.
        try {
            LoggerFactory.flush();
        } catch (e) {
            console.error('Logger.flush: ' + toLoggableValue(e));
        }

        form.submit();
    };

    function removeElementFromPage(element) {
        // Create the Element.remove() function if it does not exist (for example, on IE11)
        if (!('remove' in Element.prototype)) {
            Element.prototype.remove = function() {
                if (this.parentNode) {
                    this.parentNode.removeChild(this);
                }
            };
        }
        element.remove();
    }

    return KlarnaPaymentsInlineWidget;
});

/**
 * This module contains the logic specific to rendering the Yandex Checkout inline widget.
 */
/*jshint camelcase: false */
define('module/integrations/YandexCheckoutPaymentWidget',['require','jquery','module/forms/PaymentForm','module/Generate','module/InternalRequestCommunication','module/Options','module/error/WidgetError','module/error/SessionError','module/logging/LoggerFactory','lib/Spinner'],function (require) {
    var GENERAL_ERROR_CODE = "internal_service_error";
    var WIDGET_INIT_ERRORS = {
        "token_required": "Token not sent.",
        "invalid_token": "Invalid token.",
        "token_expired": "Token has expired.",
        "return_url_required": "Return URL not specified.",
        GENERAL_ERROR_CODE: "Error during payment creation."
    };

    var $ = require('jquery');
    var PaymentForm = require('module/forms/PaymentForm');
    var Generate = require('module/Generate');
    var InternalRequestCommunication = require('module/InternalRequestCommunication');
    var Options = require("module/Options");
    var WidgetError = require("module/error/WidgetError");
    var SessionError = require("module/error/SessionError");
    var LoggerFactory = require('module/logging/LoggerFactory');
    var Spinner = require('lib/Spinner');
    var logger = LoggerFactory.getLogger('YandexCheckoutPaymentWidget');

    var YandexCheckoutPaymentWidget = {};

    YandexCheckoutPaymentWidget.parentDivClassSelector = null;
    YandexCheckoutPaymentWidget.paymentBrand = null;
    YandexCheckoutPaymentWidget.scriptLoadedStatus = null;
    YandexCheckoutPaymentWidget.form = null;


    // Step 1. Enable the script from CDN. The library will be available in the global scope (window) under YandexCheckout.
    YandexCheckoutPaymentWidget.loadYandexCheckoutPaymentsLibrary = function () {
        var script = "https://yookassa.ru/checkout-widget/v1/checkout-widget.js";
        YandexCheckoutPaymentWidget.scriptLoadedStatus = $.getScript(script)
            .then(function (__, successStatus, jqXhr) {
                //successStatus is always = success
                //jqXhr.status is always = 200
                logger.info("Yandex.Checkout script download finished. " +
                    "StatusCode: " + getHttpStatusAsLogSafe(jqXhr.status) + " StatusText: " + jqXhr.statusText);
                return jqXhr.statusText;
            });
        return YandexCheckoutPaymentWidget.scriptLoadedStatus;
    };


    // Step 2. verify the brand
    YandexCheckoutPaymentWidget.isYandexCheckoutBrand = function (brand) {
        return (brand === "YANDEX_CHECKOUT");
    };


    // Step 3. Button click by user
    YandexCheckoutPaymentWidget.onBeforeSubmitVirtualAccount = function (selectedPaymentForm) {

        var formClassSelector = YandexCheckoutPaymentWidget.returnClassSelector($(selectedPaymentForm).attr('class'));
        var form = $(formClassSelector);
        var paymentForm = new PaymentForm(form);
        YandexCheckoutPaymentWidget.paymentBrand = paymentForm.getBrand();
        YandexCheckoutPaymentWidget.form = form;

        if (YandexCheckoutPaymentWidget.isYandexCheckoutBrand(YandexCheckoutPaymentWidget.paymentBrand)) {
            if (selectedPaymentForm.offsetParent) {
                this.parentDivClassSelector = YandexCheckoutPaymentWidget.returnClassSelector($(selectedPaymentForm.offsetParent).attr('class'));
            } else {
                this.parentDivClassSelector = "";
            }
            YandexCheckoutPaymentWidget.sendPaymentRequestAndRenderYandexWidget(form);
            return false;
        }
        return true;
    };

    YandexCheckoutPaymentWidget.returnClassSelector = function (classList) {
        if (classList) {
            return "." + classList.replace(/\s/g, ".");
        }
        return "";
    };

    YandexCheckoutPaymentWidget.createTransaction = function ($form) {
        var endpointUrl = $form.attr("action");
        var formMethod = $form.attr("method");
        var formData = $form.serialize();

        return InternalRequestCommunication.getSender()
            .then(function (sender) {
                return sender.send({
                    url: endpointUrl,
                    method: formMethod,
                    headers: {
                        Accept: "application/json; charset=utf-8"
                    },
                    data: formData
                });
            });
    };

    // Step 4. Send request to opp and get details needed to render the widget
    YandexCheckoutPaymentWidget.sendPaymentRequestAndRenderYandexWidget = function ($form) {

        logger.info("User clicked Yandex.Checkout button.");
        var spinner = new Spinner(Options.spinner).spin($(".wpwl-container-virtualAccount-YANDEX_CHECKOUT").get(0));
        disablePayButton(true);

        $form.append($.parseHTML(Generate.generateInlineFlowHiddenCustomParam($form)));
        $form.append($.parseHTML(Generate.generateIsSourceBrowserHiddenParam($form)));

        $.when(YandexCheckoutPaymentWidget.scriptLoadedStatus, YandexCheckoutPaymentWidget.createTransaction($form))
            .then(function (jqXhrStatus, createSessionResponse) {

                spinner.stop();

                if (createSessionResponse) {

                    var isSimulation = false;
                    if (createSessionResponse.redirect && createSessionResponse.redirect.parameters) {

                        //used solely for the .find() method call below due to lack of ES6
                        var getSimParam = function (param) {
                            return param.name === "isSimulation";
                        };

                        var simParam = createSessionResponse.redirect.parameters.find(getSimParam);
                        if (simParam && simParam.value === "true") {
                            isSimulation = true;
                        }
                    }

                    //check if this a request for accessing the simulator
                    if (isSimulation === true) {

                         if (createSessionResponse.redirect.shortUrl) {
                             YandexCheckoutPaymentWidget.doRedirect(createSessionResponse.redirect.shortUrl);
                         }
                    } else {
                        var successCallbackUrl = createSessionResponse.callbackUrl;
                        var confirmationToken = createSessionResponse.confirmationToken;

                        var requestNotSuccessful = !confirmationToken || confirmationToken === "";
                        if (requestNotSuccessful) {
                            logger.error("No confirmation token for widget rendering, cannot proceed.");
                            Options.onError(new WidgetError("YANDEX_CHECKOUT", "no_session", "No confirmation token for widget rendering, cannot proceed."));
                            return;
                        }
                        try {
                            YandexCheckoutPaymentWidget.initializeAndLoadYandexCheckoutWidget(confirmationToken, successCallbackUrl);
                        } catch (e) {
                            logger.error("Exception was thrown while initializing/loading the YandexCheckout widget: " + e);
                            Options.onError(new WidgetError("YANDEX_CHECKOUT", "no_session", "Exception was thrown while initializing/loading the YandexCheckout widget: " + e));
                        }
                    }
                } else {
                    logger.error("No create session response received, cannot proceed.");
                    Options.onError(new WidgetError("YANDEX_CHECKOUT", "no_session", "No create session response received, cannot proceed."));
                }

                disablePayButton(false);
            })
            .fail(function (failureObject) {

                // failureObject can be either a jqXhr if something goes wrong with the script download or an oppResponse
                // errorStatusText, second parameter, is always = error. It was not defined, we don't need it
                // disablePayButton(false);
                spinner.stop();

                // oppResponse contains responseText
                if (failureObject.responseText) {
                    logger.error("Exception occurred while creating the transaction." +
                        " Reason: " + (JSON ? JSON.stringify(failureObject) : failureObject.statusText));
                    notifyError(failureObject);
                } else {
                    logger.error("Failed to download the script from yandex. " +
                        "StatusCode: " + getHttpStatusAsLogSafe(failureObject.status) + " StatusText: " + failureObject.statusText);
                }
            });
    };

    // in opp, numbers of 3 digits (like HTTP statuses) are masked, we need to escape and return a string
    // if we divide the number by 100, from 404 we translate to 4.04, which is acceptable
    function getHttpStatusAsLogSafe(statusCode) {
        return "" + (statusCode / 100);
    }

    function notifyError(failureObject) {

        if (SessionError.isSessionTimeout(failureObject)) {
            SessionError.onTimeoutError();
        } else {
            Options.onError(new WidgetError("YANDEX_CHECKOUT", "ajax_submit_fail", "Exception occurred while submitting the form via an Ajax call. Reason: " + failureObject));
        }
    }


    //Step 3. Add the HTML element that will be used as a container of the payment form. Set the id attribute for this element.

    YandexCheckoutPaymentWidget.removeElementFromPage = function (element) {
        // Create the Element.remove() function if it does not exist (for example, on IE11)
        if (!('remove' in Element.prototype)) {
            Element.prototype.remove = function () {
                if (this.parentNode) {
                    this.parentNode.removeChild(this);
                }
            };
        }
        element.remove();
    };

    YandexCheckoutPaymentWidget.removeExistingYandexCheckoutElements = function () {
        //Removes any already existing YandexCheckout div container in the page or any button div created for the submit button.
        //This is needed when the user changes the YandexCheckout payment brand, if there are more brands presented, after
        //already clicking on one of them.
        var alreadyCreatedYandexCheckoutContainer = document.getElementById("yandex-payments-container");
        if (alreadyCreatedYandexCheckoutContainer) {
            YandexCheckoutPaymentWidget.removeElementFromPage(alreadyCreatedYandexCheckoutContainer);
        }

        var alreadyCreatedYandexCheckoutButtonDiv = document.querySelectorAll('.wpwl-form-virtualAccount-YANDEX_CHECKOUT');
        if (alreadyCreatedYandexCheckoutButtonDiv) {
            for (var i = 0; i < alreadyCreatedYandexCheckoutButtonDiv.length; i++) {
                YandexCheckoutPaymentWidget.removeElementFromPage(alreadyCreatedYandexCheckoutButtonDiv[i]);
            }
        }
    };

    YandexCheckoutPaymentWidget.addHtmlContainer = function () {
        YandexCheckoutPaymentWidget.removeExistingYandexCheckoutElements();

        //add a div container at the end of our container, in which the YandexCheckout widget will be loaded
        $(this.parentDivClassSelector).append($.parseHTML("<div id=\"yandexcheckout-payments-container\" class=\"wpwl-form-virtualAccount-" + YandexCheckoutPaymentWidget.paymentBrand + "\"></div>"));
    };


    //Step 5. To initialize the widget, create a new YandexCheckout class instance with confirmation_token
    //that you need to obtain from Yandex.Checkout while preparing the payment, return_url for redirecting the user
    // after the payment has completed and error_callback as the error handler function that will be called with
    // the error code, if something goes wrong on the yandex widget
    YandexCheckoutPaymentWidget.initializeAndLoadYandexCheckoutWidget = function (confirmation_token, return_url) {
        // this does not exist if the script from yandex did not download correctly
        if (window.YooMoneyCheckoutWidget) {

            YandexCheckoutPaymentWidget.addHtmlContainer();
            var checkout = YandexCheckoutPaymentWidget.getYooMoneyCheckoutWidget(confirmation_token, return_url);
            logger.info("Yandex.Checkout button was rendered");

            checkout.render('yandexcheckout-payments-container')
                .then(function () {
                    //Code that must be executed after the payment form is displayed.
                    Options.onReadyExternal({ externalBrand : YandexCheckoutPaymentWidget.paymentBrand, message : YandexCheckoutPaymentWidget.paymentBrand + " is loaded." });
                });
        } else {
            logger.error("The YandexCheckout window could not be initialized because the script from their side failed to load. Verify step 1.");
            Options.onError(new WidgetError("YANDEX_CHECKOUT", "script_not_initialized", "The script from yandex could not initialize correctly. Please retry."));
        }
    };

    YandexCheckoutPaymentWidget.getYooMoneyCheckoutWidget = function (confirmation_token, return_url) {
        return new window.YooMoneyCheckoutWidget({
                        confirmation_token: confirmation_token, //Token that must be obtained from Yandex.Checkout while preparing the payment
                        return_url: return_url, //URL to the payment completion page
                        error_callback: function (error) {
                            var errorCode = (!error || !error.error) ? GENERAL_ERROR_CODE : error.error;
                            //Processing of initialization errors
                            logger.error("YandexCheckout error_callback. Generated Error Code: " + errorCode + ". Error object:" + JSON.stringify(error));
                            Options.onError(new WidgetError("YANDEX_CHECKOUT", errorCode, WIDGET_INIT_ERRORS[errorCode]));
                        }
                    });
    };

    YandexCheckoutPaymentWidget.submitHiddenForm = function (form) {
        form.submit();
    };

    YandexCheckoutPaymentWidget.doRedirect = function(url){
            var $submitForm = $("<form/>", {
                action: url,
                method: "GET"
            });
            YandexCheckoutPaymentWidget.form.before($submitForm);
            $submitForm.submit();
        };

    function disablePayButton(status) {
        $(".wpwl-button-brand").prop("disabled", status);
    }


    return YandexCheckoutPaymentWidget;
});
/**
 * This module contains the logic specific to rendering the AfterPay Pacific widget.
 */
/*jshint camelcase: false */
define('module/integrations/AfterPayPacificPaymentWidget',['require','jquery','module/InlineFlow','module/forms/PaymentForm','module/Generate','module/InternalRequestCommunication','module/Options','module/error/WidgetError','module/error/SessionError','module/logging/LoggerFactory','lib/Spinner'],function(require) {
    var $ = require('jquery');
    var InlineFlow = require('module/InlineFlow');
    var PaymentForm = require('module/forms/PaymentForm');
    var Generate = require('module/Generate');
    var InternalRequestCommunication = require('module/InternalRequestCommunication');
    var Options = require("module/Options");
    var WidgetError = require("module/error/WidgetError");
    var SessionError = require("module/error/SessionError");
    var LoggerFactory = require('module/logging/LoggerFactory');
    var Spinner = require('lib/Spinner');
    var logger = LoggerFactory.getLogger('AfterPayPacificPaymentWidget');

    var AfterPayPacificPaymentWidget = {};

    AfterPayPacificPaymentWidget.paymentBrand = null;

    AfterPayPacificPaymentWidget.loadAfterPayPacificPaymentsLibrary = function(isTestSystem) {
        var script = isTestSystem ?
            "https://portal.sandbox.afterpay.com/afterpay.js" :
            "https://portal.afterpay.com/afterpay.js";
        return $.getScript(script);
    };

    AfterPayPacificPaymentWidget.isAfterPayPacificBrand = function(brand) {
        return (brand === "AFTERPAY_PACIFIC");
    };

    AfterPayPacificPaymentWidget.onBeforeSubmitVirtualAccount = function(selectedPaymentForm) {
        var formClassSelector = AfterPayPacificPaymentWidget.returnClassSelector($(selectedPaymentForm).attr('class'));
        var $form = $(formClassSelector);
        var paymentForm = new PaymentForm($form);

        this.paymentBrand = paymentForm.getBrand();

        if (AfterPayPacificPaymentWidget.isAfterPayPacificBrand(this.paymentBrand)) {

            AfterPayPacificPaymentWidget.prepareFormAndSendTx($form);

            return false;
        }

        return true;
    };

    AfterPayPacificPaymentWidget.returnClassSelector = function(classList) {
        if (classList) {
            return "." + classList.replace(/\s/g, ".");
        }

        return "";
    };

    AfterPayPacificPaymentWidget.prepareFormAndSendTx = function($form) {
        var spinner = new Spinner(Options.spinner).spin($(".wpwl-container-virtualAccount-AFTERPAY_PACIFIC").get(0));
        setPayButtonDisabledStatus(true);

        $form.append($.parseHTML(Generate.generateIsSourceBrowserHiddenParam($form)));
        if (InlineFlow.isInlineFlow(this.paymentBrand)) {
            $form.append($.parseHTML(Generate.generateInlineFlowHiddenCustomParam($form)));
        }

        //submit the form via an ajax call (this would call the opp payment endpoint)
        InternalRequestCommunication.getSender()
        .then(function(sender) {
            return sender.send({
                url: $form.attr("action"),
                method: $form.attr("method"),
                headers: {
                    Accept: "application/json; charset=utf-8"
                },
                data: $form.serialize()
            });
        })
        .then(function(createSessionResponse) {
            spinner.stop();

            if (createSessionResponse) {
                if (createSessionResponse.clientToken) {

                    AfterPayPacificPaymentWidget.initializeAndLoadAfterPayPacificWidget({
                        token: createSessionResponse.clientToken,
                        countryCode: createSessionResponse.region,
                        successCallbackUrl: createSessionResponse.callbackUrl,
                        failureCallbackUrl: createSessionResponse.failureCallbackUrl
                    });

                } else {
                    logger.error("No token for widget rendering, cannot proceed.");
                    Options.onError(new WidgetError("AFTERPAY_PACIFIC", "no_token", "No token for widget rendering, cannot proceed."));
                }
            } else {
                logger.error("No create session response received, cannot proceed.");
                Options.onError(new WidgetError("AFTERPAY_PACIFIC", "no_session", "No create session response received, cannot proceed."));
            }

            setPayButtonDisabledStatus(false);
        })
        .fail(function(reason) {
            spinner.stop();
            setPayButtonDisabledStatus(false);

            notifyError(reason);
        });
    };

    function notifyError(reason) {
        logger.error("Exception occurred while submitting the form via an Ajax call. Reason: " + reason);

        if (SessionError.isSessionTimeout(reason)) {
            SessionError.onTimeoutError();
        } else {
            Options.onError(new WidgetError("AFTERPAY_PACIFIC", "ajax_submit_fail", "Exception occurred while submitting the form via an Ajax call. Reason: " + reason));
        }
    }

    AfterPayPacificPaymentWidget.initializeAndLoadAfterPayPacificWidget = function(params) {
        var AfterPay = window.AfterPay;

        if (AfterPay) {
            try {
                AfterPay.initialize({
                    countryCode: params.countryCode
                });

                if (InlineFlow.isInlineFlow(this.paymentBrand)) {

                    AfterPay.open();

                    // If you don't already have an order token at this point, you can
                    // AJAX to your backend to retrieve one here. The spinning animation
                    // will continue until `AfterPay.transfer` is called.
                    AfterPay.onComplete = function(event) {
                        console.log("Received event: " + JSON.stringify(event));

                        if (event.data.status === 'SUCCESS') {
                            // The customer confirmed the payment schedule.
                            // The token is now ready to be captured from your server backend.
                            redirectBrowserTo(params.successCallbackUrl);
                        } else {
                            // The customer cancelled the payment or closed the popup window.
                            redirectBrowserTo(params.failureCallbackUrl);
                        }
                    };

                    AfterPay.transfer({
                      token: params.token,
                    });

                } else {
                    AfterPay.redirect({
                        token: params.token
                    });
                }

            } catch (e) {
                logger.error("An exception was thrown while initializing/loading the AfterPay Pacific widget: " + e);
                Options.onError(new WidgetError("AFTERPAY_PACIFIC", "after_pay_error", "Exception was thrown while initializing/loading the AfterPay Pacific widget: " + e));
            }

        } else {
            logger.error("The AfterPay Pacific widget could not be initialized because the script from their side failed to load.");
            Options.onError(new WidgetError("AFTERPAY_PACIFIC", "script_not_initialized", "The script could not initialize correctly from AfterPay Pacific side. Please retry."));
        }
    };

    function redirectBrowserTo(url) {
        window.top.location.assign(url);
    }

    function setPayButtonDisabledStatus(disabled) {
        $(".wpwl-button-brand").prop("disabled", disabled);
    }

    return AfterPayPacificPaymentWidget;
});
/**
 * This module contains the logic specific for Bancontact Mobile Payment brand i.e., BANCONTACT_QR and BANCONTACT_LINK
 * This is used to load QR in iframe for BANCONTACT_QR brand.
 * This is used to redirect customer to PP page where customer will get the option to open Bancontact mobile application
 * for BANCONTACT_LINK brand.
 */
/*jshint camelcase: false */
define('module/integrations/BancontactMobilePaymentWidget',['require','jquery','module/forms/PaymentForm','module/InternalRequestCommunication','module/Options','module/error/WidgetError','module/error/SessionError','module/logging/LoggerFactory','lib/Spinner'],function(require) {
    var $ = require('jquery');
    var PaymentForm = require('module/forms/PaymentForm');
    var InternalRequestCommunication = require('module/InternalRequestCommunication');
    var Options = require("module/Options");
    var WidgetError = require("module/error/WidgetError");
    var SessionError = require("module/error/SessionError");
    var LoggerFactory = require('module/logging/LoggerFactory');
    var logger = LoggerFactory.getLogger('BancontactMobilePaymentWidget');
    var Spinner = require('lib/Spinner');
    var BancontactMobilePaymentWidget = {};

    BancontactMobilePaymentWidget.parentDivClassSelector = null;
    BancontactMobilePaymentWidget.paymentBrand = null;

    BancontactMobilePaymentWidget.isBancontactMobilePaymentBrand = function(brand) {
        return BancontactMobilePaymentWidget.isBancontactLinkBrand(brand) || BancontactMobilePaymentWidget.isBancontactQRBrand(brand);
    };

    BancontactMobilePaymentWidget.isBancontactLinkBrand = function(brand) {
        return brand === "BANCONTACT_LINK";
    };

    BancontactMobilePaymentWidget.isBancontactQRBrand = function(brand) {
        return brand === "BANCONTACT_QR";
    };

    BancontactMobilePaymentWidget.authorizePaymentAndLoadData = function(selectedPaymentForm) {
        var formClassSelector = BancontactMobilePaymentWidget.returnClassSelector($(selectedPaymentForm).attr('class'));
        var form = $(formClassSelector);
        var paymentForm = new PaymentForm(form);
        this.paymentBrand = paymentForm.getBrand();

        if (selectedPaymentForm.offsetParent){
            this.parentDivClassSelector = BancontactMobilePaymentWidget.returnClassSelector($(selectedPaymentForm.offsetParent).attr('class'));
        } else {
            this.parentDivClassSelector = "";
        }

        if (BancontactMobilePaymentWidget.isBancontactMobilePaymentBrand(this.paymentBrand)) {
            BancontactMobilePaymentWidget.prepareAndSendTransaction(form, selectedPaymentForm, this.paymentBrand);
            return false;
        }
        return true;
    };

    BancontactMobilePaymentWidget.returnClassSelector = function(classList){
        if(classList) {
            return "." + classList.replace(/\s/g, ".");
        } else {
            return "";
        }
    };

    /** Submits form and checks that required parameters are received in response.
    * Calls respective functions for BANCONTACT_QR to load QR and BANCONTACT_LINK to redirect to Bancontact Mobile App.
    */
    BancontactMobilePaymentWidget.prepareAndSendTransaction = function(form, selectedPaymentForm, brand) {
        // show spinner
        var $formContainer = form.parent();
        var spinner = new Spinner(Options.spinner).spin($formContainer.get(0));

        ajaxSubmitForm(form)
        .then(function(createSessionResponse) {
            spinner.stop();
            if (createSessionResponse && createSessionResponse.redirect && createSessionResponse.redirect.parameters) {
                if (BancontactMobilePaymentWidget.isBancontactQRBrand(brand)) {
                    BancontactMobilePaymentWidget.submitFormAndLoadQR(selectedPaymentForm, createSessionResponse);
                } else if (BancontactMobilePaymentWidget.isBancontactLinkBrand(brand)) {
                    BancontactMobilePaymentWidget.redirectToApp(selectedPaymentForm, createSessionResponse);
                }
            } else {
                logger.error("No create session response received, cannot proceed.");
                Options.onError(new WidgetError("Bancontact Mobile Payment brand", "no_session", "No create session response received, cannot proceed."));
            }
        })
        .fail(function(reason) {
            notifyError(reason);
        });
    };

    /** Submit hidden form to payment.link and load QR in the existing BANCONTACT_QR iframe. */
    BancontactMobilePaymentWidget.submitFormAndLoadQR = function(selectedPaymentForm, createSessionResponse) {
        var getTxId = function (param) {
            return param.name === "txId";
        };
        var getQrCode = function (param) {
            return param.name === "qrCode";
        };
        var paymentLink = createSessionResponse.redirect.url;
        var txId = createSessionResponse.redirect.parameters.find(getTxId);
        var qrCode = createSessionResponse.redirect.parameters.find(getQrCode);

        // check that request is successful and received required parameters in response
        var requestNotSuccessful = !paymentLink || paymentLink === "" || !txId || txId === "" || !qrCode || qrCode === "";
        if (requestNotSuccessful) {
            logger.error("No payment link or parameters found for redirection, cannot proceed.");
            Options.onError(new WidgetError("BANCONTACT_QR", "no_session", "No payment link or parameters found for redirection, cannot proceed."));
            return;
        }

        // using the existing iframe for BANCONTACT_QR and removing wpwl-target class to have specified height as QR will be of height 250px
        var dim = Options.bancontactQr;
        var iframe = document.querySelectorAll('[name^="virtualAccount-BANCONTACT_QR_"]')[0];
        iframe.setAttribute("style", "display:inline");
        iframe.setAttribute("width", dim.width);
        iframe.setAttribute("height", dim.height);
        iframe.setAttribute("class", "");

        // create form and submit POST request to payment.link with all the received input parameters
        if(paymentLink) {
            this.submitHiddenForm(createSessionResponse, iframe.name);
        } else {
            logger.error("A transaction was already created. Cannot submit the hidden form, the success/failure callback url is not defined.");
            Options.onError(new WidgetError("BANCONTACT_QR", "callback_not_def", "A transaction was already created. Cannot submit the hidden form, the success/failure callback url is not defined."));
        }
    };

    /** Submit hidden form to payment.link in iframe and PP will handle redirection to Bancontact Mobile App. */
    BancontactMobilePaymentWidget.redirectToApp = function(selectedPaymentForm, createSessionResponse) {
        var getSecureTxId = function (param) {
            return param.name === "txId";
        };
        var appLink = createSessionResponse.redirect.url;
        var secureTxId = createSessionResponse.redirect.parameters.find(getSecureTxId);

        // check that request is successful and received required parameters in response
        var requestUnSuccessful = !appLink || appLink === "" || !secureTxId || secureTxId === "";
        if (requestUnSuccessful) {
            logger.error("No app link or parameter found for redirection, cannot proceed.");
            Options.onError(new WidgetError("BANCONTACT_LINK", "no_session", "No app link or parameter found for redirection, cannot proceed."));
            return;
        }

        // create form and submit POST request to payment.link with all the received input parameter
        if (appLink) {
            this.submitHiddenForm(createSessionResponse, "_top");
        } else {
            logger.error("A transaction was already created. Cannot submit the hidden form, the success/failure callback url is not defined.");
            Options.onError(new WidgetError("BANCONTACT_LINK", "callback_not_def", "A transaction was already created. Cannot submit the hidden form, the success/failure callback url is not defined."));
        }
    };

    /** Form needs to add in the parent division otherwise we see "Form submission canceled because the form is not connected" error and form doesn't submit */
    BancontactMobilePaymentWidget.submitHiddenForm = function(createSessionResponse, target) {
        var params = createSessionResponse.redirect.parameters;
        var i;
        var inputParam="";
        for (i=0; i< params.length; i++) {
            inputParam = inputParam + '<input name=\"' + params[i].name + '\" type=\"hidden\" value=\"' + params[i].value + '\">';
        }
        var formHtml = '<form id=\"bancontactForm\" action=' + createSessionResponse.redirect.url + ' lang=\"en\" accept-charset=\"UTF-8\"  method=POST target=\"' + target + '\">' + inputParam + '</form>';
        var submitForm = $(formHtml);
        $(this.parentDivClassSelector).append(submitForm);
        submitForm.submit();
    };

    // submit the form via an ajax call (this would call the opp payment endpoint)
    function ajaxSubmitForm(form) {
        var endpointUrl = form.attr("action");
        var formMethod = form.attr("method");
        var formData = form.serialize();
        return InternalRequestCommunication.getSender()
        .then(function(sender) {
            return sender.send({
                url: endpointUrl,
                method: formMethod,
                headers: {
                    Accept: "application/json; charset=utf-8"
                },
                data: formData
            });
        });
    }

    function notifyError(reason) {
        logger.error("Exception occurred while submitting the form via an Ajax call. Reason: " + reason);
        if (SessionError.isSessionTimeout(reason)) {
            SessionError.onTimeoutError();
        } else {
            Options.onError(new WidgetError("Bancontact Mobile Payment brand", "ajax_submit_fail", "Exception occurred while submitting the form via an Ajax call. Reason: " + reason));
        }
    }

    return BancontactMobilePaymentWidget;
});
/*jshint camelcase: false */
/*global MasterPass*/
define('module/Payment',['require','jquery','module/forms/BankAccountPaymentForm','module/forms/CardPaymentForm','module/forms/VirtualAccountPaymentForm','module/Generate','module/Options','module/Locale','module/Parameter','module/Setting','lib/Spinner','module/StyleLoader','module/PaymentView','module/forms/PaymentForm','module/ParentToIframeCommunication','module/State','module/Tracking','module/Util','module/Validate','module/WpwlOptions','module/Wpwl','module/AutoFocus','module/ApplePay','module/integrations/KlarnaPaymentsInlineWidget','module/integrations/YandexCheckoutPaymentWidget','module/integrations/AfterPayPacificPaymentWidget','module/integrations/BancontactMobilePaymentWidget','module/logging/LoggerFactory'],function(require) {
	var $ = require('jquery');
	var BankAccountPaymentForm = require('module/forms/BankAccountPaymentForm');
	var CardPaymentForm = require('module/forms/CardPaymentForm');
	var VirtualAccountPaymentForm = require('module/forms/VirtualAccountPaymentForm');
	var Generate = require('module/Generate');
	var Options = require('module/Options');
	var Locale = require('module/Locale');
	var Parameter = require('module/Parameter');
	var Setting = require('module/Setting');
	var Spinner = require('lib/Spinner');
	var StyleLoader = require('module/StyleLoader');
	var PaymentView = require('module/PaymentView');
	var PaymentForm = require('module/forms/PaymentForm');
	var ParentToIframeCommunication = require('module/ParentToIframeCommunication');
	var State = require('module/State');
	var Tracking = require("module/Tracking");
	var Util = require('module/Util');
	var Validate = require('module/Validate');
	var WpwlOptions = require('module/WpwlOptions');
	var Wpwl = require('module/Wpwl');
	var AutoFocus = require('module/AutoFocus');
	var ApplePay = require('module/ApplePay');
	var KlarnaPaymentsInlineWidget = require('module/integrations/KlarnaPaymentsInlineWidget');
    var YandexCheckoutPaymentWidget = require('module/integrations/YandexCheckoutPaymentWidget');
	var AfterPayPacificPaymentWidget = require('module/integrations/AfterPayPacificPaymentWidget');
	var BancontactMobilePaymentWidget = require('module/integrations/BancontactMobilePaymentWidget');
	var LoggerFactory = require('module/logging/LoggerFactory');
    var logger = LoggerFactory.getLogger('Payment');
	var HAS_ERROR_CLASS = "wpwl-has-error";
	var ENTER_KEY = 13;

	var Payment = {};
	
	Payment.preparePaymentFormData = [];
	Payment.preparePaymentFormEnabled = false;



	Payment.initPayment = function() {
		Payment.style = Options.style;
		Payment.locale = Locale.language;
		Payment.validation = Options.validation;
		Payment.checkoutId = Wpwl.checkout.id;
		Payment.url = Wpwl.url;
	    Payment.cacheVersion = Wpwl.cacheVersion;
		Payment.apiVersion = Wpwl.apiVersion;
		Payment.minified = Wpwl.minified;

        Payment.logBasicInfo();
		Payment.initPciCompliance();
		
		Payment.initAliRiskDF(Wpwl.checkout.config.workflowSpecificConfig.aliRiskConfig);
		Payment.initKount(Wpwl.checkout.config.workflowSpecificConfig.kountConfig);
		Payment.initCyberSourceRiskConfig(Wpwl.checkout.config.workflowSpecificConfig.cyberSourceRiskManagementConfig);
		Payment.initForter(Wpwl.checkout.config.workflowSpecificConfig.forterConfig);

		//default values
		Payment.style = Payment.style === undefined ? "none" : Payment.style;
		if ("none" === Payment.style) {
		    Payment.style = "critical";
		}
		Payment.validation = Payment.validation === undefined ? true : Payment.validation;
		//Payment.readable = Wpwl.readable;

		Payment.endPoint = Generate.string(Payment.url, "/v", Payment.apiVersion + "/checkouts/", Payment.checkoutId, Wpwl.endPoint);
					
		Payment.initListeners();
	};

	Payment.logBasicInfo = function(){
	    logger.info("User-agent: " + navigator.userAgent);
	    if(JSON && JSON.stringify){
	        logger.info("WpwlOptions: " + JSON.stringify(WpwlOptions));
	    }else{
	        logger.info("Could not get wpwlOptions because of lack of stringify");
	    }
	};

	Payment.initPciCompliance = function(){
		State.pciIframeCommunicationReady = false;
	};
	
	Payment.initAliRiskDF = function(settings){
        if (Util.isNullOrUndefined(settings) || !settings.active) return;
        
        Payment.aliRiskActive = true;

        var params = settings.aliRiskParameters;
        window.MERCHANT_USER_ID = params.merchantUserId || "";
        window.MERCHANT_SESSION_ID = params.merchantSessionId || "";
        window.EBUCKLER_API_KEY = params.ebucklerApiKey || "";
        window.CLIENT_APP_NAME = params.clientAppName || "";

        var script = Wpwl.isTestSystem ? "https://cdn10.ebuckler.com/ebuckler.widget.js"
                : "https://stats.ebuckler.com/js/ebuckler.widget.js";

        $.getScript(script)
			.catch(function() {
				// This is a hack so the tests will work - the UAT URL for the widget is broken and now jquery will not create the
				// script tag with the broken URL so we will insert it anyway (with async as attribute).
				// The prod script works fine.
				if (Wpwl.isTestSystem) {
					var mockBrokenUatAliScript = function() {
						var fakeWidgetScript = document.createElement('script');
						fakeWidgetScript.setAttribute('async', 'true');
						fakeWidgetScript.setAttribute('src', 'https://cdn10.ebuckler.com/ebuckler.widget.js');
						return fakeWidgetScript;
					};
					$($('script').get(0)).before(mockBrokenUatAliScript);
				}
			});
	};

	Payment.initKount = function(config){

	    Payment.kountActive = false;
        Payment.kountMerchantId = '';
        Payment.kountSessionId = '';
        Payment.kountBaseUrl = '';

	    if (Util.isNullOrUndefined(config) || !config.active ||
	        Util.isNullOrUndefined(config.merchantId) ||
	        Util.isNullOrUndefined(config.sessionId) ||
	        Util.isBlank(config.merchantId) || Util.isBlank(config.sessionId)){
	            return;
		}
		
        Payment.kountMerchantId = config.merchantId;
		Payment.kountSessionId = config.sessionId;
		Payment.kountBaseUrl = config.baseUrl;
		Payment.kountActive = config.active;
	};

    Payment.initCyberSourceRiskConfig = function(config){
        Payment.cyberSourceRiskActive = false;
        Payment.cyberSourceRiskCollectDeviceId = false;
        Payment.cyberSourceRiskSessionId = '';

        if (Util.isNullOrUndefined(config) || !config.active || !config.collectDeviceId){
            return;
        }

        Payment.cyberSourceRiskActive = config.active;
        Payment.cyberSourceRiskCollectDeviceId = config.collectDeviceId;
        Payment.cyberSourceRiskSessionId = config.sessionId;
    };

	Payment.initForter = function(config){

	    Payment.forterActive = false;
        Payment.forterSiteId = '';
        Payment.forterSessionId = '';

	    if (Util.isNullOrUndefined(config) || !config.active ||
	        Util.isNullOrUndefined(config.siteId) ||
	        Util.isBlank(config.siteId)){
	            return;
	    }

	    Payment.forterActive = config.active;
        Payment.forterSiteId = config.siteId;
        Payment.forterSessionId = config.sessionId;
	};

    Payment.initPreparePaymentForm = function(data) {
		if (Util.isNullOrUndefined(data)) return;
		
		Payment.preparePaymentFormEnabled = true;
		Payment.preparePaymentFormData.push(data);

	};
	
	Payment.isPreparePaymentFormEnabled = function() {
		return !!Payment.preparePaymentFormEnabled;  
	};
	
	Payment.getPreparePaymentFormData = function(token) {
		for (var i = 0; i < Payment.preparePaymentFormData.length; i++) {
			var data = Payment.preparePaymentFormData[i];
			if (data !== undefined && token === data.checkoutId) {
				return data;
			}
		}
	};
	
	/* jshint maxparams: 4 */
	function showPaymentForm(obj, paymentName, paymentData, triggerEvents) { 
		
		var id = obj.id;

		var $container = $("#" + id);
		var $form = $(Generate.string(
			"<form class='wpwl-form wpwl-form-", paymentName, " wpwl-clearfix'",
			" action='", Payment.endPoint, "'",
			" method='POST'",
			" target='", Options.paymentTarget ? Options.paymentTarget : id, "'", 
			" lang='", Locale.language, "'",
			" accept-charset='UTF-8'",
			" data-action='submit-payment-", paymentName, "'",
			"></form>"
		));
		
		var $targetIframe = $(Generate.targetIframe(id));

		$form
		// add fields
		.append(Generate.showPaymentInputs(paymentData))
		// add hidden fields
		.append(Generate.generateHiddenFields(obj.hidden))
		// add extra hidden fields
		.append(Generate.generateExtraHiddenFields());

		// build Payment
		$container
		.append($form)
		.append($targetIframe);
                
		// trigger events
		triggerEvents($form);
	}
	function getCardPaymentData() {
		var paymentData;
	    if (Payment.style === 'logos') {
	        paymentData = Options.requireCvv ? Setting.cardPaymentDataLogoStyle : Setting.cardPaymentDataLogoStyleWithoutCvv;
	    } else {
	        paymentData = Options.requireCvv ? Setting.cardPaymentData : Setting.cardPaymentDataWithoutCvv;
	    }
		if (Options.enableSAQACompliance) {
			paymentData = $.extend({}, paymentData, Setting.cardPaymentBasicSAQA);
		}
		return paymentData;
	}
	
	Payment.showCardPaymentForm = function(obj) { //generate frontend html form
		var cardPaymentData = getCardPaymentData();
		cardPaymentData.brand.values = obj.subTypes;
		cardPaymentData.brand.valueLabels = Generate.generateSubTypesLabel(obj.subTypes);
		
		var triggerEvents = function(form) {
			// trigger events
			var cardPaymentForm = new CardPaymentForm(form);
			cardPaymentForm.getBrandElement().change();

			// disabled submit button until pci iframes have loaded
			Payment.disableNonPciInputsAndSubmitButton(form, true);
		};

		showPaymentForm(obj, "card", cardPaymentData, triggerEvents);

	};

	Payment.showDirectDebitPaymentForm = function(obj) { //generate frontend html form for direct debit
		var paymentInputs = obj.paymentInputs;


		var countryValues = [];
		var countryValueLabels = [];
		for (var i = 0; i < obj.subTypes.length; i++) {
			var map = Setting.subTypeLabelMap[obj.subTypes[i]];
			countryValues.push(map.country);
			countryValueLabels.push(map.label);
		}
		if (paymentInputs.country) {
			paymentInputs.country.values = countryValues.join(", ");
			paymentInputs.country.valueLabels = countryValueLabels.join(", ");
		}
		
		var triggerEvents = function(form) {
			// trigger events
			var directDebitPaymentForm = new BankAccountPaymentForm(form);
			directDebitPaymentForm.getCountryElement().change();
		};

		showPaymentForm(obj, "directDebit", paymentInputs, triggerEvents);
        for (var index = 0; index < obj.subTypes.length; index++){
            if (obj.subTypes[index] === "DIRECTDEBIT_SEPA"){
                updateSEPAForm();
            }
        }

	};

	Payment.showPaymentWidgetsSummaryForm = function(obj) {
        /*jshint unused:false */
        var triggerEvents = function(form) {};
        var summaryPageData = [];

    	showPaymentForm(obj, "summary", summaryPageData, triggerEvents);
	};

	function generateForm(obj) {
        var render = Setting.subTypeLabelMap[obj.subType].render;
        var cssClass = Setting.nonCardPaymentTypeClassMap[render];

        return $(Generate.string(
            "<form class='wpwl-form wpwl-form-", cssClass, " wpwl-form-", cssClass, "-", obj.subType, " wpwl-clearfix'",
            " action='", Payment.endPoint, "'",
            " method='POST'",
            " target='", Options.paymentTarget ? Options.paymentTarget : obj.id, "'",
            " lang='", Locale.language, "'",
            " accept-charset='UTF-8'",
            " data-action='submit-payment-", obj.subType, "'",
            "></form>"
        ));
    }

    function addClassForNotHiddenInputElements($form, classValue) {
        if ($form.find("input[type!='hidden']").length) {
            $form.addClass(classValue);
        }
    }

    function appendElementsToForm(form, elements) {
        for (var i = 0; i < elements.length; i++) {
            form.append(elements[i]);
        }
    }

    function buildPaymentAndReturnForm(obj, elements) {
        var $container = $("#" + obj.id);
        var $form = generateForm(obj);
        var $targetIframe = $(Generate.targetIframe(obj.id));

        appendElementsToForm($form, elements);
        addClassForNotHiddenInputElements($form, "wpwl-form-has-inputs");

        // build Payment
        $container
            .append($form)
            .append($targetIframe);
        return $form;
    }

    Payment.showInlineButtonForm = function(obj, customButtonFormId) {
        var elements = [
        	Generate.getBrandAccountInput(Util.trim(obj.subType)),
			Generate.generateButtonElement(customButtonFormId),
            Generate.generateHiddenFields(obj.hidden)
		];

        return buildPaymentAndReturnForm(obj, elements);
    };

    Payment.showButtonForm = function(obj) { //generate frontend html form for non-card payments
		var row = Generate.generateNonCreditCardAccountRow({
			brand: Util.trim(obj.subType),
			label: Util.trim(Generate.generateSubTypesLabel(obj.subType))
		});
		var elements = [row, Generate.generateHiddenFields(obj.hidden)];

        return buildPaymentAndReturnForm(obj, elements);
    };

	Payment.updateEntercashForm = function() {
        var apiId = Options.entercashApiId;
        console.log(apiId);

        if (apiId) {
            var bankCountry = Options.entercashClearingHouse;
            PaymentView.hideDefaultEntercashForm();
            PaymentView.callEntercashApi(bankCountry);
        }
    };

    Payment.updateAstroPayStreamlineForm = function(brands) {
        var spinner = new Spinner(Options.spinner).spin($(".wpwl-container-virtualAccount-" + brands[0]).get(0));

        $.getJSON(Wpwl.url + "/v1/astropaystreamline/banklist?checkoutId=" + Wpwl.checkout.id)
        .done(function (response) {
            PaymentView.fetchAstropayStreamlinePaymentConfig(response, brands);
            spinner.stop();
        })
        .fail(function() {
            spinner.stop();
        });
    };

	Payment.updateGiropayForm = function () {

        //check for displayIban option which is optional display
        if (Options.displayIban === false) {
            PaymentView.removeDefaultGiropayFormIban();
        }
        //add auto-complete function to BIC
        PaymentView.updateFieldGiropayBic();
	};

	function updateSEPAForm() {
        var displayBic = Options.displayBic;
        //check for displayBic option which is optional
        if (!displayBic) {
           PaymentView.removeDefaultSepaFormBIC();
        }
    }

	//Layout functions
	Payment.initStyle = function(style){
		if(!Util.contains(["card", "plain", "logos", "none"], style)){
			return;
		}
		
		Payment.hideContainers();
		
		var styleLoader = new StyleLoader();
		var deferred = $.Deferred();
		styleLoader
		.load(Payment.getStyleLink())
		.always(Payment.showContainers)
		.always(function(){
		    deferred.resolve();
		});
		return deferred.promise();
	};

	Payment.getStyleLink = function(){
	    var staticResourcesUrl = Generate.string(Payment.url, "/v1/static/", Payment.cacheVersion);
	    var cssResourceUrl = Generate.string(staticResourcesUrl , "/css/", Payment.style,
	            Payment.isRTLExtension(Payment.locale), Payment.minified ? ".min" : "", ".css");
	    var cssLink = Generate.string("<link rel='stylesheet' id='wpwl-style' href='", cssResourceUrl ,"'/>");
	    if (Options.imageStyle === "svg"){
	        var svgCssResourceUrl = Generate.string(staticResourcesUrl, "/css/svg",
	                Payment.minified ? ".min" : "", ".css");
	        cssLink = Generate.string(cssLink, "<link rel='stylesheet' href='", svgCssResourceUrl, "'/>");
	    }
		return cssLink;
	};
	
	Payment.isRTLExtension = function(paymentLocale){
		if(paymentLocale === undefined) {
			return "";
		}
		
		var rtlLanguages = ["ar"];
		return $.inArray(paymentLocale, rtlLanguages) ? "" : "_rtl";
	};
	
	Payment.hideContainers = function(){
		$('.wpwl-container').hide();
		Payment.spinner = new Spinner(Options.spinner).spin(document.body);
	};
	
	Payment.showContainers = function(){
		var autofocusCheck = function() {
			AutoFocus.checkAutoFocus([document]);
		};

		if (Options.registrations.hideInitialPaymentForms && $('.wpwl-container-registration').length)
		{
			$('.wpwl-container-registration').show(autofocusCheck);
		}
		else
		{
			$('.wpwl-container').show(autofocusCheck);
		}
		Payment.spinner.stop();
	};

	//validators
	Payment.initListeners = function(){
		$(document).on('wpwl:ready.wpwlEvent', function(){
			PaymentView.initFormatter.call(this);
		});

		if (!Options.enableSAQACompliance) {
			$(document).on('blur.wpwlEvent forcedBlur.wpwlEvent', "[data-action=\"blur-card-expiry\"]", function(){

				PaymentView.populateExpiryMonthAndYearFields.call(this);
			});
		}

		//set the brand icon, depends on the selection
		$(document).on('change.wpwlEvent', 'select[name="' + Parameter.PAYMENT_BRAND + '"]', function(){
			var brand = this.value;
			PaymentView.onUpdateCardBrand.call(this, this, brand, true);
		});

		//adjust DD paymentBrand, e.g. change DIRECTDEBIT to DIRECTDEBIT_DE
		$(document).on('change.wpwlEvent', 'form.wpwl-form-directDebit select[name="' + Parameter.BANKACCOUNT_COUNTRY + '"]', function(){
			PaymentView.adjustDirectDebitPaymentBrand.call(this);
		});

		$(document).on('click.wpwlEvent change.wpwlEvent', 'form.wpwl-form-virtualAccount [data-action=\"mobile-radio-action\"]', function(){
			var $form = $("form.wpwl-form.wpwl-form-virtualAccount.wpwl-form-virtualAccount-STC_PAY");
			var $mobileRadio = $form.find(".wpwl-control-radio-mobile")[0];
			var $qrCodeRadio = $form.find(".wpwl-control-radio-qrcode")[0];

			if ($mobileRadio.checked){
				PaymentView.hideOrShowElement($form, ".wpwl-group-mobilePhone", false);
				$qrCodeRadio.checked = false;
				Payment.removeValidationError.call($(".wpwl-control-radio-mobile." + HAS_ERROR_CLASS).first());
			}
		});
		
		$(document).on('click.wpwlEvent change.wpwlEvent', 'form.wpwl-form-virtualAccount [data-action=\"qrcode-radio-action\"]', function(){
			var $form = $("form.wpwl-form.wpwl-form-virtualAccount.wpwl-form-virtualAccount-STC_PAY");
			var $mobileRadio = $form.find(".wpwl-control-radio-mobile")[0];
			var $qrCodeRadio = $form.find(".wpwl-control-radio-qrcode")[0];
			var $mobilePhoneInput = $form.find(".wpwl-control-mobilePhone")[0];

			if ($qrCodeRadio.checked) {
				PaymentView.hideOrShowElement($form, ".wpwl-group-mobilePhone", true);
				$mobileRadio.checked = false;
				$mobilePhoneInput.value = "";
				Payment.removeValidationError.call($(".wpwl-control-mobilePhone." + HAS_ERROR_CLASS).first());
				Payment.removeValidationError.call($(".wpwl-control-radio-mobile." + HAS_ERROR_CLASS).first());
			} 
		});

        if (Payment.style === 'logos') {
            $(window).on("resize.wpwlEvent", function() {
                PaymentView.adjustCardLogosPaymentBrands();
            });
        }

        Payment.preventDefault = function(e){
            //For testing purposes
            e.preventDefault();
        };

        $(document).on('keydown.wpwlEvent',function(e) {
            if(e.which === ENTER_KEY && Options.disableSubmitOnEnter ){
                Payment.preventDefault(e);
            }
        });

		if (Options.brandDetection) {
			// others trigger change on this element, but we are interested only in the ones triggered by a real user
			var userClicked = false;
            var brandChanged = false;
            var waitingTime = 2000;			

			Payment.removeBrandDetectionEventListeners = function(event){
				if (event.type === 'click') {
					userClicked = true;
					setTimeout(function() { userClicked = false; }, waitingTime);
				}
				
                if (event.type === 'change') {
                    brandChanged = true;
                    setTimeout(function() { brandChanged = false; }, waitingTime); 
                }
				
				// user changed dropdown
				if (userClicked && brandChanged) {
					Payment.iframeCommunications.number.disableBrandDetection();
					$(document).off('click.wpwlEvent change.wpwlEvent', '[name="' + Parameter.PAYMENT_BRAND + '"]');
				}
			};

			$(document).on('click.wpwlEvent change.wpwlEvent', '[name="' + Parameter.PAYMENT_BRAND + '"]', function(event){
				Payment.removeBrandDetectionEventListeners.call(this, event);
			});
			
			
		}
		
		if( Options.validation ){
			//input field Validation
			Payment.blurInputCard =  function(){
				if (!this.value.length) {
					return;
				}
				
				var $form = $(this).closest("form");
				var paymentForm = new CardPaymentForm($form);
				
				var validationErrors = Validate.validateCardPaymentElement( this , paymentForm.getBrandElement() );
                PaymentView.executeDelayedIfNecessary(function() {
                    PaymentView.generateErrorRow(validationErrors);
                    PaymentView.triggerFormValidationStatus($form);
                });
			};
			
			Payment.blurInputCardExpiry = function(){
				if (!this.value.length) {
					return;
				}
				
				var $form = $(this).closest("form");
				var paymentForm = new CardPaymentForm($form);
				var $month = paymentForm.getExpiryMonthElement();
				var $year = paymentForm.getExpiryYearElement();
				var $accountBrand = paymentForm.getBrandElement();
				
				var validationErrors = Validate.validateCardPaymentElement( $month, $year, $accountBrand );
                PaymentView.executeDelayedIfNecessary(function() {
                    PaymentView.generateErrorRow(validationErrors);
                    PaymentView.triggerFormValidationStatus($form);
                });
			};

			Payment.blurGiftCardElement = function(){
				if (!this.value.length) {
					return;
				}

				var $form = $(this).closest("form");
				var paymentForm = new VirtualAccountPaymentForm($form);

				var validationErrors = Validate.validateGiftCardElement($(this), paymentForm.getBrand());
                PaymentView.executeDelayedIfNecessary(function() {
                    PaymentView.generateErrorRow(validationErrors);
                    PaymentView.triggerFormValidationStatus($form);
                });
			};
			
			Payment.blurInputsBankAccount = function(){
				if (!this.value.length){
					return;
				}
				
				var $form = $(this).closest('form');
				PaymentView.updateBankAccountInputs($form);
				
				var validationErrors;
				if ($form.hasClass("wpwl-form-directDebit")){
					validationErrors = Validate.validateDirectDebitPaymentElement(this);
				}
				
				var paymentForm = new BankAccountPaymentForm($form);
				if (paymentForm.isSimplifiedForm()) {
					var $accountCountryInput = paymentForm.getCountryElement();
					
					// update account country from valid iban
					var ibanOrAccountNumber = paymentForm.getIbanOrAccountNumber();
					if (ibanOrAccountNumber && ibanOrAccountNumber.length >= 2) {
						$accountCountryInput.val(ibanOrAccountNumber.substring(0, 2).toUpperCase());
					}
				}
				PaymentView.generateErrorRow(validationErrors);
				PaymentView.triggerFormValidationStatus($form);
			};

			Payment.clickCheckboxBankAccount = function(checkbox) {
				var $checkbox = $(checkbox);
                var $form = $checkbox.closest('form');

                var validationErrors;
                if ($form.hasClass("wpwl-form-directDebit")) {
                    validationErrors = Validate.validateDirectDebitPaymentCheckbox($checkbox);
                }

                PaymentView.generateErrorRow(validationErrors);
                PaymentView.triggerFormValidationStatus($form);
            };
			
			Payment.removeValidationError = function(){
				var $input = $(this);
                PaymentView.executeDelayedIfNecessary(function() {
                    PaymentView.removeErrorClassAndMessage($input);
                    PaymentView.triggerFormValidationStatus($input.closest("form"));
                });
			};
			
			Payment.onChangeBrand = function(){
				var $form = $(this).closest('form');
				var paymentForm = new CardPaymentForm($form);
				

				if (State.pciIframeCommunicationReady){
					// no need to wait for the validation response here as the iframe calls back with the validation status
					Payment.iframeCommunications.number.validateInput(true, 'onChange');
					if(Options.requireCvv){
					    Payment.iframeCommunications.cvv.validateInput(true, 'onChange');
					}
				}
				else {
					if(paymentForm.getNumber()) {
						var $number = paymentForm.getNumberElement();

						PaymentView.removeErrorClassAndMessage($number);
						PaymentView.generateErrorRow( Validate.validateCardPaymentElement( $number, this ) );
					}

					if(paymentForm.getCvv()) {
						var $cvv = paymentForm.getCvvElement();

						PaymentView.removeErrorClassAndMessage($cvv);
						PaymentView.generateErrorRow( Validate.validateCardPaymentElement( $cvv, this ) );
					}
				}
				
				if ( Payment.iframeCommunications && Payment.iframeCommunications.number )
				{
					Payment.iframeCommunications.number.updateCardFormatting();
				}
				
				PaymentView.triggerFormValidationStatus($form);
			};
			
			Payment.unbindCardSubmitEventAndSubmitForm = function(){
				var $form = $(this);
				$(document).off('submit.wpwlEvent','[data-action="submit-payment-card"]');
				$form.submit();
			};
			
			Payment.submitPciIframes = function(){
				var form = this;

				var promises = [];
				var iframeCommunications = Payment.iframeCommunications || {};
				Object.keys(iframeCommunications).forEach(
					function(key){
						promises.push( Payment.iframeCommunications[key].submitFormAndGetToken() );
					}
				);

				var submitPromise = $.when.apply($, promises);

				submitPromise
				.then(function() {
					Payment.unbindCardSubmitEventAndSubmitForm.call(form);
				})
				.fail(function(error, reason) {
                    PaymentView.submitPciIframeFailed(error, reason, form);
				});
			};

			Payment.validatePciIframes = function(event){
				var form = this;

				var promises = [];
				var iframeCommunications = Payment.iframeCommunications || {};
				Object.keys(iframeCommunications).forEach(
					function(key){
						if (key!=='cvv') {
							promises.push(Payment.iframeCommunications[key].validateInput(false));
						}
					}
				);

				if (Options.requireCvv) {
					promises.push(Payment.iframeCommunications.cvv.validateInput(!!(Options.allowEmptyCvv)));
				}

				var validatePromise = $.when.apply($, promises);

				validatePromise
				.then(function() {
					var argsOk = Payment.validateCardSync.call(form, event);
					var resultArgs = [].slice.call(arguments);
					resultArgs.forEach( function(arg){
						argsOk=argsOk && arg;
					});
					return argsOk;
				})
				.then(function(isValid){
					if (isValid && Options.onBeforeSubmitCard.call(form, event)) {
						Payment.submitPciIframes.call(form);
					}
				})
				.fail(function(error, message) {
					var info = "validatePciIframes failed with error: " + error + " and message: " + message;
					PaymentView.showSupportMessage(info, form);
					Tracking.exception(info);
				});
			};
			
			Payment.validateCardAsync = function(event){
				Payment.validatePciIframes.call(this, event);
			};
			
			Payment.validateCardSync = function(event){
				var obj = {
					event: event,
					optionsValidateFunc: Options.validateCard,
					validateFunc: Validate.validateCardPaymentForm,
					optionsOnBeforeSubmitFunc: null
				};
				
				return Payment.validateForm.call(this, obj);
			};
			
			Payment.validateCard = function(event){
				var form = this;
				var $form = $(form);

				PaymentView.disableSubmitButton($form, true);

				Payment.validateCardAsync.call(form, event);
				// form will be submitted via jquery
				return false;
			};
			
			Payment.validateDirectDebit = function(event){
				var obj = {
					event: event,
					optionsValidateFunc: Options.validateDirectDebit,
					validateFunc: Validate.validateDirectDebitPaymentForm,
					optionsOnBeforeSubmitFunc: Options.onBeforeSubmitDirectDebit
				};
				
				return Payment.validateForm.call(this, obj);
			};
			
			Payment.validateOnlineTransfer = function(event){
				var obj = {
					event: event,
					optionsValidateFunc: Options.validateOnlineTransfer,
					validateFunc: Validate.validateOnlineTransferForm,
					optionsOnBeforeSubmitFunc: Options.onBeforeSubmitOnlineTransfer
				};
				
				return Payment.validateForm.call(this, obj);
			};
			
			Payment.validateVirtualAccount = function(event){
				var obj = {
					event: event,
					optionsValidateFunc: Options.validateVirtualAccount,
					validateFunc: Validate.validateVirtualAccountForm,
					optionsOnBeforeSubmitFunc: Payment.onBeforeSubmitVirtualAccountCheckInline
				};
				
				return Payment.validateForm.call(this, obj);
			};
			
			Payment.validatePrepayment = function(event){
				var obj = {
					event: event,
					optionsValidateFunc: Options.validatePrepayment,
					validateFunc: Validate.validatePrepaymentForm,
					optionsOnBeforeSubmitFunc: Options.onBeforeSubmitPrepayment
				};

				return Payment.validateForm.call(this, obj);
			};

			Payment.validateForm = function(obj){
				var isValid = false;
				
				if($.isFunction(obj.optionsValidateFunc))
				{
					// use external validation
					isValid = obj.optionsValidateFunc.call(this);
				}
				else
				{
					// use internal validation
					var validationErrors = obj.validateFunc(this);
					PaymentView.generateErrorRow(validationErrors);
					
					isValid = PaymentView.checkForValidationErrors(this);
					if (!isValid)
					{
					    // update submit button state
    					PaymentView.triggerFormValidationStatus(this);
					}
				}

				if (isValid && obj.optionsOnBeforeSubmitFunc) {
				    return obj.optionsOnBeforeSubmitFunc.call(this, obj.event);
				}

				return isValid;
			};

			Payment.keyUpExpiryDate = function(){
                PaymentView.populateExpiryMonthAndYearFields.call(this);
			};

			Payment.appendForterCookie = function(form){
			    if(Payment.forterActive === true){
                    var forterCookieField = form.find('[name="' + Parameter.FORTER_COOKIE + '"]');
                    if(forterCookieField){
                        forterCookieField.val(Util.getCookie("forterToken"));
                    }
			    }
			};

            $(document).on('focus.wpwlEvent', 'input', function() {
                var name = $(this).attr("name");

                // this is a security check to never store CVV and CARD NUMBER inputs
                if (name !== Parameter.CARD_CVV && name !== Parameter.CARD_NUMBER) {

                    // due to a bug in iOS, we have to maintain the lastActiveInput ourselves
                    if (Payment.lastActiveInput && Payment.lastActiveInput.get(0) !== $(this).get(0)) {
                        if (!Payment.lastActiveInput.get(0).blurred) {
                            Payment.lastActiveInput.trigger("forcedBlur");
                        }
                        Payment.lastActiveInput.get(0).blurred = false;
                    }
                    Payment.lastActiveInput = $(this);
                    Payment.lastActiveInput.trigger("forcedFocus");
                }
            });

            Payment.onBeforeSubmitVirtualAccountCheckInline = function(event) {
                if(Options.onBeforeSubmitVirtualAccount.call(this, event) !== false && !(event.isDefaultPrevented())) {

                    var brand = PaymentView.getSelectedBrand($(this));

                    if (KlarnaPaymentsInlineWidget.isKlarnaBrand(brand)) {
                        return KlarnaPaymentsInlineWidget.onBeforeSubmitVirtualAccountCheckInline(this);
                    }
                    else if (YandexCheckoutPaymentWidget.isYandexCheckoutBrand(brand)) {
                        return YandexCheckoutPaymentWidget.onBeforeSubmitVirtualAccount(this);
                    }
                    else if (AfterPayPacificPaymentWidget.isAfterPayPacificBrand(brand)) {
                        return AfterPayPacificPaymentWidget.onBeforeSubmitVirtualAccount(this);
                    }
                    else if (BancontactMobilePaymentWidget.isBancontactMobilePaymentBrand(brand)) {
                        return BancontactMobilePaymentWidget.authorizePaymentAndLoadData(this);
                    }
                    else {
                        return true;
                    }
                }
                return false;
            };

            $(document).on('focus.wpwlEvent', 'select', function() {
                 $(this).trigger("forcedFocus");
            });

            // card inputs
			$(document).on('forcedBlur.wpwlEvent', 'input[name="' + Parameter.CARD_HOLDER + '"]', function(){
				Payment.blurInputCard.call(this);
			});

            $(document).on('blur.wpwlEvent', 'input[name="' + Parameter.CARD_HOLDER + '"]', function(){
                Payment.blurInputCard.call(this);

                this.blurred = true;
            });

			$(document).on('forcedBlur.wpwlEvent', '[data-action=\"blur-card-expiry\"]', function(){
				Payment.blurInputCardExpiry.call(this);
			});

			if (!Options.enableSAQACompliance) {
				$(document).on('keyup.wpwlEvent', '[data-action=\"blur-card-expiry\"]', function(){
					Payment.keyUpExpiryDate.call(this);
				});
			}				

            $(document).on('blur.wpwlEvent', '[data-action=\"blur-card-expiry\"]', function(){
                Payment.blurInputCardExpiry.call(this);

                this.blurred = true;
            });

			$(document).on('forcedBlur.wpwlEvent', '[name="' + Parameter.GIFT_CARD_EXPIRY_DATE + '"]', function(){
				Payment.blurGiftCardElement.call(this);
			});

            $(document).on('blur.wpwlEvent', '[name="' + Parameter.GIFT_CARD_EXPIRY_DATE + '"]', function(){
                Payment.blurGiftCardElement.call(this);
                this.blurred = true;
            });

            $(document).on('forcedBlur.wpwlEvent', '[name="' + Parameter.GIFT_CARD_NUMBER + '"]', function(){
                Payment.blurGiftCardElement.call(this);
            });

            $(document).on('blur.wpwlEvent', '[name="' + Parameter.GIFT_CARD_NUMBER + '"]', function(){
                Payment.blurGiftCardElement.call(this);
                this.blurred = true;
            });

            // bind keydown event to the following controls, then the error message can be cleared when typing.
            [
                Parameter.BANKACCOUNT_BANKCODE,
                Parameter.BANKACCOUNT_BIC,
                Parameter.BANKACCOUNT_HOLDER,
                Parameter.BANKACCOUNT_IBAN,
                Parameter.BANKACCOUNT_NUMBER,

                Parameter.CARD_HOLDER,
                Parameter.VIRTUALACCOUNT_ACCOUNTID,
                Parameter.VIRTUALACCOUNT_HOLDER,
                Parameter.SUR_NAME,
                Parameter.GIVEN_NAME,

                Parameter.BILLING_STATE,
                Parameter.BILLING_CITY,
                Parameter.BILLING_STREET1,
                Parameter.BILLING_STREET2,
                Parameter.BILLING_POST_CODE,
                Parameter.GIFT_CARD_EXPIRY_DATE,
                Parameter.GIFT_CARD_NUMBER
            ].forEach(function(name) {
                $(document).on('keydown.wpwlEvent', 'input[name="' + name + '"]', Payment.removeValidationError);
            });

            // expiry date does not have a name, bind with attribute
            $(document).on('keydown.wpwlEvent', '[data-action="blur-card-expiry"]', Payment.removeValidationError);

            $(window).on('focus.wpwlEvent', function() {
                window.setTimeout(function() {
                    if (Payment.lastActiveInput && Payment.lastActiveInput.get(0) === document.activeElement) {
                        Payment.lastActiveInput.trigger("forcedFocus");
                    }
                }, 250);
            });

            // Due to a bug in iOS we have to listen to the blur event of the
            // window and not the input. See FL-53 for details.
            $(window).on('blur.wpwlEvent', function(){
                if (Payment.lastActiveInput) {
                    if (!Payment.lastActiveInput.get(0).blurred) {
                        Payment.lastActiveInput.trigger("forcedBlur");
                    }
                    Payment.lastActiveInput.get(0).blurred = false;
                }
			});
			
			$(document).on('change.wpwlEvent', 'select[name="' + Parameter.PAYMENT_BRAND + '"]', function(){
				Payment.onChangeBrand.call(this);
			});

			// bank account inputs
			$(document).on('blur.wpwlEvent', 'input[name="' + Parameter.BANKACCOUNT_IBAN + '"], input[name="' + Parameter.BANKACCOUNT_BIC + '"], input[name="' + Parameter.BANKACCOUNT_NUMBER + '"], input[name="' + Parameter.BANKACCOUNT_BANKCODE + '"], input[name="' + Parameter.BANKACCOUNT_HOLDER + '"]', function(){
				Payment.blurInputsBankAccount.call(this);
			});
			$(document).on('click.wpwlEvent', 'input.wpwl-checkbox', function(){
                Payment.clickCheckboxBankAccount(this);
            });
			
			//divide card.holder by customer.surname and customer.givenName
			if( !Options.enableSAQACompliance && Options.forceCardHolderEqualsBillingName ){
				$(document).on('blur.wpwlEvent', 'input[name="' + Parameter.SUR_NAME + '"], input[name="' + Parameter.GIVEN_NAME + '"]', function(){
					Payment.blurInputCard.call(this);
				});
			}
			
			// billing data, seperated because of further improvements; TODO: add scope
			if ( Options.billingAddress !== undefined ){
				$(document).on('blur.wpwlEvent', 'input[name="' + Parameter.BILLING_STATE +
				    '"], input[name="' + Parameter.BILLING_CITY +
				    '"], input[name="' + Parameter.BILLING_STREET1 +
				    '"], input[name="' + Parameter.BILLING_STREET2 +
				    '"], input[name="' + Parameter.BILLING_POST_CODE + '"]', function(){
					Payment.blurInputCard.call(this);
				});
				$(document).on('change.wpwlEvent', 'select[name="' + Parameter.BILLING_COUNTRY +
				    '"], select[name="' + Parameter.BILLING_STATE + '"]', function(){
					Payment.blurInputCard.call(this);
				});
			}
			
			//remove error class and message
			$(document).on('forcedFocus.wpwlEvent', 'input[type!="checkbox"].' + HAS_ERROR_CLASS + ', select.' + HAS_ERROR_CLASS, function(){
				Payment.removeValidationError.call(this);
			});

			// For MBWAY. FL-953
			$(document).on('forcedFocus.wpwlEvent', '.wpwl-control-customerEmail.' + HAS_ERROR_CLASS + ", .wpwl-control-mobilePhone." + HAS_ERROR_CLASS, function(){
				Payment.removeValidationError.call($(".wpwl-control-customerEmail." + HAS_ERROR_CLASS).first());
				Payment.removeValidationError.call($(".wpwl-control-mobilePhone." + HAS_ERROR_CLASS).first());
			});

			$(document).on('click.wpwlEvent', 'input[type="checkbox"].' + HAS_ERROR_CLASS, function(){
				Payment.removeValidationError.call(this);
			});
			
			// form submission
			$(document).on('submit.wpwlEvent', '[data-action="submit-payment-card"]', function(event){
				return Payment.validateCard.call(this, event);
			});
			
			$(document).on('submit.wpwlEvent', '[data-action="submit-payment-directDebit"]', function(event){
				return Payment.validateDirectDebit.call(this, event);
			});
			
			$(document).on('submit.wpwlEvent', 'form.wpwl-form-onlineTransfer', function(event){
				return Payment.validateOnlineTransfer.call(this, event);
			});
			
			$(document).on('submit.wpwlEvent', 'form.wpwl-form-virtualAccount', function(event){
				return Payment.validateVirtualAccount.call(this, event);
			});

			$(document).on('submit.wpwlEvent', 'form.wpwl-form-prepayment', function(event){
				return Payment.validatePrepayment.call(this, event);
			});

			// event is bound to all forms, but will trigger only on the specific form
			$(document).on('form.isValid', 'form.wpwl-form', function(event, isValid){
				PaymentView.updateSubmitButtonState.call(this, isValid);
			});
		}

		Payment.onSubmitForm = function(event){
			// event.stopPropagation & event.preventDefault is set when a form submit returns false
			// or when the event is set to this in the callback function
			if (event.isPropagationStopped() || event.isDefaultPrevented()) {
				return false;
			}

			var $form = $(this);
			var showInPopup = Payment.isShownInPopup($form);

			if (showInPopup === false) {
				// disable submit button, submit should not be triggered twice
				PaymentView.disableSubmitButton($form, true);
				PaymentView.isPaying = true;
			}

			// disable elements which should not be sent
			if (!Options.enableSAQACompliance) {
				$form.find("[data-action=\"blur-card-expiry\"]").attr("disabled", true);
			}
			$form.find('[name="' + CardPaymentForm.WIDGET_BIRTH_DATE + '"]').attr("disabled", true);
			$form.find("[name=\"generalTermsAndConditions\"]").attr("disabled", true);
			$form.find("[name=\"accept\"]").attr("disabled", true);

			if(!Options.enableSAQACompliance && Options.forceCardHolderEqualsBillingName){
				$form.find('[name="' + Parameter.CARD_HOLDER + '"]').removeAttr("disabled");
			}
			
			Payment.appendAliRiskToken($form);
			Payment.appendKountSessionId($form);
			Payment.appendCyberSourceRiskSessionId($form);
			Payment.appendBrowserInfo($form);
			Payment.appendForterCookie($form);

			if (Options.useSummaryPage){
				Payment.saveTransactionData($form, Options.onSaveTransactionData);
				
				return false;
			}

			var $iframe = $form.next();

			// show spinner
			var $formContainer = $form.parent();
			var spinner = new Spinner(Options.spinner).spin($formContainer.get(0));

			var numberOfRedirects = 0;
			// when the iframe has loaded
			$iframe.on('load', function() {

				//In case the integration uses pop-up instead of redirect stop the spinner
				//after the popup is loaded
				if (showInPopup === true) {
					setTimeout(function(){
						spinner.stop();
					}, 200);
					return;
				}

                setTimeout(function(){
				    $form.hide();
				    var dim = Options.threeDIframeSize;
                    // width and height are initially set via css;
                    $iframe.width(dim.width);
                    $iframe.height(dim.height);
                    $iframe.show();
                    console.log('wait for 10 seconds');
				}, 10000);

				// 2nd load is either merchant or 3rd party confirmation, but merchant will be _top
				if( ++numberOfRedirects === 2 ){
					//that's 3D Secure
					$form.hide();
					$iframe.show();
					
					// stop spinner
					setTimeout(function(){
						spinner.stop();
					}, 200);
					
					// iframe has height 100% and width 100% until now
					var dim = Options.threeDIframeSize;
					// width and height are initially set via css;
					$iframe.width(dim.width);
					$iframe.height(dim.height);
					
					// callback when iframe has loaded. Merchant can set the height here. 
					Options.onLoadThreeDIframe.call(this);
				}
			});
			
			// call onSubmit with the form as this
			Options.onAfterSubmit.call($form[0]);
			
			// finally submit the form
			return true;
		};
		
		$(document).on('submit.wpwlEvent', 'form.wpwl-form', function(event) {
			return Payment.onSubmitForm.call(this, event);
		});

	};

	Payment.isShownInPopup = function($form) {

		var brand = new PaymentForm($form).getBrand();
		if (brand === "MASTERPASS") {
			return true;
		}
		return false;
	};
	
	
	Payment.appendBrowserInfo = function($form) {

	    if (($form.hasClass('wpwl-form-card') || isCardRegistration($form)) && isThreeDV2Enabled($form))
	    {
            var browserInfoFields = Generate.generateBrowserFields($form);
            $form.append(browserInfoFields);
        }
	};

	function isCardRegistration($form) {

	    var selectedBrand = $form.find('[name="'+Parameter.PAYMENT_BRAND+'"]');
	    if ($form.hasClass('wpwl-form-registrations') && selectedBrand.length)
	    {
            var isCard = Setting.subTypeLabelMap[ selectedBrand.val() ];
            return (isCard && isCard.render === 'CC');
	    }
	    return false;
	}
	
    function isThreeDV2Enabled($form) {
        var brand = getBrand($form);
        if (brand != null) {
            
            if (isVisaBrand(brand) && Wpwl.checkout.config.threeDSecureV2Config.visaThreeDV2) {
                return true;
            }
            else if (isMastercardBrand(brand) && Wpwl.checkout.config.threeDSecureV2Config.masterThreeDV2) {
                return true;
            }
            else if ("AMEX" ===  brand && Wpwl.checkout.config.threeDSecureV2Config.amexThreeDV2) {
                return true;
            }
            else if ("BCMC" ===  brand && Wpwl.checkout.config.threeDSecureV2Config.bcmcThreeDV2) {
                return true;
            }
            else if (isDinersBrand(brand) && Wpwl.checkout.config.threeDSecureV2Config.dinersThreeDV2) {
                return true;
            }
            else if ("JCB" ===  brand && Wpwl.checkout.config.threeDSecureV2Config.jcbThreeDV2) {
                return true;
            }
            else if ("CARTEBANCAIRE" ===  brand && Wpwl.checkout.config.threeDSecureV2Config.cartebancaireThreeDV2) {
                return true;
            }
            else if ("DANKORT" ===  brand && Wpwl.checkout.config.threeDSecureV2Config.dankortThreeDV2) {
                return true;
            }
            else if ("CASHLINKMALTA" ===  brand && Wpwl.checkout.config.threeDSecureV2Config.cashlinkmaltaThreeDV2) {
                return true;
            }
        }
        return false;
    }	
        
    function getBrand($form) {
        if ($form) {
            var $paymentBrand = $form.find('[name="' + Parameter.PAYMENT_BRAND + '"]');
            if ($paymentBrand && $paymentBrand.length) {
                return $paymentBrand.val();
            } 
        }    
        return null;
    }

    function isVisaBrand(brand){
        return "VISA" ===  brand || "VISADEBIT" === brand || "VISAELECTRON" ===  brand || "VPAY" === brand;
    }

    function isMastercardBrand(brand){
        return "MASTER" ===  brand || "MASTERDEBIT" === brand || "MAESTRO" ===  brand;
    }

    function isDinersBrand(brand){
        return "DINERS" ===  brand || "DISCOVER" === brand;
    }
	
	Payment.appendAliRiskToken = function($form){
		if (Payment.aliRiskActive) {
            $form
                .find("[name=\"CRITERION.ALIRISK_extendProperties_ebucklerToken\"]" +
                        ",[name=\"ebucklerToken\"]" +
                        ",[name=\"customer.browserFingerprint.id\"]")
                .attr("disabled", true);
		    
            var $ebucklerToken = $("[name=\"ebucklerToken\"]");
            if ($ebucklerToken.length) {
                var ebucklerInputField = Generate.generateHiddenFields({
                    "customer.browserFingerprint.id" : $ebucklerToken.val() });
                $form.append(ebucklerInputField);
            }
		}
	};

	Payment.appendKountSessionId = function($form){
	    if (Payment.kountActive) {
            var kountSessionIdInputField = Generate.generateHiddenFields({
                                "customer.browserFingerprint.id" : Payment.kountSessionId });
                            $form.append(kountSessionIdInputField);
	    }
	};

    Payment.appendCyberSourceRiskSessionId = function($form){
	    if (Payment.cyberSourceRiskActive && Payment.cyberSourceRiskCollectDeviceId) {
	        var cyberSourceRiskSessionIdInputField = Generate.generateHiddenFields({
	                            "risk.parameters[CS_SESSION_ID]" : Payment.cyberSourceRiskSessionId });
	                        $form.append(cyberSourceRiskSessionIdInputField);
	    }
    };

	Payment.saveTransactionData = function($form, onSaveTransactionDataCallback){
		var url = $form.attr('action').replace("/payment", "");
		var data = $form.serialize();
		
		var postRequest = $.post(url, data);
		// call callback for success and fail, so merchant can decide how to proceed
		postRequest.always(onSaveTransactionDataCallback);
	};

	function setupPciIframeOnLoad(iframeCommunicationName, $cardForm, $iframe, setIsValid) {
		var deferred = $.Deferred();
		$iframe.on('load', function () {
			var iframeCommunication = new ParentToIframeCommunication({
				$form: $cardForm,
				$iframe: $iframe
			}, {
				setIsValid: setIsValid
			});
			Payment.iframeCommunications[iframeCommunicationName] = iframeCommunication;
			PaymentView.setupPciIframe(iframeCommunication)
				.done(function () {
					AutoFocus.checkAutoFocus([iframeCommunication]);
					deferred.resolve();
				})
				.fail(function () {
					deferred.reject("Unable to load iframe.");
				});

		}
		);
		return deferred.promise();
	}

	Payment.preparePciCompliance = function () {
		var $cardForm = $('[data-action="submit-payment-card"]');
		
		if (!$cardForm.length) {
			return;
		}

		Payment.iframeCommunications = {};
		var setupPromises =[];

		var $numberIframe = $cardForm.find('[name="' + Parameter.CARD_NUMBER + '"]');
				
		//set up the card number iframe
		setupPromises.push(setupPciIframeOnLoad("card", $cardForm, $numberIframe, PaymentView.setCardNumberIsValid));

		if (Options.enableSAQACompliance) {
			var $holderIframe = $cardForm.find('[name="' + Parameter.CARD_HOLDER + '"]');
			//set up the card holder iframe
			setupPromises.push(setupPciIframeOnLoad("holder", $cardForm, $holderIframe, PaymentView.setCardHolderIsValid));
			var $expiryIframe = $cardForm.find('#ccexp');
			//set up the card expiry iframe
			setupPromises.push(setupPciIframeOnLoad("expire", $cardForm, $expiryIframe, PaymentView.setExpiryIsValid));
		}


		if (Options.requireCvv) {
			var $cvvIframe = $cardForm.find('[name="' + Parameter.CARD_CVV + '"]');
			//set up the card cvv iframe
			setupPromises.push(setupPciIframeOnLoad("cvv", $cardForm, $cvvIframe, PaymentView.setCardCvvIsValid));
		}

		var spinner = new Spinner(Options.spinner).spin($cardForm.parent().get(0));

		$.when.apply($, setupPromises)
			.always(function () {
				spinner.stop();
				Payment.disableNonPciInputsAndSubmitButton($cardForm, false);
				AutoFocus.checkAutoFocus([document]);

				Payment.prepareCardLogosPaymentBrands();
			})
			.fail(function (reason) {
				PaymentView.showPleaseTryAgainMessage($cardForm);
				Tracking.exception("preparePciCompliance failed because: " + reason);
			});
	};

	Payment.prepareCardLogosPaymentBrands = function() {
		if (Payment.style === 'logos') {
			if (Options.brandDisplay !== 'all') {
				PaymentView.adjustHorizontalLogos([]);
			}
			PaymentView.adjustCardLogosPaymentBrands();
			PaymentView.setUpOnClickCardLogoBrands();
		}
	};

	Payment.disableNonPciInputsAndSubmitButton = function($form, disabled){
		if (!Options.enableSAQACompliance) {
			$form.find("[data-action=\"blur-card-expiry\"]").prop("disabled", disabled);
			$form.find("[name=\"" + Parameter.CARD_HOLDER + "\"]").prop("disabled", disabled);
		}
		$form.find("[name=\"" + Parameter.PAYMENT_BRAND + "\"]").prop("disabled", disabled);
		PaymentView.disableSubmitButton($form, disabled);
	};

	Payment.loadMasterPassLibrary = function() {
		var script = Wpwl.isTestSystem ?
				"https://sandbox.masterpass.com/lightbox/Switch/integration/MasterPass.client.js" :
				"https://www.masterpass.com/lightbox/Switch/integration/MasterPass.client.js";
		return $.getScript(script);
    };

    Payment.setMasterPassMessageListener = function() {
    		window.addEventListener("message", Payment.receiveMessage, false);
	};

	Payment.receiveMessage = function(event) {
		if (event.origin !== Wpwl.url) {
            return;
		}
		var message;
		try {
			message = JSON.parse(event.data);
			if (message.source !== "wpwl::masterpass") {
				return;
			}
		} catch (e) {
			return;
		}

        // because MasterPass library might not have loaded yet.
        try
        {
            var callBacks =  {
                // if successCallback and failureCallback are defined masterpass gives control over the redirection to the merchant page.
                // we want to redirect the shopper to the shopperResultUrl and thus don't use success and failure callbacks.
                cancelCallback: Options.onLightboxCancel
            };
            var extendedOptions = $.extend({}, message.json, callBacks);

            MasterPass.client.checkout(extendedOptions);
        }
        catch (e)
        {
            PaymentView.showPleaseTryAgainMessage($('.wpwl-form-virtualAccount-MASTERPASS'));
            Tracking.exception("Unable to init masterpass, because: " + e.message);
        }
	};

	Payment.unload = function(){
		Payment.detachListeners();
		Payment.unsetIframeCommunication();
	};

	Payment.executePayment = function (containerClassName) {
		if (containerClassName) {
			var container = $('.' + containerClassName);
			if (container) {
				if (containerClassName.indexOf("virtualAccountSubmitInline-KLARNA_PAYMENTS") > -1) {
					Payment.callKlarna();

				} else if (containerClassName.indexOf('virtualAccount-YANDEX_CHECKOUT') > -1) {
				    Payment.callYandexCheckout(container);

				} else if (containerClassName.indexOf("virtualAccount-AFFIRM") > -1) {
					Payment.callAffirm(container);

				} else if (containerClassName.indexOf("virtualAccount-AFTERPAY_PACIFIC") > -1) {
					Payment.callAfterPayPacific(container);

				} else if (containerClassName.indexOf("virtualAccount-BANCONTACT_LINK") > -1) {
					Payment.callBancontactLink(container);

				} else if (containerClassName.indexOf("virtualAccount-APPLEPAY") > -1) {
					Payment.callApplePay(container);

				} else if (containerClassName.indexOf("virtualAccount-GOOGLEPAY") > -1) {
					Payment.callGooglePay(container);
				} else {
					var $form = container.find('form');
					$form.submit();
				}
			}
		}
	};

	Payment.callAffirm = function (container) {
		var $button = container.find('button').attr('id', "affirmButton");
		$button.click();
	};

	Payment.callKlarna = function () {
		KlarnaPaymentsInlineWidget.authorizePaymentAndSubmit();
	};

	Payment.callYandexCheckout = function(container) {
	    var $button = container.find('button');
        $button.click();
	};

	Payment.callAfterPayPacific = function(container) {
		var $button = container.find('button');
		$button.click();
	};

	Payment.callBancontactLink = function(container) {
		var $button = container.find('button');
		$button.click();
	};

	Payment.callGooglePay = function(container) {
		var $button = container.find('button');
		$button.click();
	};

	Payment.callApplePay = function(container) {
	    var $form = container.find('form');
		ApplePay.start($form);
	};

    Payment.detachListeners = function(){
        $(document).off('.wpwlEvent');
        $(window).off(".wpwlEvent");
        $(document).off('.isValid', 'form.wpwl-form');
    };

    Payment.unsetIframeCommunication = function(){
		var iframeCommunications = Payment.iframeCommunications || {};
		Object.keys(iframeCommunications).forEach(
			function(key){
				Payment.iframeCommunications[key].stopListening();
				Payment.iframeCommunications[key] = undefined;
			}
		);
		Payment.iframeCommunications = undefined;
    };

	return Payment;
});

define('module/Country',['require','module/I18n'],function(require){
    var I18n = require('module/I18n');

    //Country.codes [{value,label},{value,label},{value,label}...]
    //Country.states [COUNTRY_CODE:[{value,label},{value,label}{value,label}...]]

    //We just have the state names for a few countries
    //It's easier to have them in a separate array and not inside country objects.

    var Country = {
        codes : I18n.countryCodes,
        states : {
            "US": [
                {"value": "","label": "Please select"},
                {"value": "AL","label": "Alabama"},
                {"value": "AK","label": "Alaska"},
                {"value": "AZ","label": "Arizona"},
                {"value": "AR","label": "Arkansas"},
                {"value": "CA","label": "California"},
                {"value": "CO","label": "Colorado"},
                {"value": "CT","label": "Connecticut"},
                {"value": "DE","label": "Delaware"},
                {"value": "DC","label": "District Of Columbia"},
                {"value": "FL","label": "Florida"},
                {"value": "GA","label": "Georgia"},
                {"value": "HI","label": "Hawaii"},
                {"value": "ID","label": "Idaho"},
                {"value": "IL","label": "Illinois"},
                {"value": "IN","label": "Indiana"},
                {"value": "IA","label": "Iowa"},
                {"value": "KS","label": "Kansas"},
                {"value": "KY","label": "Kentucky"},
                {"value": "LA","label": "Louisiana"},
                {"value": "ME","label": "Maine"},
                {"value": "MD","label": "Maryland"},
                {"value": "MA","label": "Massachusetts"},
                {"value": "MI","label": "Michigan"},
                {"value": "MN","label": "Minnesota"},
                {"value": "MS","label": "Mississippi"},
                {"value": "MO","label": "Missouri"},
                {"value": "MT","label": "Montana"},
                {"value": "NE","label": "Nebraska"},
                {"value": "NV","label": "Nevada"},
                {"value": "NH","label": "New Hampshire"},
                {"value": "NJ","label": "New Jersey"},
                {"value": "NM","label": "New Mexico"},
                {"value": "NY","label": "New York"},
                {"value": "NC","label": "North Carolina"},
                {"value": "ND","label": "North Dakota"},
                {"value": "OH","label": "Ohio"},
                {"value": "OK","label": "Oklahoma"},
                {"value": "OR","label": "Oregon"},
                {"value": "PA","label": "Pennsylvania"},
                {"value": "RI","label": "Rhode Island"},
                {"value": "SC","label": "South Carolina"},
                {"value": "SD","label": "South Dakota"},
                {"value": "TN","label": "Tennessee"},
                {"value": "TX","label": "Texas"},
                {"value": "UT","label": "Utah"},
                {"value": "VT","label": "Vermont"},
                {"value": "VA","label": "Virginia"},
                {"value": "WA","label": "Washington"},
                {"value": "WV","label": "West Virginia"},
                {"value": "WI","label": "Wisconsin"},
                {"value": "WY","label": "Wyoming"}
            ],
            "CA" : [
                {"value":"", "label":"Please select"},
                {"value":"AB", "label":"Alberta"},
                {"value":"BC", "label":"British Columbia"},
                {"value":"MB", "label":"Manitoba"},
                {"value":"NB", "label":"New Brunswick"},
                {"value":"NL", "label":"Newfoundland and Labrador"},
                {"value":"NS", "label":"Nova Scotia"},
                {"value":"ON", "label":"Ontario"},
                {"value":"PE", "label":"Prince Edward Island"},
                {"value":"QC", "label":"Quebec"},
                {"value":"SK", "label":"Saskatchewan"},
                {"value":"NT", "label":"Northwest Territories"},
                {"value":"NU", "label":"Nunavut"},
                {"value":"YT", "label":"Yukon"}
            ]
        }
	};

	return Country;
});

define('module/Billing',['require','jquery','module/Country','module/Options','module/Parameter','module/I18n'],function(require) {
	var $ = require('jquery');
	var Country = require('module/Country');
	var Options = require('module/Options');
	var Parameter = require('module/Parameter');
    var I18n = require('module/I18n');

	var Billing = {};


    Billing.createBillingBeforeElement = function(beforeElement) {
        function getOptionsFromValuesArray(valuesArray){
            var sortedArray = valuesArray.sort(function(a, b) {return a.label.localeCompare(b.label);});
            return sortedArray.reduce(function(accumulator, currentVal){
                return accumulator + '<option value="' + currentVal.value + '">' + currentVal.label + '</option>';
            }, "");
        }

        function getStates( country ){
            return getOptionsFromValuesArray(Country.states[country]);
        }

        if( Options.billingAddress === undefined )
            return;

        var group = $('<div class="wpwl-group wpwl-clearfix">');
        var wrapper = $('<div class="wpwl-wrapper"></div>');
        var supWrapper = $('<div class="wpwl-sup-wrapper"></div>');
        var label = $('<div class="wpwl-label"></div>');
        var input = $('<input autocomplete="off" type="text" name="" class="wpwl-control" placeholder="">');
        var select = $('<select class="wpwl-control" name=""></select>');
        var text = $('<div class="wpwl-text"></div>');

        //add billing line
        var billingGroup = group.clone().addClass('wpwl-group-billing');
        var billingLabel = label.clone().addClass('wpwl-label-billing').html(I18n.billingAddress);
        var billingWrapper = wrapper.clone().addClass('wpwl-wrapper-billing');
        var billingText;

        //build billing address container
        var country = select.clone()
            .addClass('wpwl-control-country')
            .attr('name',  Parameter.BILLING_COUNTRY )
            .html(getOptionsFromValuesArray(Country.codes))
            .val(Options.billingAddress.country);

        var stateText = input.clone()
            .addClass('wpwl-control-stateText')
            .attr('name',  Parameter.BILLING_STATE)
            .attr('maxlength', '50')
            .attr('placeholder', I18n.billingStatePlaceholder)
            .val(Options.billingAddress.state);

        var stateSelect = select.clone()
            .addClass('wpwl-control-stateSelect')
            .attr('maxlength', '50');

        var city = input.clone()
            .addClass('wpwl-control-city')
            .attr('name',  Parameter.BILLING_CITY)
            .attr('placeholder', I18n.billingCityPlaceholder)
            .attr('maxlength', '80')
            .val(Options.billingAddress.city);

        var postcode = input.clone()
            .addClass('wpwl-control-postcode')
            .attr('name',  Parameter.BILLING_POST_CODE)
            .attr('placeholder', I18n.billingPostCodePlaceholder)
            .attr('maxlength', '30')
            .val(Options.billingAddress.postcode);

        var street1 = input.clone()
            .addClass('wpwl-control-street1')
            .attr('name',  Parameter.BILLING_STREET1)
            .attr('placeholder', I18n.billingStreet1Placeholder)
            .attr('maxlength', '100')
            .val(Options.billingAddress.street1);

        var street2 = input.clone()
            .addClass('wpwl-control-street2')
            .attr('name',  'billing.street2')
            .attr('placeholder', Options.mandatoryBillingFields.street2 ? I18n.billingStreet2PlaceholderMandatory : I18n.billingStreet2Placeholder)
            .attr('maxlength', '100')
            .val(Options.billingAddress.street2);

        var countryWrapper = supWrapper.clone().addClass('wpwl-sup-wrapper-country');
        var stateWrapper = supWrapper.clone().addClass('wpwl-sup-wrapper-state');
        var cityWrapper = supWrapper.clone().addClass('wpwl-sup-wrapper-city');
        var postcodeWrapper = supWrapper.clone().addClass('wpwl-sup-wrapper-postcode');
        var street1Wrapper = supWrapper.clone().addClass('wpwl-sup-wrapper-street1');
        var street2Wrapper = supWrapper.clone().addClass('wpwl-sup-wrapper-street2');

        countryWrapper.append( country );
        stateWrapper.append( stateSelect ).append( stateText );
        cityWrapper.append( city );
        postcodeWrapper.append( postcode );
        street1Wrapper.append( street1 );
        street2Wrapper.append( street2 );

        if( Options.billingAddress.country === 'US' || Options.billingAddress.country === 'CA' ){
            stateSelect.html( getStates ( Options.billingAddress.country ) ).val( Options.billingAddress.state );
        }

        $.each([country, stateSelect], function(i, v) {
            if( $(v).val() === null || $(v).val() === undefined )
                $(v).val('');
        });

        //add billing line
        var showBillingLine = true;
        if ($.isPlainObject(Options.billingAddress)) {
            $.each(Options.billingAddress, function(i, val) {
                //check given values are neither empty nor undefined
                if( i !== 'street2' && (val === undefined || val.length === 0))
                    showBillingLine = false;
            });
        }
        if( Options.billingAddress.country === undefined || Options.billingAddress.state === undefined ||
                Options.billingAddress.city === undefined || Options.billingAddress.postcode === undefined ||
                Options.billingAddress.street1 === undefined || country.val() === '' || stateSelect.val() === ''){
            showBillingLine = false;
        }

        if( showBillingLine ) //show single billing line or billing address container
        {
            billingText = text.clone()
                .addClass('wpwl-text-billing')
                .html( [
                    [
                        [Options.billingAddress.street1, Options.billingAddress.street2].join(' '),
                        Options.billingAddress.postcode,
                        Options.billingAddress.city,
                        Options.billingAddress.country, Options.billingAddress.state
                    ].join(', '),
                    '<span class="editbilling">(edit)</span>']
                    .join(' '));
            $.each([country, stateSelect, stateText, city, postcode, street1, street2], function(e,v){ $(v).hide(); });
            stateSelect.removeAttr('name');
        }
        else if (Options.billingAddress.country === 'US' || Options.billingAddress.country === 'CA'){
            stateSelect.show().attr('name', Parameter.BILLING_STATE);
            stateText.hide().removeAttr('name');
        }
        else{
            stateSelect.hide().removeAttr('name');
            stateText.show().attr('name', Parameter.BILLING_STATE);
        }

        billingGroup.append(
            $(billingLabel)).append(
                $(billingWrapper)
                    .append($(billingText))
                    .append($(countryWrapper))
                    .append($(stateWrapper))
                    .append($(cityWrapper))
                    .append($(postcodeWrapper))
                    .append($(street1Wrapper))
                    .append($(street2Wrapper))
            );

		//add container
		beforeElement.before($(billingGroup));

        //listener
        billingGroup.find('.wpwl-control-country').on('change', function(){
            if( $(this).val() === 'US' || $(this).val() === 'CA' ){
                stateSelect.html( getStates( $(this).val() ) ).show().attr('name', Parameter.BILLING_STATE);
                stateText.hide().removeAttr('name').removeClass('wpwl-has-error');
                $(stateText).parent().find('.wpwl-hint-billingStateError').remove();
            }
            else{
                stateSelect.hide().removeAttr('name').removeClass('wpwl-has-error');
                stateText.show().attr('name', Parameter.BILLING_STATE);
                $(stateSelect).parent().find('.wpwl-hint-billingStateError').remove();
            }
        });
        billingGroup.find('.editbilling').on('click', function(){
            //show input container
            $(this).hide();
            billingGroup.find('.wpwl-text-billing').hide();
            $.each([stateSelect, stateText], function(e,v){ $(v).removeAttr('name'); });
            var state =  (Options.billingAddress.country === 'US' || Options.billingAddress.country === 'CA') ? stateSelect : stateText;
            $(state).attr('name', Parameter.BILLING_STATE);
            $.each([country, state, city, postcode, street1, street2], function(e,v){ $(v).show(); });
        });
    };

	Billing.initBilling  = function(){
        $('.wpwl-group-submit').each(function(_, rawElem){
            Billing.createBillingBeforeElement($(rawElem));
        });
	};
	return Billing;
});

define('module/CardHolder',['require','jquery','module/Options','module/Parameter','module/I18n'],function(require) {
	var $ = require('jquery');
	var Options = require('module/Options');
	var Parameter = require('module/Parameter');
	var I18n = require('module/I18n');
	
	var CardHolder = {};	
	CardHolder.initCardHolder  = function(){
		
		if ( Options.forceCardHolderEqualsBillingName )
		{
			var input = $('<input autocomplete="off" type="text" name="" class="wpwl-control wpwl-control-empty" placeholder="">');

			// hide cardHolder and add billing first name/last name
			$('input[name="' + Parameter.CARD_HOLDER + '"]').attr('disabled', 'disabled').hide();
			var surNameInput = input.clone().addClass('wpwl-control-surName').attr('name', Parameter.SUR_NAME).attr('placeholder', I18n.surname).attr('maxlength', '50');
			var givenNameInput = input.clone().addClass('wpwl-control-givenName').attr('name', Parameter.GIVEN_NAME).attr('placeholder', I18n.givenName).attr('maxlength', '50');

			$('input[name="' + Parameter.CARD_HOLDER + '"]')
			.before( givenNameInput )
			.before( surNameInput );

			$('.wpwl-control-surName, .wpwl-control-givenName').on('change', function(){
				$('input[name="' + Parameter.CARD_HOLDER + '"]').val( [$('.wpwl-control-givenName').val(), $('.wpwl-control-surName').val()].join(' '));
			});
		}
	};
	return CardHolder;
});

define('module/integrations/RedShieldDeviceIdMdrLoader',['require','module/InternalRequestCommunication'],function(require) {

    var InternalRequestCommunication = require('module/InternalRequestCommunication');

    var RedShieldDeviceIdMdrLoader = {};

    // Multi-Domain Recognition
    RedShieldDeviceIdMdrLoader.loadMdr = function(url) {
        InternalRequestCommunication.getSender()
            .then(function(sender) {
                return sender.loadIovationMdr(url);
            });
    };

    return RedShieldDeviceIdMdrLoader;
});
/**
This is the old way to load the iovation library.
It has the downside that the library script is loaded from an external site,
which users are sometimes blocking.
The name of this module is supposed to warn that this is not the preferred solution.
*/
/* jshint camelcase: false */
/* globals ioGetBlackbox */
define('module/BlockableIovationLoader',['jquery', 'module/logging/LoggerFactory'], function($, LoggerFactory){

    var logger = LoggerFactory.getLogger('RedShieldDeviceId');

    var browserFingerprintSent = false;
    var waitTime = 5000;
    var iovationScriptLoadingError = false;

    function send(url, data) {

        try {
            var params = {
                url: url,
                method: "POST",
                contentType: "application/x-www-form-urlencoded",
                data: "customer.browserFingerprint.value=" + encodeURIComponent(data)
            };
            $.ajax(params);

            return true;
        }
        catch(error) {
            logger.error("Exception while sending iovation browser fingerprint. Error message: " +
             error.message + " Stack: " + error.stack);

            return false;
        }
    }

    function send_bb(updateUrl, bb ) {
        if ( browserFingerprintSent ) return;

        browserFingerprintSent = send(updateUrl, bb );
    }

    var IovationLoader = {};

    IovationLoader.load = function(updateUrl, iovationUrl) {
        // We store in the window object the settings for the iovation script
        window.io_install_stm = false; // do not install Active X
        window.io_exclude_stm = 12; // do not run Active X
        window.io_install_flash = false; // do not install Flash
        window.io_enable_rip = true; // collect Real IP information

        // This function is called by iovation when the blackbox has been updated
        // The iovation script will look for it in the window object
        window.io_bb_callback = function (bb, isComplete) {
            if ( isComplete ) send_bb(updateUrl, bb );
        };

        // Set up timer to give us a maximum wait time before giving up on waiting
        // for all of the data to be collected. At that point, just send what is
        // available
        setTimeout(function () {

            if(browserFingerprintSent || iovationScriptLoadingError ) return;

            logger.info("Iovation library did not call back with collected browser fingerprint after " +
                waitTime + " ms. " + "Attempting now to retrieve data.");

            try {
                if(typeof ioGetBlackbox === 'undefined') {
                    logger.error("The Iovation script did not expose the function ioGetBlackbox. ");
                }
                else {
                    var bb_info = ioGetBlackbox();
                    send_bb(updateUrl, bb_info.blackbox);
                }
            }
            catch (error) {

                logger.error("Exception while retrieving iovation browser fingerprint. Error message: " +
                    error.message + " Stack: " + error.stack);

                send_bb(updateUrl, "");

                return;
            }
        }, waitTime);

        // now load the iovation script
        $.getScript(iovationUrl)
            .fail(function() {
                logger.error("Failed to load iovation script, possibly the url is blocked by client");
                iovationScriptLoadingError = true;
            });
    };

    return IovationLoader;
});

define('module/integrations/RedShieldDeviceId',['require','module/Generate','module/Wpwl','module/integrations/RedShieldDeviceIdMdrLoader','module/BlockableIovationLoader'],function(require) {

	var Generate = require("module/Generate");
    var Wpwl = require('module/Wpwl');
    var RedShieldDeviceIdMdrLoader = require('module/integrations/RedShieldDeviceIdMdrLoader');
    var BlockableIovationLoader = require('module/BlockableIovationLoader');

    var RedShieldDeviceId = {};

    RedShieldDeviceId.loadScript = function() {
        var iovationConfig = Wpwl.checkout.config.workflowSpecificConfig.iovationConfig;
        if (!iovationConfig.active) {
            return;
        }

        var updateUrl = Generate.string(Wpwl.url, "/v1/checkouts/", Wpwl.checkout.id);

        if (iovationConfig.mdr) {
            // Browser fingerprint collection will be done using Multi-domain recognition
            RedShieldDeviceIdMdrLoader.loadMdr(updateUrl);
        } else {
            // the old way
            BlockableIovationLoader.load(updateUrl, iovationConfig.url);
        }
    };

    return RedShieldDeviceId;
});
define('module/integrations/CyberSourceRiskDeviceId',['require','module/Wpwl','module/Util'],function(require) {

	var Wpwl = require('module/Wpwl');
	var Util = require('module/Util');

    var CyberSourceRiskDeviceId = {};

    CyberSourceRiskDeviceId.loadScript = function() {
        var cyberSourceRiskManagementConfig = Wpwl.checkout.config.workflowSpecificConfig.cyberSourceRiskManagementConfig;
        if (!Util.isNullOrUndefined(cyberSourceRiskManagementConfig) &&
            cyberSourceRiskManagementConfig.active && cyberSourceRiskManagementConfig.collectDeviceId)
        {
            var threatMetrixScript = document.createElement('iframe');
            threatMetrixScript.setAttribute('class', 'wpwl-target');
            threatMetrixScript.setAttribute('style', 'display:none');
            threatMetrixScript.setAttribute('src', cyberSourceRiskManagementConfig.srcUrl);
            document.body.appendChild(threatMetrixScript);
        }
    };
    return CyberSourceRiskDeviceId;
});

define('text!template/loadKountClient.html',[],function () { return '<script id="loadKtClient" type=\'text/javascript\'>\n    var srcUrl = \'<%- obj.url %>\';\n    var wpwlKaClient;\n    $.getScript(srcUrl, function () {\n        wpwlKaClient = new ka.ClientSDK();\n        wpwlKaClient.autoLoadEvents();\n    });\n</script>';});

define('module/integrations/KountIntegration',['require','jquery','module/Template','module/Payment','module/Generate','text!template/loadKountClient.html'],function(require) {
  var $ = require("jquery");
  var Template = require("module/Template");
  var Payment = require("module/Payment");
  var Generate = require("module/Generate");

  var javascriptTemplate = require("text!template/loadKountClient.html");

  var KountIntegration = {};

  KountIntegration.loadScript = function() {
    if (Payment.kountActive !== true) {
        return;
    }
    var srcUrl = getKountSrcUrl();

    var template = new Template(javascriptTemplate);
    template.addObject({ url: srcUrl });
    var $body = $("body");
    $body.append(getKountElement());
    $body.append(template.render());
  };

  function getKountElement() {
    return "<div class='kaxsdc' data-event='load'></div>";
  }

  function getKountSrcUrl() {
    return Generate.string(
      Payment.kountBaseUrl,
      "/collect/sdk?",
      "m=",
      Payment.kountMerchantId,
      "&s=",
      Payment.kountSessionId
    );
  }

  return KountIntegration;
});

/**
 * Module contains logic specific for rendering of IDEAL payment widget only.
 */
define('module/IdealPaymentWidget',['require','jquery','module/Util','module/Tracking','module/Options','module/error/OppError','lib/Spinner','module/InternalRequestCommunication'],function(require) {
    var $ = require('jquery');
    var Util = require('module/Util');
    var Tracking = require("module/Tracking");
    var Options = require('module/Options');
	var OppError = require("module/error/OppError");
    var Spinner = require('lib/Spinner');
    var InternalRequestCommunication = require('module/InternalRequestCommunication');

    var IdealPaymentWidget = {};

    /**
     * Fetches bank list dynamically from OPP backend using internalRequestSender.
     *
     * If fetched bank data is not valid, default content of dropdown will not be updated.
     */
    IdealPaymentWidget.updateBanks = function(configurationEndpoint) {
        var spinner = new Spinner(Options.spinner).spin($(".wpwl-container-onlineTransfer-IDEAL").get(0));

        disableInputAndPayButton(true);
        var populatedDeferred = $.Deferred();
        InternalRequestCommunication.getSender()
            .then(function(sender) {
                return sender.send({
                    url: configurationEndpoint,
                    datatype: 'json'
                });
            })
            .then(function(data) {
                return populateDropdown(data);
            })
            .then(function(){
                disableInputAndPayButton(false);
                spinner.stop();
                populatedDeferred.resolve();
            })
            .fail(function(reason) {
                Tracking.exception('Failed to dynamically fetch Ideal banks. Reason: ' + reason);
                disableInputAndPayButton(false);
                spinner.stop();
                populatedDeferred.reject(new OppError(
                    'Error while loading iDEAL banks', 'PaymentFormError'));
            });
        return populatedDeferred.promise();
    };

    function getSelectBox() {
        return $('select.wpwl-control-bankName', 'div.wpwl-container-onlineTransfer-IDEAL');
    }

    function disableInputAndPayButton(disabled) {
        getSelectBox().prop("disabled", disabled);
        $(".wpwl-button-pay").prop("disabled", disabled);
    }

    function populateDropdown(data) {
        var deferred = $.Deferred();

        try {
            validateIdealBanks(data);

            var selectBox = getSelectBox();
            selectBox.empty();
            $.each(data, function(_, bank) {
                selectBox.append('<option value="' + bank.id + '">' + bank.name + '</option>');
            });

            deferred.resolve();
        } catch (e) {
            deferred.reject(e);
        }

        return deferred.promise();
    }

    function validateIdealBanks(data) {
        if (!(data instanceof Array)) {
            throw new Error('Fetched data is not an array');
        }

        if (data.length === 0) {
            throw new Error('Fetched array data is empty');
        }

        $.each(data, function(_, bank) {
            if (Util.isBlank(bank.id)) {
                throw new Error('Bank id cannot be empty');
            }

            if (Util.isBlank(bank.name)) {
                throw new Error('Bank name cannot be empty');
            }
        });
    }

    return IdealPaymentWidget;
});

/**
 * Module contains logic specific for rendering of PayPal payment widget only
 */
define('module/forms/PaypalRestPaymentForm',['require','shim/ObjectCreate','module/forms/VirtualAccountPaymentForm','jquery','module/Wpwl','module/Util','module/Generate','module/SpecForm','module/Options','module/error/SessionError','module/error/WidgetError','module/error/OppError','lib/Spinner','module/InternalRequestCommunication','module/Parameter','module/logging/LoggerFactory'],function (require) {
    var ObjectCreate = require('shim/ObjectCreate');
    var VirtualAccountPaymentForm = require('module/forms/VirtualAccountPaymentForm');

    var $ = require('jquery');
    var Wpwl = require('module/Wpwl');
    var Util = require('module/Util');
    var Generate = require('module/Generate');
    var SpecForm = require('module/SpecForm');
    var Options = require('module/Options');
    var SessionError = require('module/error/SessionError');
    var WidgetError = require('module/error/WidgetError');
    var OppError = require('module/error/OppError');
    var Spinner = require('lib/Spinner');
    var InternalRequestCommunication = require('module/InternalRequestCommunication');
    var Parameter = require('module/Parameter');
    var LoggerFactory = require('module/logging/LoggerFactory');

    var logger = LoggerFactory.getLogger('PaypalRestPaymentForm');

    var PAYPAL_SDK_URL = "https://www.paypal.com/sdk/js";
    var CUSTOM_BUTTON_FORM_ID = "paypalHostedButton";
    var SHOP_ORIGIN_PARAMETER = 'shopOrigin';
    var REDIRECT_URL_PARAMETER = 'redirectUrl';
    var METHOD_PARAMETER = 'method';
    var CHECKOUT_ID_PARAMETER = 'id';
    var RESOURCE_PATH_PARAMETER = 'resourcePath';
    var HTTP_POST = 'POST';
    var HTTP_GET = 'GET';
    var PAYMENT = '/payment';
    var CONFIRM = '/confirm';
    var HEADER_FORMAT = {"Accept": "application/json"};

    /**
     * @param $form jquery object for the form inside which button is rendered
     * @constructor defines callbacks which will be triggered by PayPal
     */
    var PaypalRestPaymentForm = function($form) {
        VirtualAccountPaymentForm.call(this, $form);

        var thisObj = this;
        this.hiddenInputParameters = $form.find('input');
        this.form = new SpecForm($form);
        this.spinner = null;
        this.sendPaymentBrandToCheckout = thisObj.sendPaymentBrandToCheckout.bind(thisObj);

        // sessionTimeoutHandled added to prevent multiple times invocation of Options.onError for single error which is unexpected for customers and may break integration:
        // 1. First time Options.onError invoked in notifyError handling error response from backend after unsuccessful attempt to crate order,
        //    this error handling added in createOrder and createBillingAgreement which make asynchronous request and return promise object back to PayPal JS SDK
        // 2. Since we return promise object to PayPal, it's rejection callback invoked when notifyError finished and control flow return to PayPal JS SDK
        //    This callback invokes onError method provided to PayPal smart buttons options and inside that method Options.onError invoked second time.
        // So to prevent second time invocation sessionTimeoutHandled set to "true" when notifyError handled error and prevents to invoke Options.onError handler second time
        this.sessionTimeoutHandled = false;

        this.buttonCallbacks = {
            onApprove: thisObj.onApprove.bind(thisObj),
            onError: thisObj.onError.bind(thisObj)
        };

        if (Wpwl.checkout.config.createRegistration) {
            this.buttonCallbacks.createBillingAgreement = thisObj.createBillingAgreement.bind(thisObj);
        } else {
            this.buttonCallbacks.createOrder = thisObj.createOrder.bind(thisObj);
        }
    };

    PaypalRestPaymentForm.prototype = ObjectCreate(VirtualAccountPaymentForm.prototype);
    PaypalRestPaymentForm.prototype.constructor = PaypalRestPaymentForm;

    PaypalRestPaymentForm.prototype.buildPaypalButtonUrl = function() {

        var currency = Options.paypal.currency || Wpwl.checkout.currency;
        var checkoutData = Wpwl.checkout.config.paypalRestConfig.clientId && Wpwl.checkout.config.paypalRestConfig.merchantId ?
            this.normalCheckout() : this.fastCheckout();

        if(Wpwl.checkout.config.createRegistration) {
            return Generate.string(PAYPAL_SDK_URL, "?client-id=", checkoutData.clientId, "&vault=true&commit=false");
        } else {
            return Generate.string(PAYPAL_SDK_URL,
                "?integration-date=2019-09-10", // for backward compatibility with PayPal
                "&merchant-id=", checkoutData.merchantId,
                "&client-id=", checkoutData.clientId,
                (currency ? "&currency=" + currency : ""),
                "&intent=", checkoutData.intent,
                "&commit=", checkoutData.commit);
        }
    };

    PaypalRestPaymentForm.prototype.fastCheckout = function () {
        var clientId = Wpwl.isTestSystem ?
            "ATpyeyrXd-zV-Zgqr51eo5es72xydmmjYJ-prXLOYLO2aDDG0xJb2S5JHkL-1N37Ejb-ih9LYSiVN2xC" :
            "AXB5vyZAmhNZnBM9HVnor-LVb5vxX_HP1diO9HlK74xLhEGmJCeUYjzEOoXbUBN44kTW28yXh4jZWsGj";
        return {
            clientId: Options.paypal.clientId || clientId,
            merchantId: Options.paypal.merchantId,
            intent: Options.paypal.intent, // default is authorize
            commit: false //Paypal continue = true
        };
    };

    PaypalRestPaymentForm.prototype.normalCheckout = function () {

        return {
            clientId: Wpwl.checkout.config.paypalRestConfig.clientId,
            merchantId: Wpwl.checkout.config.paypalRestConfig.merchantId,
            intent: this.getIntent(),
            commit: this.isPayNow()
        };
    };

    PaypalRestPaymentForm.prototype.downloadButton = function() {
        var deferred = $.Deferred();
        var currentSetup = {};

        this.showSpinner();
        polyfillForObjectAssign(); // for support IE11

        Object.assign(currentSetup, $.ajaxSetup());
        $.ajaxSetup({cache: true}); // to avoid extra query params in url
        $.getScript(this.buildPaypalButtonUrl())
            .done(deferred.resolve)
            .fail(deferred.reject);
        $.ajaxSetup(currentSetup);

        return deferred.promise();
    };

    PaypalRestPaymentForm.prototype.showSpinner = function() {
        if (this.spinner === null) {
            this.spinner = new Spinner(Options.spinner).spin($(".wpwl-container-virtualAccount-PAYPAL").get(0));
        }
    };

    PaypalRestPaymentForm.prototype.forwardToShopperResultUrl = function() {
        var params = this.initRedirectParameters();

        return  Generate.string(Wpwl.url, '/v', Wpwl.apiVersion, '/redirect.html?', params);
    };

    PaypalRestPaymentForm.prototype.createBillingAgreement = function() {
        var data = this.prepareUriEncodedParameters();
        var processCreatePaymentResponse = this.processCreatePaymentResponse.bind(this);
        var notifyError = this.notifyError.bind(this);
        return PaypalRestPaymentForm.sendInternalPostRequest(this.form.getAction(), HEADER_FORMAT, data)
            .then(processCreatePaymentResponse)
            .fail(notifyError);
    };

    // triggered after user clicks PayPal button
    PaypalRestPaymentForm.prototype.createOrder = function () {
        var data = this.prepareUriEncodedParameters();
        var processCreatePaymentResponse = this.processCreatePaymentResponse.bind(this);
        var notifyError = this.notifyError.bind(this);

        // Fast checkout: Look for the createCheckout callback function
        if (typeof Options.createCheckout !== "function") {
            return PaypalRestPaymentForm.sendInternalPostRequest(this.form.getAction(), HEADER_FORMAT, data)
                .then(processCreatePaymentResponse)
                .fail(notifyError);
        }
        return Options.createCheckout()
            .then(function(checkoutId) {
                if (checkoutId) {
                    Wpwl.checkout.id = checkoutId;
                    var endpoint = Generate.string(Wpwl.url, '/v', Wpwl.apiVersion, '/checkouts/',
                        Wpwl.checkout.id, '/payment');
                    return PaypalRestPaymentForm.sendInternalPostRequest(endpoint, HEADER_FORMAT, data);
                }
            })
            .then(processCreatePaymentResponse)
            .catch(function(response) {
                var info = "Creating checkout returned error: " + JSON.stringify(response);
                notifyError(info);
            });
    };

    // triggered after user approves payment within PayPal popup
    PaypalRestPaymentForm.prototype.onApprove = function(data, actions) {
        this.redirect(actions);
    };

    PaypalRestPaymentForm.prototype.onError = function(error) {
        logger.info("PayPal invoked onError callback with error reason: " + error);
        if (!this.sessionTimeoutHandled) {
            Options.onError(ObjectCreate(WidgetError.prototype));
        } else {
            logger.info("Subsequent onError callback after session timeout error suppressed");
        }
    };

    PaypalRestPaymentForm.prototype.redirect = function(actions) {
        var notifyAsyncError = this.notifyAsyncError.bind(this);
        var form = this;
        var params = {
            url: getCheckoutEndpoint(CONFIRM),
            method: HTTP_POST,
            dataType: "text",
        };

        PaypalRestPaymentForm.sendInternalRequestWithParams(params)
            .then(function(data) {
                if (data && JSON.parse(data).error === 'INSTRUMENT_DECLINED') {
                    actions.restart();
                } else {
                    form.assignLocation(form.forwardToShopperResultUrl());
                }
            })
            .fail(notifyAsyncError);
    };

    PaypalRestPaymentForm.prototype.assignLocation = function(url) {
        window.top.location.assign(url);
    };

    PaypalRestPaymentForm.prototype.initRedirectParameters = function() {
        var params = Generate.string(METHOD_PARAMETER, "=", HTTP_GET);
        params += Generate.string("&", CHECKOUT_ID_PARAMETER, "=", Wpwl.checkout.id);
        params += Generate.string("&", RESOURCE_PATH_PARAMETER, "=", getCheckoutEndpoint(PAYMENT));
        params += Generate.string("&", SHOP_ORIGIN_PARAMETER, "=", Util.getOrigin());
        params += Generate.string("&", REDIRECT_URL_PARAMETER, "=", this.getShopperResultUrl());
        return params;
    };

    PaypalRestPaymentForm.prototype.fixedEncodeURIComponent = function(str) {
        return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
            return '%' + c.charCodeAt(0).toString(16);
        });
    };

    PaypalRestPaymentForm.prototype.prepareUriEncodedParameters = function() {
        var data = "";

        for (var i = 0; i < this.hiddenInputParameters.length; i++) {
            if (data.length > 0) {
                data += "&";
            }
            var param = this.hiddenInputParameters[i];
            if (param.name === Parameter.FORTER_COOKIE) {
                param.value = Util.getCookie("forterToken");
            }
            var uriEncodedValue = this.fixedEncodeURIComponent(param.value);
            data += Generate.string(param.name, '=', uriEncodedValue);
        }
        return data;
    };

    PaypalRestPaymentForm.prototype.updateCheckoutWithPaymentBrand = function() {
        return InternalRequestCommunication.getSender()
            .then(this.sendPaymentBrandToCheckout);
    };

    PaypalRestPaymentForm.prototype.sendPaymentBrandToCheckout = function(sender) {
        return sender.send({
            url: getCheckoutEndpoint(),
            method: HTTP_POST,
            datatype: 'json',
            data: {'paymentBrand': this.getBrand()}
        });
    };

    PaypalRestPaymentForm.prototype.renderButton = function() {
        var buttonOptions = this.buttonCallbacks;
        if (Options.styling !== undefined && Options.styling !== null) {
            buttonOptions.style = Options.styling;
        }

        paypal.Buttons(buttonOptions)                    // jshint ignore:line
            .render("#" + PaypalRestPaymentForm.getCustomButtonFormId());
        this.spinner.stop();
    };

    PaypalRestPaymentForm.getCustomButtonFormId = function() {
        return CUSTOM_BUTTON_FORM_ID;
    };

    PaypalRestPaymentForm.sendInternalPostRequest = function(endpoint, headers, data) {
        return PaypalRestPaymentForm.sendInternalRequestWithParams({
            url: endpoint,
            method: HTTP_POST,
            headers: headers,
            data: data,
        });
    };

    PaypalRestPaymentForm.sendInternalRequestWithParams = function (params) {
        return InternalRequestCommunication.getSender().then(function(sender) {
            return sender.send(params);
        });
    };

    PaypalRestPaymentForm.prototype.isPayNow = function() {
        if (this.getBrand() !== "PAYPAL_CONTINUE") {
            return "true";
        }
        return "false";
    };

    PaypalRestPaymentForm.prototype.getIntent = function() {
        if (Wpwl.checkout.paymentType === "PA") {
            return "authorize";
        }
        return "capture";
    };

    PaypalRestPaymentForm.prototype.processCreatePaymentResponse = function(response) {
        this.callbackUrl = response.callbackUrl;
        return response.additionalAttributes.connectorId;
    };

    function getCheckoutEndpoint(suffix) {
        return Generate.string('/v', Wpwl.apiVersion, '/checkouts/',
            Wpwl.checkout.id, suffix);
    }

    PaypalRestPaymentForm.prototype.notifyAsyncError = function (reason) {
        logger.info("PayPal asynchronous redirect failed with error: " + reason);
        Options.onError(new OppError('Error in asynchronous workflow', 'WidgetError'));
    };

    PaypalRestPaymentForm.prototype.notifyError = function (reason) {
        if (SessionError.isSessionTimeout(reason)) {
            SessionError.onTimeoutError();
            this.sessionTimeoutHandled = true;
        } else {
            logger.info("PayPal request failed with error: " + reason);
        }
    };

    function polyfillForObjectAssign() {
        if (!Object.assign) {
            Object.defineProperty(Object, 'assign', {
                enumerable: false,
                configurable: true,
                writable: true,
                value: function (target) {
                    'use strict';
                    if (target === undefined || target === null) {
                        throw new TypeError('Cannot convert first argument to object');
                    }

                    var to = Object(target);
                    for (var i = 1; i < arguments.length; i++) {
                        var nextSource = arguments[i];
                        if (nextSource === undefined || nextSource === null) {
                            continue;
                        }

                        var keysArray = Object.keys(Object(nextSource));
                        for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
                            var nextKey = keysArray[nextIndex];
                            var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
                            if (desc !== undefined && desc.enumerable) {
                                to[nextKey] = nextSource[nextKey];
                            }
                        }
                    }
                    return to;
                }
            });
        }
    }

    return PaypalRestPaymentForm;
});

/*global Promise*/
define('module/integrations/AmazonPayWidget',['require','jquery','module/Wpwl','module/Generate','module/Options','module/error/SessionError','module/error/WidgetError','module/Tracking','lib/Spinner','module/InternalRequestCommunication','module/logging/LoggerFactory'],function (require) {

    var $ = require('jquery');
    var Wpwl = require('module/Wpwl');
    var Generate = require('module/Generate');
    var Options = require('module/Options');
    var SessionError = require('module/error/SessionError');
    var WidgetError = require("module/error/WidgetError");
    var Tracking = require("module/Tracking");
    var Spinner = require('lib/Spinner');
    var InternalRequestCommunication = require('module/InternalRequestCommunication');
    var LoggerFactory = require('module/logging/LoggerFactory');
    var logger = LoggerFactory.getLogger('AmazonPayWidget');

    /**
     * @param $form jquery object for the form inside which button is rendered
     * @constructor defines callbacks which will be triggered by AmazonPay
     */
    var AmazonPay = {
        amazon:null,
        button: null,
    };

    AmazonPay.loadScript = function() {
        if (Wpwl && Wpwl.checkout && Wpwl.checkout.currency === 'USD' ||
            Options.amazonpay && Options.amazonpay.ledgerCurrency === 'USD') {
            return $.getScript("https://static-na.payments-amazon.com/checkout.js");
        } else {
            return $.getScript("https://static-eu.payments-amazon.com/checkout.js");
        }
    };

   AmazonPay.fastCheckout = function () {
        var merchantId = Wpwl.isTestSystem ?
            "A2NLZLCXNBPPNB" :
            "unknown";
        return {
            merchantId: Options.amazonpay.merchantId || merchantId,
            ledgerCurrency: Options.amazonpay.ledgerCurrency,
            sandbox: Options.amazonpay.sandbox,
            checkoutLanguage: Options.amazonpay.checkoutLanguage,
            productType: Options.amazonpay.productType,
            placement: Options.amazonpay.placement,
            buttonColor: Options.amazonpay.buttonColor
        };
    };

    AmazonPay.normalCheckout = function(){
        return {
            merchantId: Wpwl.checkout.config.amazonpayConfig.merchantId,
            ledgerCurrency: Wpwl.checkout.config.amazonpayConfig.ledgerCurrency,
            sandbox: Wpwl.checkout.config.amazonpayConfig.sandbox,
            checkoutLanguage: Wpwl.checkout.config.amazonpayConfig.checkoutLanguage,
            productType: Wpwl.checkout.config.amazonpayConfig.productType,
            placement: Wpwl.checkout.config.amazonpayConfig.placement,
            buttonColor: Wpwl.checkout.config.amazonpayConfig.buttonColor
         };
    };

    AmazonPay.removeElementFromPage = function(element) {
        if (!('remove' in Element.prototype)) {
            Element.prototype.remove = function() {
                if (this.parentNode) {
                    this.parentNode.removeChild(this);
                }
            };
        }
        element.remove();
    };

    AmazonPay.updateButton = function($form){
        AmazonPay.loadScript().done(function() {
            var existingAmazonButton = document.getElementById("AmazonPay");
            if(existingAmazonButton) {
                AmazonPay.removeElementFromPage(existingAmazonButton);
            }
            AmazonPay.amazon = amazon;// jshint ignore:line
            var checkoutData = isFastCheckoutEnabled () ?
                        AmazonPay.fastCheckout() : AmazonPay.normalCheckout();
            $(".wpwl-button-brand").hide();
            $('<div id="AmazonPay"></div>').appendTo($form.parent());
            AmazonPay.button = AmazonPay.amazon.Pay.renderButton('#AmazonPay', {
                   merchantId: checkoutData.merchantId,
                   ledgerCurrency: checkoutData.ledgerCurrency,
                   sandbox: (checkoutData.sandbox &&
                            (''+checkoutData.sandbox).toLowerCase() === "true"),
                   checkoutLanguage: checkoutData.checkoutLanguage,
                   productType: checkoutData.productType,
                   placement: checkoutData.placement,
                   buttonColor: checkoutData.buttonColor,
            });
            logger.info("loaded, rendered amazonpay button");


            AmazonPay.button.onClick( function() {
                    if( isFastCheckoutEnabled() ) {
                        AmazonPay.createCheckoutWithPaymentAndSubmit($form);
                    }else{
                        AmazonPay.authorizePaymentAndSubmit($form);
                    }
                });
        }).fail(function( ) {
            logger.info("cannot load Amazon script");
          });
    };

    AmazonPay.isAmazonPayBrand = function(brand) {
        return (brand === "AMAZONPAY");
    };

    function isFastCheckoutEnabled(){
        return !Wpwl.checkout.config.amazonpayConfig ||
            !Wpwl.checkout.config.amazonpayConfig.merchantId ||
            Wpwl.checkout.config.amazonpayConfig.merchantId.length === 0;
    }

    AmazonPay.createCheckoutWithPaymentAndSubmit = function($form) {
        logger.info("createCheckoutWithPaymentAndSubmit called ");
        // Calling the callback function to create checkout and then begin session
        var createCheckoutResult = Options.createCheckout();
        var promise = Promise.resolve(createCheckoutResult);
        promise.then(function(checkoutId) {
            if (checkoutId) {
                Wpwl.checkout.id = checkoutId;
                var endpoint = Generate.string(Wpwl.url, '/v', Wpwl.apiVersion, '/checkouts/',
                    Wpwl.checkout.id, '/payment');
                $form.attr("action", endpoint);
                logger.info("(createCheckoutWithPaymentAndSubmit) computed form action checkoutid=" + $form.attr("action"));
                //AmazonPay.sendInternalPostRequest(endpoint, {"Accept": "application/json"}, $form.serialize());
                return AmazonPay.authorizePaymentAndSubmit($form);
            }
        }, function(response) {
            var info = "Creating checkout returned error: " + JSON.stringify(response);
            Tracking.exception(info);
        });
        return promise;
    };


    AmazonPay.authorizePaymentAndSubmit = function($form) {
        var spinner = new Spinner(Options.spinner).spin($(".wpwl-container-virtualAccount-AMAZONPAY").get(0));
        setPayButtonDisabledStatus(true);
        $form.append($.parseHTML(Generate.generateIsSourceBrowserHiddenParam($form)));
        InternalRequestCommunication.getSender()
        .then(function(sender) {
            return sender.send({
                url: $form.attr("action"),
                method: $form.attr("method"),
                headers: {
                    Accept: "application/json; charset=utf-8"
                },
                data: $form.serialize()
            });
        })
        .then(function(response) {
            console.log("got response " + response);
            spinner.stop();
            setPayButtonDisabledStatus(false);
            if(response && response.additionalAttributes && response.additionalAttributes.connectorId){
                var payload = JSON.parse(response.additionalAttributes.connectorId);
                AmazonPay.performInitCheckout(payload);
            }  else {
                logger.error("No create session response received, cannot proceed.");
                Options.onError(new WidgetError("AMAZONPAY", "no_session", "No create session response received, cannot proceed."));
            }
            })
         .fail(function(reason) {
            notifyError(reason);
         });
    };

    AmazonPay.performInitCheckout = function(initCheckoutData){
        try {
            AmazonPay.amazon.Pay.initCheckout(initCheckoutData);
        }catch (e) {
            console.log("error: " + e);
        }
    };

    function setPayButtonDisabledStatus(disabled) {
        $(".wpwl-button-brand").prop("disabled", disabled);
    }

    AmazonPay.returnClassSelector = function(classList) {
        if(classList){
            return "." + classList.replace(/\s/g, ".");
        }
        return "";
    };


    AmazonPay.processCreatePaymentResponse = function(response) {
        this.callbackUrl = response.callbackUrl;

        return response.additionalAttributes.connectorId;
    };

    function notifyError(reason) {
        console.log("AmazonPayWidget notifyError reason "+reason);
        if (SessionError.isSessionTimeout(reason)) {
            SessionError.onTimeoutError();
        } else {
            Options.onError(new WidgetError("AMAZONPAY", "ajax_submit_fail", "Exception occurred while submitting the form via an Ajax call. Reason: " + reason));
        }
    }

    return AmazonPay;
});

define('module/FrameMessenger',[],function(){

	var FrameMessenger = function(observers) {

	    this.isListening = false;
	    this.attachEventMethod = window.addEventListener ? "addEventListener" : "attachEvent";
        this.detachEventMethod = window.removeEventListener ? "removeEventListener" : "detachEvent";
        this.messageEvent = this.attachEventMethod === "attachEvent" ? "onmessage" : "message";
        this.observers = observers;
    };

	FrameMessenger.prototype.listenToRedirectMessage = function() {

        // avoid listening twice
	    if (this.isListening) {
	        return;
        }

        // Because the card iframe does not load static.js, we can't use the channel for sending/receiving messages
        var eventer = window[this.attachEventMethod];

	    //We need this to be able to stop listening
        this.bindedHandler = (this.handleMessage).bind(this);

        // Listen to message from child window
        eventer(this.messageEvent, this.bindedHandler);
        this.isListening = true;
	};

    FrameMessenger.prototype.stopListening = function () {

        // cannot "unlisten" twice :)
        if (!this.isListening){
            return;
        }

        var eventer = window[this.detachEventMethod];
        eventer(this.messageEvent, this.bindedHandler);
        this.isListening = false;
    };

    FrameMessenger.prototype.handleMessage = function(message) {

        this.observers.forEach(function(observer) {
            if (observer.validate(message)) {
                observer.notify(message);
            }
        });
    };

	return FrameMessenger;
});
/* jshint ignore:start */
define('module/integrations/forter',['require'],function(require){
    var Forter={};
    Forter.enableForter=(function (siteId) {function t(t,e){for(var n=t.split(""),r=0;r<n.length;++r)n[r]=String.fromCharCode(n[r].charCodeAt(0)+e);return n.join("")}function e(e){return t(e,-l).replace(/%SN%/g,siteId)}function n(t){try{S.ex=t,g(S)}catch(e){}}function r(t,e,n){var r=document.createElement("script");r.onerror=n,r.onload=e,r.type="text/javascript",r.id="ftr__script",r.async=!0,r.src="https://"+t;var o=document.getElementsByTagName("script")[0];o.parentNode.insertBefore(r,o)}function o(){k(T.uAL),setTimeout(i,v,T.uAL)}function i(t){try{var e=t===T.uDF?h:m;r(e,function(){try{U(),n(t+T.uS)}catch(e){}},function(){try{U(),S.td=1*new Date-S.ts,n(t+T.uF),t===T.uDF&&o()}catch(e){n(T.eUoe)}})}catch(i){n(t+T.eTlu)}}var a={write:function(t,e,n,r){void 0===r&&(r=!0);var o,i;if(n?(o=new Date,o.setTime(o.getTime()+24*n*60*60*1e3),i="; expires="+o.toGMTString()):i="",!r)return void(document.cookie=escape(t)+"="+escape(e)+i+"; path=/");var a,c,u;if(u=location.host,1===u.split(".").length)document.cookie=escape(t)+"="+escape(e)+i+"; path=/";else{c=u.split("."),c.shift(),a="."+c.join("."),document.cookie=escape(t)+"="+escape(e)+i+"; path=/; domain="+a;var s=this.read(t);null!=s&&s==e||(a="."+u,document.cookie=escape(t)+"="+escape(e)+i+"; path=/; domain="+a)}},read:function(t){for(var e=escape(t)+"=",n=document.cookie.split(";"),r=0;r<n.length;r++){for(var o=n[r];" "==o.charAt(0);)o=o.substring(1,o.length);if(0===o.indexOf(e))return unescape(o.substring(e.length,o.length))}return null}},c="fort",u="erTo",s="ken",d=c+u+s,f="9";f+="ck";var l=3,h=e("(VQ(1fgq71iruwhu1frp2vq2(VQ(2vfulsw1mv"),m=e("g68x4yj4t5;e6z1forxgiurqw1qhw2vq2(VQ(2vfulsw1mv"),v=10;window.ftr__startScriptLoad=1*new Date;var g=function(t){var e=function(t){return t||""},n=e(t.id)+"_"+e(t.ts)+"_"+e(t.td)+"_"+e(t.ex)+"_"+e(f);a.write(d,n,1825,!0)},p=function(){var t=a.read(d)||"",e=t.split("_"),n=function(t){return e[t]||void 0};return{id:n(0),ts:n(1),td:n(2),ex:n(3),vr:n(4)}},w=function(){for(var t={},e="fgu",n=[],r=0;r<256;r++)n[r]=(r<16?"0":"")+r.toString(16);var o=function(t,e,r,o,i){var a=i?"-":"";return n[255&t]+n[t>>8&255]+n[t>>16&255]+n[t>>24&255]+a+n[255&e]+n[e>>8&255]+a+n[e>>16&15|64]+n[e>>24&255]+a+n[63&r|128]+n[r>>8&255]+a+n[r>>16&255]+n[r>>24&255]+n[255&o]+n[o>>8&255]+n[o>>16&255]+n[o>>24&255]},i=function(){if(window.Uint32Array&&window.crypto&&window.crypto.getRandomValues){var t=new window.Uint32Array(4);return window.crypto.getRandomValues(t),{d0:t[0],d1:t[1],d2:t[2],d3:t[3]}}return{d0:4294967296*Math.random()>>>0,d1:4294967296*Math.random()>>>0,d2:4294967296*Math.random()>>>0,d3:4294967296*Math.random()>>>0}},a=function(){var t="",e=function(t,e){for(var n="",r=t;r>0;--r)n+=e.charAt(1e3*Math.random()%e.length);return n};return t+=e(2,"0123456789"),t+=e(1,"123456789"),t+=e(8,"0123456789")};return t.safeGenerateNoDash=function(){try{var t=i();return o(t.d0,t.d1,t.d2,t.d3,!1)}catch(n){try{return e+a()}catch(n){}}},t.isValidNumericalToken=function(t){return t&&t.toString().length<=11&&t.length>=9&&parseInt(t,10).toString().length<=11&&parseInt(t,10).toString().length>=9},t.isValidUUIDToken=function(t){return t&&32===t.toString().length&&/^[a-z0-9]+$/.test(t)},t.isValidFGUToken=function(t){return 0==t.indexOf(e)&&t.length>=12},t}(),T={uDF:"UDF",uAL:"UAL",mLd:"1",eTlu:"2",eUoe:"3",uS:"4",uF:"9",tmos:["T5","T10","T15","T30","T60"],tmosSecs:[5,10,15,30,60],bIR:"43"},y=function(t,e){for(var n=T.tmos,r=0;r<n.length;r++)if(t+n[r]===e)return!0;return!1};try{var S=p();try{S.id&&(w.isValidNumericalToken(S.id)||w.isValidUUIDToken(S.id)||w.isValidFGUToken(S.id))||(S.id=w.safeGenerateNoDash()),S.ts=window.ftr__startScriptLoad,g(S);var D=new Array(T.tmosSecs.length),k=function(t){for(var e=0;e<T.tmosSecs.length;e++)D[e]=setTimeout(n,1e3*T.tmosSecs[e],t+T.tmos[e])},U=function(){for(var t=0;t<T.tmosSecs.length;t++)clearTimeout(D[t])};y(T.uDF,S.ex)?o():(k(T.uDF),setTimeout(i,v,T.uDF))}catch(F){n(T.mLd)}}catch(F){}});
    return Forter;
});
/* jshint ignore:end */
;
define('module/framemessaging/PreconditionIframe',['require','jquery'],function(require){
	var $ = require('jquery');

	var PreconditionIframe = function(callbackFunction) {
        this.counter = 0;
        this.callback = callbackFunction;
    };

    PreconditionIframe.prototype.validate = function(message) {
        return this.counter === 0 &&
                message.data !== undefined &&
                message.data.method === 'preconditionIframe';
    };

    PreconditionIframe.prototype.notify = function(message) {

        console.log("Received message to render hidden precondition iframe");

        this.counter++;
        render(message);
        this.handleCallback();
    };

    PreconditionIframe.prototype.handleCallback = function() {

        if (typeof this.callback === 'function') {
            this.callback(this.counter);
        }
    };

	function render(message) {

        console.log("precondition iframe render");
        var $parentLayer = $(".wpwl-container-card");
        if ($parentLayer.length) {

            var host = message.data.host;
            message.data.preconditions.forEach(function (item, index) {
                var $iframe = $(string("<iframe id=\"precondition", index, "\" class=\"wpwl-target\" src=\"", host, item.url,
                                        "\" frameBorder=\"0\" style=\"display:none;\"/>"));
                $parentLayer.append($iframe);
            });
        }
	}

    function string() {
        return Array.prototype.slice.call(arguments).join("");
    }

	return PreconditionIframe;
});
define('module/framemessaging/Redirect',['require','module/Wpwl'],function(require){
	var Wpwl = require('module/Wpwl');

	var Redirect = function(callbackFunction) {
	    this.counter = 0;
	    this.callback = callbackFunction;
    };

    Redirect.prototype.validate = function(message) {
        return this.counter === 0 &&
            message.data !== undefined &&
			validateMethod(message.data) &&
			validateOrigin(message) &&
            validateMandatoryParameters(message.data) &&
			validateHttpMethod(message.data);
    };

    Redirect.prototype.notify = function(message) {

        this.counter++;
        this.handleCallback();
        this.doTheRedirect({ redirectUrl: message.data.redirectUrl,
            httpMethod: message.data.httpMethod,
            target: message.data.target,
            params : message.data.params });
    };

	Redirect.prototype.doTheRedirect = function(redirectObj) {

        if( redirectObj.httpMethod === 'GET' && redirectObj.target === '_top' ) {
            window.top.location.href = redirectObj.redirectUrl;
        }
        else {
            redirectWithForm(redirectObj);
        }
	};

    Redirect.prototype.handleCallback = function() {

        if (typeof this.callback === 'function') {
            this.callback(this.counter);
        }
    };

	function redirectWithForm(redirectObj) {

        var form = document.createElement("form");
        form.action = redirectObj.redirectUrl;
        form.method = redirectObj.httpMethod;
        form.target = redirectObj.target;
	    for(var i=0;i<redirectObj.params.length;i++) {
	        var param = redirectObj.params[i];
	        var element = document.createElement("input");
	        element.type='hidden';
	        element.name=param.name;
	        element.value=param.value;
	        form.appendChild(element);
	    }
        document.body.appendChild(form);
        form.submit();
	}

    function validateMethod(data) {
        return data.method === 'asyncRedirect';
    }

	function validateHttpMethod(data) {
		return (data.httpMethod === 'GET' || data.httpMethod === 'POST');
    }

    function validateOrigin(msg) {
        // validate the message is coming from opp redirect iframe
        return msg.origin === Wpwl.checkout.config.environmentConfig.url;
    }

    function validateMandatoryParameters(data) {
        return data.redirectUrl !== '' && data.target !== '';
    }

	return Redirect;
});
define('module/framemessaging/SessionTimeoutErrorHandler',['require','module/Options','module/error/OppError'],function(require){

	var Options = require('module/Options');
	var OppError = require("module/error/OppError");

	var SessionTimeoutErrorNotification = function(callbackFunction) {
        this.counter = 0;
        this.callback = callbackFunction;
    };

    SessionTimeoutErrorNotification.prototype.validate = function(message) {
        return this.counter === 0 &&
                message.data !== undefined &&
                message.data.method === 'errorSessionTimeout';
    };

    SessionTimeoutErrorNotification.prototype.notify = function() {

        console.log("Received message that the session timed-out");
        this.counter++;

        Options.onError(new OppError('Session timed out!', 'InvalidCheckoutIdError'));
        this.handleCallback();
    };

    SessionTimeoutErrorNotification.prototype.handleCallback = function() {

        if (typeof this.callback === 'function') {
            this.callback(this.counter);
        }
    };

	return SessionTimeoutErrorNotification;
});
/*jshint camelcase: false */
define('module/PaymentWidget',['require','jquery','module/integrations/Affirm','module/ApplePay','module/GooglePay','module/Console','lib/Spinner','module/Options','module/error/OppError','module/CountDownLatch','module/Message','module/MessageView','module/Parameter','module/Parameters','module/Payment','module/Setting','module/SpecForm','module/Wpwl','module/Billing','module/CardHolder','module/Util','module/integrations/RedShieldDeviceId','module/integrations/CyberSourceRiskDeviceId','module/integrations/KountIntegration','module/Generate','module/InternalRequestCommunication','module/IdealPaymentWidget','module/integrations/KlarnaPaymentsInlineWidget','module/integrations/YandexCheckoutPaymentWidget','module/integrations/AfterPayPacificPaymentWidget','module/forms/PaypalRestPaymentForm','module/InlineFlow','module/integrations/AmazonPayWidget','module/FrameMessenger','module/integrations/forter','module/framemessaging/PreconditionIframe','module/framemessaging/Redirect','module/framemessaging/SessionTimeoutErrorHandler','module/error/WidgetError','module/logging/LoggerFactory','shim/ObjectCreate'],function(require){
	var $ = require('jquery');
	var Affirm = require('module/integrations/Affirm');
	var ApplePay = require('module/ApplePay');
	var GooglePay = require('module/GooglePay');
	var Console = require('module/Console');
	var Spinner = require('lib/Spinner');
	var Options = require('module/Options');
	var OppError = require("module/error/OppError");
	var CountDownLatch = require('module/CountDownLatch');
	var Message = require('module/Message');
	var MessageView = require('module/MessageView');
	var Parameter = require('module/Parameter');
	var Parameters = require('module/Parameters');
	var Payment = require('module/Payment');
    var Setting = require('module/Setting');
	var SpecForm = require('module/SpecForm');
	var Wpwl = require('module/Wpwl');
	var Billing = require('module/Billing');
	var CardHolder = require('module/CardHolder');
	var Util = require('module/Util');
	var RedShieldDeviceId = require('module/integrations/RedShieldDeviceId');
	var CyberSourceRiskDeviceId = require('module/integrations/CyberSourceRiskDeviceId');
	var KountIntegration = require('module/integrations/KountIntegration');
    var Generate = require('module/Generate');
    var InternalRequestCommunication = require('module/InternalRequestCommunication');
    var IdealPaymentWidget = require('module/IdealPaymentWidget');
    var KlarnaPaymentsInlineWidget = require('module/integrations/KlarnaPaymentsInlineWidget');
    var YandexCheckoutPaymentWidget = require('module/integrations/YandexCheckoutPaymentWidget');
    var AfterPayPacificPaymentWidget = require('module/integrations/AfterPayPacificPaymentWidget');
    var PaypalRestPaymentForm = require('module/forms/PaypalRestPaymentForm');
    var InlineFlow = require("module/InlineFlow");
	var AmazonPay = require('module/integrations/AmazonPayWidget');

    var FrameMessenger = require('module/FrameMessenger');
	var Forter = require('module/integrations/forter');

    var PreconditionIframe = require('module/framemessaging/PreconditionIframe');
	var Redirect = require('module/framemessaging/Redirect');
	var SessionTimeoutErrorHandler = require('module/framemessaging/SessionTimeoutErrorHandler');

	var WidgetError = require('module/error/WidgetError');
	var LoggerFactory = require('module/logging/LoggerFactory');
	var ObjectCreate = require('shim/ObjectCreate');

	var logger = LoggerFactory.getLogger('PaypalRestPaymentForm');

	var WPWL_CONTAINER = "wpwl-container";
	var WPWL_CLEARFIX = "wpwl-clearfix";

	var PaymentWidget = function(forms){
		this.forms = forms;
		this.frameMessenger = new FrameMessenger([new Redirect(), new PreconditionIframe(), new SessionTimeoutErrorHandler()]);
		this.onReadyPromise = $.when();
	};

	// 2nd. Generates all the payment forms according to the specification.
	PaymentWidget.prototype.generateForms = function() {
	    var self = this;
		$(document).on("wpwl:ready.wpwlEvent", function() {
			self.addOnReadyPromise(initStyle());
			RedShieldDeviceId.loadScript();
			CyberSourceRiskDeviceId.loadScript();
			KountIntegration.loadScript();
			preparePciCompliance();
			prepareCardHolderBilling();
			prepareBillingWidget();
			self.getOnReadyPromise().then(function() {
			    Options.onReady.call(window);
			});
		});

        //Redirect messages are processed by Redirect()
        this.frameMessenger.listenToRedirectMessage();

		var cnpForms = this.forms;
		Console.info('found payment forms: ', cnpForms);
		var readyLatch = new CountDownLatch(cnpForms.length);
		preparePayment();

		for (var i = 0, len = cnpForms.length; i < len; i++) {
			var specForm = new SpecForm(cnpForms[i]);
			if (Payment.isPreparePaymentFormEnabled()) {
				preparePaymentForm.call(this, specForm, readyLatch);
			} else {
				generatePaymentForms.call(this, specForm, readyLatch);
			}
		}

        InternalRequestCommunication.initSender($('.' + WPWL_CONTAINER));
        if( Payment.forterActive === true ){
            Forter.enableForter(Payment.forterSiteId);
        }
	};

	PaymentWidget.prototype.unload = function () {
		Payment.unload();
        $('.wpwl-container').remove();
        InternalRequestCommunication.unloadSender();
        window.wpwl = {};
        this.frameMessenger.stopListening();
    };

    PaymentWidget.prototype.executePayment = function(containerClassName) {
         Payment.executePayment(containerClassName);
    };

    PaymentWidget.prototype.getOnReadyPromise = function() {
        return this.onReadyPromise;
    };

    PaymentWidget.prototype.addOnReadyPromise = function(promise) {
        this.onReadyPromise = $.when(this.onReadyPromise, promise);
    };

	function triggerReadyEvent(readyLatch) {
		if (readyLatch.countDown()) {
			$(document).trigger('wpwl:ready');
		}
	}

	function preparePaymentForm(specForm, readyLatch) {
		var token = specForm.getCheckoutId();
		var data = Payment.getPreparePaymentFormData(token);
		if (data === undefined) {
			var url = Wpwl.url + "/frontend/PreparePaymentForm" + ";jsessionid=" + token + "?callback=?";
			var spinner = new Spinner(Options.spinner).spin(specForm.$form.parent().get(0));
			specForm.$form.hide();
			// TODO potential optimization: if multiple tokens, send in single request
			$.getJSON(url, function(data) {
				spinner.stop();
				preparePaymentFormWithData.call(this, specForm, readyLatch, data);
			});
		} else {
			preparePaymentFormWithData.call(this, specForm, readyLatch, data);
		}
	}

	function preparePaymentFormWithData(specForm, readyLatch, data) {
		setActivePaymentMethods(specForm, data);
		generatePaymentForms.call(this, specForm, readyLatch);
	}

	function setActivePaymentMethods(specForm, data) {
		var allowedBrands = [];
		var redirectBrowserIfNoBrands = false;
		if (data !== undefined) {
			if (data.brandConfig !== undefined) {
				redirectBrowserIfNoBrands = data.brandConfig.redirectBrowserIfNoBrands;
			}
			if (data.activePaymentMethodResult !== undefined &&
				data.activePaymentMethodResult.allowedBrands !== undefined) {
				allowedBrands = data.activePaymentMethodResult.allowedBrands;
				updateBrands(specForm, allowedBrands);
			}
		}
		if (allowedBrands.length === 0 && redirectBrowserIfNoBrands) {
			Console.warn('no allowed brands found');
			forwardToShopperResultUrl(specForm);
		}
	}

	function updateBrands(specForm, allowedBrands) {
		specForm.setBrands(allowedBrands);
	}

	function forwardToShopperResultUrl(specForm) {
		var shopperResultUrl = specForm.getAction();
		var checkoutId = specForm.getCheckoutId();
		var shopperResultUrlWithToken = getUrlWithToken(shopperResultUrl, checkoutId);
		Console.info('redirecting to response url: ', shopperResultUrlWithToken);
		window.location = shopperResultUrlWithToken;
	}

	function getUrlWithToken(url, checkoutId) {
		if (url.indexOf("?") === -1) {
			return url + "?id=" + checkoutId;
		} else {
			return url + "&id=" + checkoutId;
		}
	}

	function initStyle(){
		return Payment.initStyle(Options.style);
	}

	// Initializes the framework
	function preparePayment() {
		Payment.initPayment(Wpwl);
	}

	// Identifies which payments are required to be rendered. To do so, checks the content of the form:
	// <form action="..." id="...">VISA MASTER PAYPAL Other Payments...</form>
	function calculatePaymentsToRender(specForm) {
		var paymentsToRender = {
			CC: [],
			OD: [],
			DD: [],
			IV: [],
			OT: [],
			PP: [],
			VA: []
		};
		var brandsNotSupportedYet = [];
		var brandsNotInUpperCase = [];

		var specFormBrands = specForm.getBrands();
		$.each( specFormBrands, function(index, brand){
			if(brand) {
				var paymentConfig = Setting.subTypeLabelMap[brand];

				if ( paymentConfig !== undefined ) {
					paymentsToRender[ paymentConfig.render ].push( brand );
				} else {
					paymentConfig = Setting.subTypeLabelMap[brand.toUpperCase()];
					if ( paymentConfig !== undefined ) {
						brandsNotInUpperCase.push(brand);
					} else {
						brandsNotSupportedYet.push(brand);
					}
				}
			}
		});

		if (brandsNotSupportedYet.length || brandsNotInUpperCase.length) {
			var messageString;
			if( brandsNotSupportedYet.length ) {
				messageString = "Brand" +
					(brandsNotSupportedYet.length > 1 ? "s " : " ") +
					brandsNotSupportedYet.join(", ") + " " +
					(brandsNotSupportedYet.length > 1 ? "are " : "is ") +
					"not supported - maybe misspelled. ";
			}
			if( brandsNotInUpperCase.length ) {
				messageString += "Brand" +
					(brandsNotInUpperCase.length > 1 ? "s " : " ") +
					brandsNotInUpperCase.join(", ") + " " +
					"must be configured in upper case.";
			}

			var message = new Message({type: 'warning', message: messageString});
			var messageView = new MessageView({elem: specForm.$form, method: 'before', message: message});
			messageView.inject();
		}

		return paymentsToRender;
	}

	// Given a Id, appends a random multiplied by timestamp to it in order to avoid possible collisions with customer ids.
	function randomizeId(baseId) {
		//return baseId + new Date().getTime();
		return baseId + Math.floor(Math.random() * new Date().getTime());
	}

	// Renders the Credit Card block.
	function renderCC(specForm, paymentMethods, shopperResultUrl) {
		var className = 'card';
		var id = randomizeId(className + '_');
		// 1st add divs
		var paymentBlock = $('<div />', {
			id: id,
			'class': [WPWL_CONTAINER, " ", WPWL_CONTAINER, "-", className, " ", WPWL_CLEARFIX].join("")
		});
		specForm.after( paymentBlock );

        var hiddenParameters = createHiddenParameters(shopperResultUrl, Options.shopperResultTarget, true);
		if (!Options.enableSAQACompliance) {
			hiddenParameters.add(Parameter.CARD_EXPIRY_MONTH, "");
			hiddenParameters.add(Parameter.CARD_EXPIRY_YEAR, "");
		}
		addHiddenBirthDateIfNeeded(specForm, hiddenParameters);

		// 2nd configure block
		Payment.showCardPaymentForm({
			id: id,
			subTypes: paymentMethods.join(", "),
			hidden: hiddenParameters.getParameters()
		});

		return paymentBlock;
	}

	/**
	 *  Add hidden birthdate if needed by one of the brands
	 */
	function addHiddenBirthDateIfNeeded(specForm, hiddenParameters) {
		var birthDateNeeded = false;
		var brands = specForm.data('brands');
		$.each( brands, function(index, brand){
			if(brand && Setting.usesBirthDate(brand)) {
				birthDateNeeded = true;
			}
		});

		if(birthDateNeeded) {
			hiddenParameters.add(Parameter.BIRTH_DATE,"");
		} 
	}

	// Renders the Direct Debit block
	function renderDirectDebit(configuration) {
		var specForm = configuration.container;
		var paymentMethods = configuration.paymentMethods;
        var shopperResultUrl = configuration.shopperResultUrl;
        var paymentInputs = configuration.paymentInputs;
        var brand = configuration.brand;

		var render = "DD";
		var className = Setting.nonCardPaymentTypeClassMap[render];
		var id = randomizeId(className + '_');
		// 1st add divs
		var paymentBlock = $('<div />', {
			id: id,
			'class': [WPWL_CONTAINER, " ", WPWL_CONTAINER, "-", className, " ", WPWL_CLEARFIX].join("")
		});
		specForm.after( paymentBlock );

        var hiddenParameters = createHiddenParameters(shopperResultUrl, Options.shopperResultTarget, true);
        hiddenParameters.add(Parameter.PAYMENT_BRAND, brand);

		// 2nd configure block
		Payment.showDirectDebitPaymentForm({
			id: id,
			subTypes: paymentMethods,
			hidden: hiddenParameters.getParameters(),
			paymentInputs: paymentInputs || Setting.directDebitPaymentData
		});

		return paymentBlock;
	}

	// Renders the button for Virtual Accounts, Online Transfers, Invoices, and Prepayments
	function renderButton(specForm, paymentMethods, shopperResultUrl) {
		var paymentBlock = specForm;
		var astroPayStreamlineBrands = [];
		var self = this;

		if(((paymentMethods.indexOf("KLARNA_PAYMENTS_PAYNOW") > -1) && InlineFlow.isInlineFlow("KLARNA_PAYMENTS_PAYNOW")) ||
		    ((paymentMethods.indexOf("KLARNA_PAYMENTS_PAYLATER") > -1) && InlineFlow.isInlineFlow("KLARNA_PAYMENTS_PAYLATER")) ||
		    ((paymentMethods.indexOf("KLARNA_PAYMENTS_SLICEIT") > -1) && InlineFlow.isInlineFlow("KLARNA_PAYMENTS_SLICEIT"))) {
		    KlarnaPaymentsInlineWidget.loadKlarnaPaymentsLibrary();
		}

		if (paymentMethods.indexOf("YANDEX_CHECKOUT") > -1) {
		    YandexCheckoutPaymentWidget.loadYandexCheckoutPaymentsLibrary();
		}

		if (paymentMethods.indexOf("AFTERPAY_PACIFIC") > -1) {
		    AfterPayPacificPaymentWidget.loadAfterPayPacificPaymentsLibrary(Wpwl.isTestSystem);
		}

		$.each( paymentMethods, function(index, brand){
			var render = Setting.subTypeLabelMap[brand].render;
			var className = Setting.nonCardPaymentTypeClassMap[render] + '-' + brand;
			var id = randomizeId( className + '_' );
			var $form;

			// 1st add divs
			var newPaymentBlock = $('<div />', {
				id: id,
				'class': [WPWL_CONTAINER, " ", WPWL_CONTAINER, "-", className, " ", WPWL_CLEARFIX].join("")
			});
			paymentBlock.after( newPaymentBlock );

            var hiddenParameters = createHiddenParameters(shopperResultUrl, Options.shopperResultTarget, true);

            if (brand === "INICIS") {
                hiddenParameters.add(Parameter.IS_MOBILE, screen.width <= 768);
            }

            if ((paymentMethods.indexOf("KLARNA_PAYMENTS_PAYNOW") > -1) ||
                 (paymentMethods.indexOf("KLARNA_PAYMENTS_PAYLATER") > -1) ||
                 (paymentMethods.indexOf("KLARNA_PAYMENTS_SLICEIT") > -1)) {
                hiddenParameters.add(Parameter.COPYANDPAY_LOCALE, Options.locale);
            }

			// 2nd configure block
			var formAttributes = {id: id, subType: brand, hidden: hiddenParameters.getParameters()};
			if ((brand === "PAYPAL" || brand === "PAYPAL_CONTINUE") && InlineFlow.isInlineFlow(brand)) {
				var form = Payment.showInlineButtonForm(formAttributes, PaypalRestPaymentForm.getCustomButtonFormId());
				var paypalRestWidget = new PaypalRestPaymentForm(form);
				paypalRestWidget.updateCheckoutWithPaymentBrand();
				paypalRestWidget.downloadButton().then(function(){
					paypalRestWidget.renderButton();
				}).catch(function(error) {
					logger.info("PayPal buttons loading failed with reason: " + error);
					Options.onError(ObjectCreate(WidgetError.prototype));
				});
			} else {
				$form = Payment.showButtonForm(formAttributes);
			}
			paymentBlock = newPaymentBlock;

			if (brand === "APPLEPAY") {
			    ApplePay.checkAndShowButton($form);
			}

			if (brand === "AMAZONPAY") {
			    AmazonPay.updateButton($form);
			}

			if (brand === "EPS") {
				self.addOnReadyPromise(
					updateEpsBrandList()
						.catch(function(oppError) {
							Options.onError(oppError);
						}));
			}

			if (brand === "ENTERCASH") {
				Payment.updateEntercashForm();
			}

			if (brand === "GIROPAY") {
				Payment.updateGiropayForm();
            }

			if (brand === "GOOGLEPAY") {
				GooglePay.createButton($form);
			}

            if (brand === "ASTROPAY_STREAMLINE_CASH" || brand === "ASTROPAY_STREAMLINE_OT") {
            	astroPayStreamlineBrands.push(brand);
            }

			if (brand === "MASTERPASS") {
				Payment.loadMasterPassLibrary();
				Payment.setMasterPassMessageListener();
			}

            if (brand === "IDEAL") {
                self.addOnReadyPromise(
                    IdealPaymentWidget.updateBanks(getCheckoutsConfigurationEndpoint('IDEAL_BANKS'))
                        .catch(function(oppError) {
                            Options.onError(oppError);
                        }));
            }

            if (brand === "AFFIRM") {
                Affirm.createAffirmButton(Wpwl.checkout.config.workflowSpecificConfig.affirmConfig,
                    $form, getCheckoutsEndpoint());
            }
		});

		if(astroPayStreamlineBrands.length > 0) {
			Payment.updateAstroPayStreamlineForm(astroPayStreamlineBrands);
		}

		return paymentBlock;
	}

	function renderSummaryWidget(specForm, shopperResultUrl) {
	    var className = 'paymentWidgetsSummary';
        var id = randomizeId(className + '_');
        //1st add divs
        var paymentBlock = $('<div />', {
            id: id,
            'class': [WPWL_CONTAINER, " ", WPWL_CONTAINER, "-", className, " ", WPWL_CLEARFIX].join("")
        });
        specForm.after( paymentBlock );

        var hiddenParameters = createHiddenParameters(shopperResultUrl, Options.shopperResultTarget, false);

        // 2nd configure block
        Payment.showPaymentWidgetsSummaryForm({
            id: id,
            hidden: hiddenParameters.getParameters()
        });

        return paymentBlock;
	}

    function getCheckoutsConfigurationEndpoint(type) {
        return Generate.string(getCheckoutsEndpoint(), '/configuration/', type);
    }

    function getCheckoutsEndpoint() {
        return Generate.string('/v', Wpwl.apiVersion, '/checkouts/', Wpwl.checkout.id);
    }

	function updateEpsBrandList() {
	    var host = "https://" + (Wpwl.isTestSystem ? "test.ctpe.net" : "ctpe.net");

		var populatedDeferred = $.Deferred();
		InternalRequestCommunication.getSender()
			.then(function(sender) {
				return sender.send({
					url: host + "/connectors/eps/banklist.link",
					dataType: 'jsonp'
				});
			})
			.then(function(data) {
				var deferred = $.Deferred();
				try {
					var selectBox = $("select.wpwl-control-bankName", "div.wpwl-container-onlineTransfer-EPS");
					selectBox.empty();
					$.each(data.bankList.banks.sort(function(a,b) {return a.bankName.localeCompare(b.bankName);}), function(index, bank) {
						selectBox.append("<option value='" + bank.bic + "'>" + bank.bankName + "</option>");
					});
					deferred.resolve();
				} catch (e) {
					deferred.reject(e);
				}
				return deferred.promise();
			})
			.then(function(){
				populatedDeferred.resolve();
			})
			.fail(function(reason) {
				logger.info('Failed to dynamically fetch EPS banks. Reason: ' + reason);
				populatedDeferred.reject(new OppError(
					'Error while loading EPS banks', 'PaymentFormError'));
			});
		return populatedDeferred.promise();
    }

    function createHiddenParameters(shopperResultUrl, shopperResultTarget, shopperResultUrlShouldBeDefined) {
        var hiddenParameters = new Parameters();

        if(shopperResultUrlShouldBeDefined) {
            hiddenParameters.add(Parameter.SHOPPER_RESULT_URL, shopperResultUrl);
        }

        if (shopperResultTarget) {
            hiddenParameters.add(Parameter.SHOPPER_RESULT_TARGET, shopperResultTarget);
        }

        if (Options.processing.appendMerchantTxIdToShopperResultUrl) {
			hiddenParameters.add(Parameter.APPEND_MERCHANT_TX_ID_TO_SHOPPER_RESULT_URL, true);
		}

        hiddenParameters.add(Parameter.FORCE_UTF8, "&#9760;");

        var origin = Util.getOrigin();
        if (origin) {
            hiddenParameters.add(Parameter.SHOP_ORIGIN, Util.getOrigin());
        }
        addForterSupport(hiddenParameters);
        return hiddenParameters;
    }

    function addForterSupport(hiddenParameters){
        if(Payment.forterActive === true) {
            hiddenParameters.add(Parameter.FORTER_COOKIE, "");
        }
    }

	// The generation of the payment forms is controlled in this point.
	function generatePaymentForms(specForm, readyLatch) {
		var shopperResultUrl = specForm.getAction();
		var paymentsToRender = calculatePaymentsToRender(specForm);
		var lastElement = specForm.$form;

		var ccMethods = paymentsToRender.CC;
		if ( ccMethods.length > 0 ) {
			lastElement = renderCC(lastElement, ccMethods, shopperResultUrl);
		}
		var ddMethods = paymentsToRender.DD;
		var ddSepaMethods = [];
		var sepaMethods = [];
		var ddSepaMixMethods = [];
		var ddNationalMethods = [];
		for (var idd = 0, len = ddMethods.length; idd < len; idd++) {
			var ddMethod = ddMethods[idd];
			if ( /^DIRECTDEBIT_SEPA$/.test( ddMethod ) ){
				ddSepaMethods.push( ddMethod );
			} else if ( /^SEPA$/.test( ddMethod ) ){
				sepaMethods.push( ddMethod );
			} else if( /^DIRECTDEBIT_SEPA_MIX/.test( ddMethod ) ) {
				ddSepaMixMethods.push( ddMethod );
			} else {
				ddNationalMethods.push( ddMethod );
			}
		}


		if ( ddSepaMethods.length > 0 ) {
			lastElement = renderDirectDebit ({
				container: lastElement,
				paymentMethods: ddSepaMethods,
				shopperResultUrl: shopperResultUrl,
				paymentInputs: Setting.directDebitSepaPaymentData,
				brand: "DIRECTDEBIT_SEPA"
			});
		}
		if ( sepaMethods.length > 0 ) {
			lastElement = renderDirectDebit ({
				container: lastElement,
				paymentMethods: sepaMethods,
				shopperResultUrl: shopperResultUrl,
				paymentInputs: Setting.sepaPaymentData,
				brand: "SEPA"
			});
		}
		if ( ddSepaMixMethods.length > 0 ) {
			lastElement = renderDirectDebit ({
				container: lastElement,
        		paymentMethods: ddSepaMixMethods,
        		shopperResultUrl: shopperResultUrl,
        		paymentInputs: Setting.directDebitSepaMixPaymentData,
        		brand: "DIRECTDEBIT_SEPA_MIX"
        	});
		}
		if ( ddNationalMethods.length > 0 ) {
			lastElement = renderDirectDebit ({
        		container: lastElement,
        		paymentMethods: ddNationalMethods,
        		shopperResultUrl: shopperResultUrl,
        		paymentInputs: Setting.directDebitPaymentData,
        		brand: "DIRECTDEBIT"
        	});
		}

		var nonCardPaymentTypes = ['IV', 'PP', 'OT', 'VA', 'OD'];
		for (var i = 0; i < nonCardPaymentTypes.length; i++) {
			var paymentType = nonCardPaymentTypes[i];
			var methods = paymentsToRender[paymentType];
			if ( methods.length > 0 ) {
				lastElement = renderButton.call(this, lastElement, methods, shopperResultUrl);
			}
		}

        //If this condition is true it means that we have the paymentWigetsSummary form from the summary page
        if(lastElement === specForm.$form && "paymentWidgetsSummary" === specForm.$form[0].className) {
            lastElement = renderSummaryWidget(lastElement, shopperResultUrl);
        }

        specForm.remove();
		triggerReadyEvent(readyLatch);
	}

	function preparePciCompliance(){
		Payment.preparePciCompliance();
	}

	function prepareBillingWidget(){
		Billing.initBilling();
	}

	function prepareCardHolderBilling(){
		if (!Options.enableSAQACompliance) {
			CardHolder.initCardHolder();
		}
	}
	
	return PaymentWidget;
});


define('module/SpecFormUtil',['require','jquery','module/MessageView','module/SpecForm','module/SupportMessage','module/Util','module/Wpwl'],function(require){
	var $ = require('jquery');
	var MessageView = require('module/MessageView');
	var SpecForm = require('module/SpecForm');
	var SupportMessage = require('module/SupportMessage');
	var Util = require('module/Util');
	var Wpwl = require('module/Wpwl');

	var SpecFormUtil = function(){
		this.brandConfig = Wpwl.checkout.config.brandConfig;
	};

	SpecFormUtil.DEFAULT_BRANDS = ["AMEX", "CASH_ON_DELIVERY", "DIRECTDEBIT_SEPA", "IDEAL",
	        "INVOICE", "MASTER", "PAYPAL", "SOFORTUEBERWEISUNG", "VISA"];

    SpecFormUtil.FAST_CHECKOUT_BRANDS = ["APPLEPAY", "PAYPAL_CONTINUE", "GOOGLEPAY", "AMAZONPAY"];

	SpecFormUtil.prototype.getSpecForms = function() {
		var allFormsOnPageArray = this.getAllForms();
		var forms = $.grep(allFormsOnPageArray, function(form) {
			return isSpecificationForm(form);
		});
		return forms;
	};

	SpecFormUtil.prototype.getAllForms = function(){
		return $("form").toArray();
	};

	SpecFormUtil.prototype.prepareSpecForms = function(forms){
		var specFormUtil = this;
		$.each(forms, function(index, form){
		    var specForm = new SpecForm(form);
		    if("paymentWidgetsSummary" !== form.className){
		        var allowedBrands = specFormUtil.getAllowedBrands(form);
                allowedBrands = specFormUtil.getAllowedFastCheckoutBrands(form, allowedBrands);
                specForm.setBrands(allowedBrands);
		    }
			specForm.setCheckoutId(Wpwl.checkout.id);
		});
	};

	SpecFormUtil.prototype.getAllowedBrands = function(form){
		var specFormBrands = this.getSpecFormBrands(form);
		var brandConfig = this.brandConfig || {};

		var brandsSetSent = brandConfig.activateBrands;

		if (!brandsSetSent) {
			if (Util.isEmpty(specFormBrands)){
				return injectErrorMessageAndReturnDefaultBrands(form);
			}

			return specFormBrands;
		}

		// brandsSetSent = true
		if (Util.isEmpty(specFormBrands) && Util.isEmpty(brandConfig.brands))
		{
			return injectErrorMessageAndReturnDefaultBrands(form);
		}
		// only brands defined in bip
		if (brandConfig.overrideShopBrands){
			return brandConfig.brands;
		}
		// no brands defined in specForm, use bip brands
		if (Util.isEmpty(specFormBrands)){
			return brandConfig.brands;
		}
		// no brands defined in bip, use form tag brands
		if (Util.isEmpty(brandConfig.brands)){
			return specFormBrands;
		}
		// only brands defined in specForm and in bip
		return Util.intersection(specFormBrands, brandConfig.brands);
	};

	SpecFormUtil.prototype.getSpecFormBrands = function(form){
		var $form = $(form);
		var textArray = getArrayFromText($form.text());
		var dataBrandsArray;

		var dataBrands = $form.data("brands");
		if (dataBrands !== undefined){
			dataBrandsArray = getArrayFromText(dataBrands);
		}

		return dataBrandsArray !== undefined ? dataBrandsArray : textArray;
	};

	function getArrayFromText(text){
		// split only if there is a string, otherwise it will return array with one empty string
		if (text.length) {
			// trim
			text = $.trim(text);
			// remove line breaks
			text = text.replace(/\r?\n|\r/g, "");

			return text.split(/\s+/);
		}

		return [];
	}

	SpecFormUtil.prototype.getAllowedFastCheckoutBrands = function(form, allowedBrands){
        if (Wpwl.checkout.id){
            return allowedBrands;
        }

        var diff = Util.difference(allowedBrands, SpecFormUtil.FAST_CHECKOUT_BRANDS);
        if (!Util.isEmpty(diff)){
            allowedBrands = Util.intersection(allowedBrands, SpecFormUtil.FAST_CHECKOUT_BRANDS);
            var message = "Unsupported fast checkout brands: " + diff.join(", ");

            if (Util.isEmpty(allowedBrands)){
                allowedBrands = SpecFormUtil.FAST_CHECKOUT_BRANDS;
                message = "No fast checkout brands defined, displaying default brands.";
            }

            injectErrorMessage(form, new SupportMessage(message));
        }
        return allowedBrands;
	};

	function isSpecificationForm(form) {
		var $form = $(form);
		var hasPaymentWidgetsClass = $form.hasClass('paymentWidgets');
		var hasPaymentWidgetsSummaryClass = $form.hasClass('paymentWidgetsSummary');

		if (hasPaymentWidgetsClass || hasPaymentWidgetsSummaryClass) {
			return true;
		}

		return false;
	}

	function injectErrorMessageAndReturnDefaultBrands(form) {
		var supportMessage = new SupportMessage('No brands defined, displaying default brands.');
		injectErrorMessage(form, supportMessage);

		return SpecFormUtil.DEFAULT_BRANDS;
	}

	function injectErrorMessage(form, message) {
		var messageView = new MessageView({elem: form, method: 'before', message: message});
		messageView.inject();
	}

	return SpecFormUtil;
});

define('module/Start',['require','jquery','module/error/OppError','module/Options','module/OneClickPaymentWidget','module/PaymentWidget','module/SpecFormUtil','module/Wpwl','module/logging/LoggerFactory'],function(require){
    var $ = require('jquery');
    var OppError = require("module/error/OppError");
	var Options = require('module/Options');
	var OneClickPaymentWidget = require('module/OneClickPaymentWidget');
	var PaymentWidget = require('module/PaymentWidget');
	var SpecFormUtil = require('module/SpecFormUtil');
	var Wpwl = require('module/Wpwl');
	var LoggerFactory = require('module/logging/LoggerFactory');

	var Start = function(){
		this.wpwl = Wpwl;
		this.specFormUtil = new SpecFormUtil();
		this.forms = this.specFormUtil.getSpecForms();
		this.oneClickPaymentWidget = new OneClickPaymentWidget(this.forms);
		this.paymentWidget = new PaymentWidget(this.forms);
		var self = this;

		this.wpwl.unload = function(){
            self.paymentWidget.unload();
        };

        this.wpwl.executePayment = function(containerClassName) {
            return self.paymentWidget.executePayment(containerClassName);
        };
	};
	
	Start.prototype.init = function(){
	    LoggerFactory.initFor(window);
		this.initPrepareSpecForms();
		if( Options.showOneClickWidget === true )
		{
		    this.initOneClickPaymentWidgets();
		}
		this.initPaymentWidgets();
		this.initSessionTimer();
	};

	Start.prototype.initPrepareSpecForms = function(){
		this.specFormUtil.prepareSpecForms(this.forms);
	};

	Start.prototype.initOneClickPaymentWidgets = function(){
		this.oneClickPaymentWidget.generateForms();
	};

	Start.prototype.initPaymentWidgets = function(){
		this.paymentWidget.generateForms();
	};

	Start.prototype.initSessionTimer = function(){
        var timeout = 3600000;
        this.sessionTimer = setTimeout(this.sessionTimeoutAction, timeout);
    };

	Start.prototype.sessionTimeoutAction = function(){
	    $('.wpwl-button-pay').prop("disabled", 'disabled');
        Options.onError(new OppError('Session timed out!', 'InvalidCheckoutIdError'));
	};

	Start.prototype.stopSessionTimer = function(){
        if (typeof this.sessionTimer !== 'undefined')
        {
           clearTimeout(this.sessionTimer);
        }
    };

	return Start;
});

define('module/Static',['require','jquery','module/Start'],function(require){
	var $ = require('jquery');
	var Start = require('module/Start');

	var Static = function(){
		this.start = new Start();
	};
	
	Static.prototype.onReady = function(){
		var $form = $('form.paymentWidgets');
		if(!$form.length){
		    $form = $('form.paymentWidgetsSummary');
		    if(!$form.length) return;
		}

		this.start.init();
	};
	
	return Static;
});

/**
 * Ensures that only numbers can be entered into an input field 
 * 
 * type="number" is not enough, because it allows '-' and 'e'
 */
define('module/NumberOnlyFormatter',['jquery', 'module/EventUtil'], function ($, EventUtil) {

    var NumberOnlyFormatter = function (obj) {
        this.selector = obj.selector;
    };
    
    NumberOnlyFormatter.prototype.format = function () {
        var $this = $(this.selector);

        if ($this.get(0) === undefined) {
            return;
        }
        
        $this.keypress(function (e) {
            if (EventUtil.isNonPrintableOrControlKeyPressed(e) || EventUtil.isNumberPressed(e)) {
                return;
            }

            e.preventDefault();
        });
    };

    return NumberOnlyFormatter;
});

define('module/IframeStylesLoader',['jquery', 'module/StylePropertiesFilter'], function($, StylePropertiesFilter) {
    // Generate css class name to avoid duplication.
    var COUNTER = 1;
    function getCounter() {
        return COUNTER++;
    }

    // the var key to indicate if element is already styled.
    var IFRAME_STYLE = 'iframe-style';

    /*
        The parameter stylesObject forms the following structure
        stylesObject = {
            card-number-placeholder: {
                color: xxx,
                font-size: yyy,
                font-family: zzz
            },
            cvv-placeholder: {
                color: xxx,
                font-size: yyy,
                font-family: zzz
            }
        }
    */
    function IframeStylesLoader(stylesObject) {
        this.loadStyles(stylesObject);
    }


    IframeStylesLoader.prototype.loadStyles = function(stylesObject) {
        // deep clone the stylesObject
        var clonedStylesObject = $.extend(true, {}, stylesObject);
        Object.keys(clonedStylesObject)
            .forEach(function(key){
                var styles = clonedStylesObject[key];
                Object.keys(styles)
                    .forEach(function(propertyKey){
                        var sanitizedKey = StylePropertiesFilter.sanitize(propertyKey);
                        var sanitizedValue = StylePropertiesFilter.sanitize(styles[propertyKey]);
                        if(sanitizedKey !== propertyKey){
                            delete styles[propertyKey];
                        }
                        styles[sanitizedKey] = sanitizedValue;
                    });
            });
        this.stylesObject = clonedStylesObject;
    };

    /**
        Apply styles for given element according to style key
        @param elem
            the jquery element
        @param styleKey
            the key for styles, e.g. card-number-placeholder
    */
    IframeStylesLoader.prototype.applyStyles = function(elem, styleKey) {
        var self = this;
        if (self.isElementStyled(elem, styleKey)) {
            return;
        }

        var styleObject = this.stylesObject[styleKey];
        if (styleObject && Object.keys(styleObject).length) {
            this.applyPlaceHolderStyle(styleKey, styleObject, elem);
            // mark current element is styled
            var alreadyStyledKeys = elem.data(IFRAME_STYLE) || [];
            alreadyStyledKeys.push(styleKey);
            elem.data(IFRAME_STYLE, alreadyStyledKeys);
        }
    };

    IframeStylesLoader.prototype.applyPlaceHolderStyle = function (styleKey, styleObject, elem) {
        var classSelector = 'IFRAME_STYLE_' + getCounter();

        function buildStyleBody(shouldAddImportant) {
            return Object.keys(styleObject).map(function(propertyKey) {
                    return propertyKey + ':' + styleObject[propertyKey] + (shouldAddImportant ? ' !important' : '');
                 }).join(';');
        }

        function stylePlaceHolder() {
            var msPlaceholderSuffix = ':-ms-input-placeholder';
            return ['::-webkit-input-placeholder', ':-moz-placeholder', '::-moz-placeholder', msPlaceholderSuffix]
                .map(function(suffix) {
                    var header = '.' + classSelector + suffix;
                    // The placeholder color is overwritten by text color on IE
                    // See https://jira.payon.com/browse/FL-208
                    return header + '{' + buildStyleBody(suffix === msPlaceholderSuffix) + '}';
                })
                .join(' ');
        }
        function styleClear() {
            var header = '.' + classSelector + '::-ms-clear';
            return header + '{' + buildStyleBody(false) + '}';
        }

        var style = '';
        switch(styleKey.substr(styleKey.lastIndexOf('-')+1)) {
            case 'placeholder':
                style = stylePlaceHolder();
                break;
            case 'clear':
                style = styleClear();
                break;
        }

        var content = '<style>' + style + '</style>';
        $(content).appendTo(elem.parent());
        elem.addClass(classSelector);
    };

    /**
        Check if the element is styled with given control name
        @param elem
           the jquery element
        @param styleKey
            the key for styles, e.g. card-number-placeholder
    */
    IframeStylesLoader.prototype.isElementStyled = function(elem, styleKey) {
        var names = elem.data(IFRAME_STYLE);
        if (names && names.length > 0) {
            return names.indexOf(styleKey) > -1;
        }

        return false;
    };


    IframeStylesLoader.prototype.styleCardNumber = function(element) {
        var self =  this;
        ['card-number-placeholder', 'card-number-clear'].forEach(function(styleKey) {
            self.applyStyles(element, styleKey);
        });
    };


    IframeStylesLoader.prototype.styleCardHolder = function(element) {
        var self =  this;
        ['card-number-placeholder', 'card-number-clear'].forEach(function(styleKey) {
            self.applyStyles(element, styleKey);
        });
    };

    IframeStylesLoader.prototype.styleCvv = function(element) {
        var self = this;
        ['cvv-placeholder', 'cvv-clear'].forEach(function(styleKey){
            self.applyStyles(element, styleKey);
        });
    };

    return IframeStylesLoader;
});

define('module/ExpiryDate',['require','jquery','module/Parameter','module/PaymentView','module/InputDateFormatter'],function(require) {
	var $ = require('jquery');
	var Parameter = require('module/Parameter');
	var PaymentView = require('module/PaymentView');
    var InputDateFormatter = require('module/InputDateFormatter');
    var EXPIRE_SELECTOR = '#ccexp';
	
	var ExpiryDate = {};	
	ExpiryDate.initExpiryDate  = function(){
        var expireMonth = $('input[name="' + Parameter.CARD_EXPIRY_MONTH + '"]');

        if (!expireMonth.length) {
            new InputDateFormatter({
                selector: EXPIRE_SELECTOR
            }).format();

            var expireElement = $(EXPIRE_SELECTOR);
            var input = $('<input autocomplete="off" type="hidden" name="" class="wpwl-control wpwl-control-empty" placeholder="">');

            expireMonth = input.clone().attr('name', Parameter.CARD_EXPIRY_MONTH);
            var expireYear = input.clone().attr('name', Parameter.CARD_EXPIRY_YEAR);
    
            expireElement
            .after( expireMonth )
            .after( expireYear );
    
            expireElement.on('blur', function(){
                var expiry = expireElement.val();
    
                var splittedMonthYear = PaymentView.splitMonthYear(expiry);
                expireMonth.val(splittedMonthYear.month);
                expireYear.val(splittedMonthYear.year);
            });
        }
	};
	return ExpiryDate;
});

define('module/IframeToParentCommunication',['require','jquery','lib/Channel','module/Detection','module/Setting','module/InputFormatter','module/NumberOnlyFormatter','module/Validate','module/IframeStylesLoader','module/Parameter','module/Util','module/Options','module/Generate','module/ExpiryDate','module/PaymentView'],function(require){
	var $ = require('jquery');
	var Channel = require('lib/Channel');
	var Detection = require('module/Detection');
	var Setting = require('module/Setting');
	var InputFormatter = require('module/InputFormatter');
	var NumberOnlyFormatter = require('module/NumberOnlyFormatter');
	var Validate = require('module/Validate');
	var CARD_NUMBER_SELECTOR = 'input[name="card.number"]';
	var CARD_CVV_SELECTOR = 'input[name="card.cvv"]';
	var CARD_HOLDER_SELECTOR = 'input[name="card.holder"]';
	var EXPIRY_DATE_SELECTOR = '#ccexp';
	var DEFAULT_CARD_NUMBER_INPUT_PATTERN = '{{9999}} {{9999}} {{9999}} {{9999}} {{9999}} {{9999}} {{9999}} {{9999}}';
	var DEFAULT_CVV_INPUT_PATTERN = '{{9999}}';
	var IframeStylesLoader = require('module/IframeStylesLoader');
	var Parameter = require("module/Parameter");
	var COMMUNICATION_TIMEOUT = 60000;
	var Util = require('module/Util');
	var Options = require('module/Options');
	var Generate = require('module/Generate');
	var ExpiryDate = require('module/ExpiryDate');
	var PaymentView = require('module/PaymentView');

	var IframeToParentCommunication = function(){
		// create new deferred instance
		this.onReadyDeferred = $.Deferred();
	};

	IframeToParentCommunication.prototype.setElements = function(elements){
		// elements
		this.$head = elements.$head;
		this.$form = elements.$form;
		this.$input = elements.$input;
	};

	IframeToParentCommunication.prototype.setupChannel = function(win, scope){
		try{
			this.channel = Channel.build({
				//debugOutput: true,
				window: win,
				origin: "*",
				scope: scope,
				onReady: $.proxy(this, "onReady")
			});
		}
		catch (e) {
			this.onReadyDeferred.reject();
		}

		return this.onReadyDeferred.promise();
	};

	IframeToParentCommunication.prototype.onReady = function() {
		/**
		 * The setup done in initComponentOnReady must be atomic in relationship with the onReady event. What we want here
		 * is that the init component code to be executed in the same code block by the event loop to prevent race condition
		 * issues with the parent component that could start talking to us before the listeners init and channels are bound.
		 * */
		this.onReadyDeferred.resolve();
		this.initComponentOnReady();
	};

	// should be private and called only on ready
	IframeToParentCommunication.prototype.initComponentOnReady = function() {
		this.initListeners();
		this.enableInput();
	};

	// should be private and called only on ready
	IframeToParentCommunication.prototype.enableInput = function() {
		this.$input.prop("disabled", false);

	};

	// should be private and called only on ready
	IframeToParentCommunication.prototype.initListeners = function() {
		var iframeToParentCommunication = this;

		this.channel.bind("sendWpwlOptions", function(trans, wpwl){
			iframeToParentCommunication.sendWpwlOptions(wpwl);
		});

		// sync bindings, aka fire and forget
		this.channel.bind("applyInputPlaceholder", function(trans, placeholder){
			iframeToParentCommunication.applyInputPlaceholder.call(iframeToParentCommunication, placeholder);
		});

		this.channel.bind("applyInputStyles", function(trans, styles){
			iframeToParentCommunication.applyInputStyles.call(iframeToParentCommunication, styles);
		});

		this.channel.bind("enableBrandDetection", function(){
			iframeToParentCommunication.enableBrandDetection.call(iframeToParentCommunication);
		});

		this.channel.bind("disableBrandDetection", function(){
			iframeToParentCommunication.disableBrandDetection.call(iframeToParentCommunication);
		});

		this.channel.bind("updateCardFormatting", function(){
			iframeToParentCommunication.updateCardFormatting.call(iframeToParentCommunication);
		});

		this.channel.bind("applyInputProperties", function(trans, properties){
			iframeToParentCommunication.applyInputProperties.call(iframeToParentCommunication, properties);
			iframeToParentCommunication.formatInput.call(iframeToParentCommunication , properties);
		});

		this.channel.bind("applyCheckoutId", function(trans, checkoutId){
			iframeToParentCommunication.applyCheckoutId.call(iframeToParentCommunication, checkoutId);
		});

		this.channel.bind("setInputToFocus", function(){
			iframeToParentCommunication.setInputToFocus.call(iframeToParentCommunication);
		});

		this.channel.bind('applyIframeStyles', function(trans, styleObject) {
			iframeToParentCommunication.applyIframeStyles.call(iframeToParentCommunication, styleObject);
		});

		// async bindings
		this.channel.bind("submitFormAndGetToken", function(trans){
			var submitFormAndGetTokenPromise = iframeToParentCommunication.submitFormAndGetToken.call(iframeToParentCommunication);

			convertPromiseToTransAndDelayReturn(trans, submitFormAndGetTokenPromise);
		});

		this.channel.bind("validateInput", function(trans, params) {

			var allowEmptyValue = params.allowEmptyValue;
			var eventName = typeof params.eventName !== 'undefined' ? params.eventName : 'submit';

			var event = $.Event(eventName);
			var validateInputPromise = iframeToParentCommunication.validateInput(event, allowEmptyValue);

			convertPromiseToTransAndDelayReturn(trans, validateInputPromise);
		});

		function convertPromiseToTransAndDelayReturn(trans, promise){
			promise
				.then(trans.complete)
				.fail(trans.error);

			trans.delayReturn(true);
		}

		// browser events
		this.$input.on("forcedBlur", function(event){
			iframeToParentCommunication.onBlur(event);
		});

		this.$input.on("focus", function(event){
			iframeToParentCommunication.onFocus(event);
		});

		this.$input.on('keydown', function(event) {
			iframeToParentCommunication.setIsValid(event, true);
		});

		this.$form.unbind('submit').on("submit", function() {
			iframeToParentCommunication.onIframeTriggeredSubmit.call(iframeToParentCommunication);
			return false;
		});
	};

	 // A cache containing the card brands identified by BINs
	IframeToParentCommunication.prototype.binCache = {

		EMPTY_VALUE: 'empty',

		isBinDetectionActive: function() {
			return "binlist" === Options.brandDetectionType;
		},

		computeBinFromCardNumber: function(val) {
			if (val && val.length >= 6) {
				if (val.length < 8) {
					return val.substring(0, 6);
				} else {
					return val.substring(0, 8);
				}
			}
		},

		containsBin: function(bin) {
			return this.hasOwnProperty(bin);
		},

		// when our input value is not yet a valid BIN (at least 6 chars) we will return an empty placeholder to distinguish
		// the cases when we haven't yet send the request to the binlist query service vs when nothing was found
		getValueByCardNumber: function (val) {
			val = Util.stripRawCardNumber(val);
			var bin = this.computeBinFromCardNumber(val);
			if (bin) {
				return this[bin];
			} else {
				return this.EMPTY_VALUE;
			}
		},

		brandMatchesBinDetectedBrands: function(brand, binDetectedBrands) {
			if (binDetectedBrands === this.EMPTY_VALUE) {
				return true;
			}
			return binDetectedBrands &&
				binDetectedBrands.length > 0 &&
				binDetectedBrands.indexOf(brand) !== -1;
		}
	};

	IframeToParentCommunication.prototype.sendWpwlOptions = function (wpwl){
		Options.setWpwlOptions(wpwl.wpwlOptions);
		this.binUrl = Generate.string(wpwl.url, "/v", wpwl.apiVersion,
									"/checkouts/", wpwl.checkout.id, "/bins/");
	};

	IframeToParentCommunication.prototype.applyInputPlaceholder = function(placeholder){
		this.$input.attr("placeholder", placeholder);
	};

	IframeToParentCommunication.prototype.applyInputStyles = function(styles){
		if($.isEmptyObject(styles)){
			// remove all styles if empty object is passed in
			this.$input.removeAttr("style");
		} else {
			// update styles
			this.$input.css(styles);
		}
	};

	IframeToParentCommunication.prototype.applyIframeStyles = function(styleObject) {
		var stylesLoader = new IframeStylesLoader(styleObject);
        if (this.$input.is(CARD_NUMBER_SELECTOR)) {
            stylesLoader.styleCardNumber(this.$input);
        } else if(this.$input.is(CARD_CVV_SELECTOR)) {
            stylesLoader.styleCvv(this.$input);
        } else if(this.$input.is(EXPIRY_DATE_SELECTOR)) {
            ExpiryDate.initExpiryDate();
        }
		
	};

	IframeToParentCommunication.prototype.submitFormAndGetToken = function(){
		if(this.$input.is(CARD_HOLDER_SELECTOR)) {
			this.$input.val( Util.trim(this.$input.val()) );
		} else {
			this.$input.val(Util.stripRawCardNumber(this.$input.val()));
		}
		return $.post(this.$form.attr("action"), this.$form.serialize());
	};

	IframeToParentCommunication.prototype.validateInput = function(event, allowEmptyValue){
		var iframeToParentCommunication = this;
		var binCache = this.binCache;

		return $.when(iframeToParentCommunication.getBrand(),
			iframeToParentCommunication.onBinDetectionCompletion())

		.then(function(brand, binDetectedBrands) {
			if (binCache.isBinDetectionActive() &&
				!binCache.brandMatchesBinDetectedBrands(brand, binDetectedBrands)) {
					return false;
			}
			return iframeToParentCommunication.validateInputValue(brand, allowEmptyValue);

		}).then(function(isValid) {
			iframeToParentCommunication.setIsValid(event, isValid);
			return isValid;
		});
	};

	IframeToParentCommunication.prototype.onBinDetectionCompletion = function() {
		if (this.binCache.isBinDetectionActive()) {
		    var bin = this.binCache.computeBinFromCardNumber(Util.parseEasternNumber(this.$input.val()));
		    if(this.binCache[bin] === undefined) {
		        this.updateEnhancedBinBrands(Util.parseEasternNumber(this.$input.val()));
		    }
			return this.binCache.getValueByCardNumber(this.$input.val());
		}
	};

	IframeToParentCommunication.prototype.onBlur = function(event){
		this.validateInput(event, true);

		this.notify("onBlur", this.$input.val() === '');
	};
	
	IframeToParentCommunication.prototype.onIframeTriggeredSubmit = function(){
        this.notify("onIframeTriggeredSubmit");
	};

	IframeToParentCommunication.prototype.onFocus = function(event){
		this.setIsValid(event, true);

		this.notify("onFocus", this.$input.val() === '');
	};

	IframeToParentCommunication.prototype.onSetDetectedBrands = function(brands, inputVal){
		this.notify("setDetectedBrands", {brands: brands, inputLength: inputVal.length});
	};

	IframeToParentCommunication.prototype.updateRegExpBrands = function(inputVal){
		var brands = Detection.getBrandsByNumber(inputVal);
		this.processRegExpBrands(inputVal, brands);
	};

	IframeToParentCommunication.prototype.updateEnhancedBinBrands = function(val) {
		var bin = this.binCache.computeBinFromCardNumber(val);
		if (!bin) {
			return;
		}
		if (this.binCache.containsBin(bin)) {
			this.binCache[bin].then(function(brands) {
				this.processEnhancedBrands(val, brands);
			}.bind(this));
		} else {
			this.binCache[bin] = $.Deferred();
			$.getJSON({
				url: this.binUrl + bin,
				success: function(response) {
					var brands = response.brands;
					this.binCache[bin].resolve(brands);
					this.processEnhancedBrands(val, brands);
				}.bind(this),
				error: function(){
					// Error retrieving EBM brands, fallback to regexp
					this.updateRegExpBrands(bin);
				}.bind(this)
			});
		}
	};

	IframeToParentCommunication.prototype.processRegExpBrands = function(inputVal, brands){
		var brand = Detection.getBrandFromBrands(brands);

		this.setUpCardFormatting(brand);

		//brands that don't have detection pattern also should be shown as logos on card form
		if (brands === null)
		{
			brands = Detection.getBrandsWithoutDetectionPattern();
		}
		else
		{
			brands = brands.concat(Detection.getBrandsWithoutDetectionPattern());
		}

		// we want to notify always, even if no brands was detected
		this.onSetDetectedBrands(brands, inputVal);
	};

	IframeToParentCommunication.prototype.processEnhancedBrands = function(inputVal, brands){
		if (brands != null && brands.length === 0){
			// We want to show error if no brands detected
			this.notify("setIsValid", {eventType: "1", isValid: false, isEmpty: false});
		}else{
			var brand = Detection.getBrandFromBrands(brands);

			this.setUpCardFormatting(brand);
		}

		// we want to notify always, even if no brands was detected
		this.onSetDetectedBrands(brands, inputVal);
	};

	IframeToParentCommunication.prototype.onKeyUp = function(){
		if (this.$input.is(CARD_NUMBER_SELECTOR)){
			if (this.binCache.isBinDetectionActive()){
				var bin = this.$input.val();
				var cleanBin = Util.parseEasternNumber(bin);
				if (cleanBin !== undefined){
					bin = cleanBin;
				}
				var length = bin.length;
				if (length < 6) {
					// update brands using Regexp
					this.updateRegExpBrands(this.$input.val());
				} else {
					// update brands using Enhanced Bin Management service
					this.updateEnhancedBinBrands(bin);
				}
			} else {
				// update brands using Regexp
				this.updateRegExpBrands(this.$input.val());
			}
		}
	};
	
	IframeToParentCommunication.prototype.getBrand = function(){
		return createSendMessageOnChannelPromise.call(this, "getBrand");
	};

	IframeToParentCommunication.prototype.setIsValid = function(event, isValid){
		this.notify("setIsValid", {eventType: event.type, isValid: isValid, isEmpty: this.$input.val() === ''});
	};

	IframeToParentCommunication.prototype.setUpCardFormatting = function(brand) {
		if (brand && Setting.cardValidation[brand] && Setting.cardValidation[brand].pattern)
		{
		    this.formatInputOnBrandDiscovery(Setting.cardValidation[brand].pattern);
		}
		else
		{
			this.formatInputOnBrandDiscovery(DEFAULT_CARD_NUMBER_INPUT_PATTERN);
		}
	};
	
	IframeToParentCommunication.prototype.notify = function(method, params){
		this.channel.notify({
			method: method,
			params: params
		});
	};

	// Attaches a function to call onKeyUp to this.$input for the event keyup.brandDetection
	IframeToParentCommunication.prototype.enableBrandDetection = function() {
		var iframeToParentCommunication = this;
		this.$input.on("keyup.brandDetection", function() {
			iframeToParentCommunication.onKeyUp();
		});
		this.$input.on("paste.brandDetection", function() {
            setTimeout(function() {
                //This time is needed because otherwise, the event happens
                //before the content of the input is set.
                iframeToParentCommunication.onKeyUp();
            }, 50);
        });
	};

	IframeToParentCommunication.prototype.disableBrandDetection = function() {
		this.$input.off('keyup.brandDetection');	
	};

	IframeToParentCommunication.prototype.updateCardFormatting = function() {
		
		var iframeToParentCommunication = this;
		iframeToParentCommunication.getBrand()
		.then(function(brand){
			iframeToParentCommunication.setUpCardFormatting(brand);
		});
	};
	
	IframeToParentCommunication.prototype.applyInputProperties = function(properties) {
		this.$input.attr('id', properties.id);
		this.$input.attr('name', properties.name);
		this.$input.prop('maxLength', properties.maxLength);
		// Force no autocomplete to comply to security standards
		this.$input.prop('autocomplete', 'off');
		this.$input.attr("aria-label", properties.ariaLabel);

        if (Parameter.CARD_CVV === properties.name) {
		    // mask cvv
		    if (properties.maskCvv){
                this.$input.attr('type', 'password');
                this.$input.attr('inputmode', 'numeric');
                this.$input.attr('pattern', '^\\d{3,4}$');
		    }

		    // remove hidden field in CVV iframe
		    this.$form.find("#EndToEndIdentity").remove();
		}

	};

	IframeToParentCommunication.prototype.setInputToFocus = function() {
		$(this.$input).focus();
	};

	IframeToParentCommunication.prototype.applyCheckoutId = function(checkoutId) {
		this.$form.attr('action', this.$form.attr('action') + checkoutId);
	};

	IframeToParentCommunication.prototype.validateInputValue = function(brand, allowEmptyValue) {
		var val = this.$input.val();

		if (allowEmptyValue && val === "") {
			return true;

		} else if (brand === null) {
			return false;

		} if (this.$input.is(CARD_NUMBER_SELECTOR)) {
			return Validate.validateCardNumber(val, brand);

		} else if (this.$input.is(CARD_CVV_SELECTOR)) {
			return Validate.validateCVC(val, brand);
		} else if (this.$input.is(CARD_HOLDER_SELECTOR)) {
			return Validate.validateAccountHolder( val );
		} else if (this.$input.is(EXPIRY_DATE_SELECTOR)) {
			var splittedMonthYear = PaymentView.splitMonthYear( val );
			$('input[name="' + Parameter.CARD_EXPIRY_MONTH + '"]').val(splittedMonthYear.month);
			$('input[name="' + Parameter.CARD_EXPIRY_YEAR + '"]').val(splittedMonthYear.year);
			return Validate.validateExpiry( splittedMonthYear.month, splittedMonthYear.year );
		}
		
		return false;
	};

	IframeToParentCommunication.prototype.formatInput = function(properties) {
		applyNumberFormatToInput(this.$input, CARD_NUMBER_SELECTOR, DEFAULT_CARD_NUMBER_INPUT_PATTERN , properties);
		applyNumberFormatToInput(this.$input, CARD_CVV_SELECTOR, DEFAULT_CVV_INPUT_PATTERN , properties);
	};

    /*jshint -W072 */
    //to supress jshint maxparams
	function applyNumberFormatToInput($input, selector, pattern , properties)
	{
		if ($input.is(selector)) {
            new NumberOnlyFormatter({selector:selector}).format();
            if (properties.numberFormatting) {
                new InputFormatter($(selector), pattern).format();
            }
		}
	}
	/*jshint +W072 */
	
	IframeToParentCommunication.prototype.formatInputOnBrandDiscovery = function(resolvedPattern){
		
		if (this.$input.is(CARD_NUMBER_SELECTOR) &&
			this.$input.data("pattern") !== resolvedPattern)
		{
			if (this.$input.data('formatter')) {
			    this.$input.data('formatter').setPattern(resolvedPattern);
			}
			this.$input.data("pattern", resolvedPattern);
		}
	};

	function createSendMessageOnChannelPromise(method, params){
		var deferred = $.Deferred();

		this.channel.call({
			method: method,
			timeout: COMMUNICATION_TIMEOUT,
			params: params,
			success: deferred.resolve,
			error: deferred.reject
		});

		return deferred.promise();
	}
	
	return IframeToParentCommunication;
});

define('module/PciIframe',['require','jquery','module/IframeToParentCommunication','module/Options'],function(require){
	var $ = require('jquery');
	var IframeToParentCommunication = require('module/IframeToParentCommunication');
	var Options = require('module/Options');
	var ENTER_KEY = 13;
	
	var PciIframe = function() {
		this.iframeToParentCommunication = new IframeToParentCommunication();
	}; 
	
	PciIframe.prototype.onReady = function(){
		var $form = $('form[data-behavior="iframe-form"]');
		if (!$form.length) return;

		var $head = $('head');
		var $input = $('input[type=tel]');
		
		var elements = {$head: $head, $form: $form, $input: $input};

		var iframeToParentCommunication = this.iframeToParentCommunication;
		iframeToParentCommunication.setElements(elements);
		iframeToParentCommunication
			.setupChannel(window.parent, "iframeCommunication");

		$input.on('keydown.wpwlEvent',function(e) {
            if(e.which === ENTER_KEY && Options.disableSubmitOnEnter ){
                e.preventDefault();
            }
        });

		//Fixes Firefox and IE tab bug
		$(window).on('focus', function(){
			$input.focus();
		});

        // Due to a bug in iOS we have to listen to the blur event of the
        // window and not the input. See FL-53 for details.
        $(window).on('blur', function(){
            $('input').trigger("forcedBlur");
        });

	};
	
	return PciIframe;
});

require.config({
	paths: {
		'jquery': 'lib/jquery',
		'underscore': 'lib/underscore',
		'jquery-ui': 'lib/jquery-ui',
		"dompurify" : "lib/dompurify"
	},
	map: {
		// '*' means all modules will get 'jquery-private' for their 'jquery' dependency.
		'*': {'jquery': 'lib/jquery-private'},

		// 'jquery-private' wants the real jQuery module though. If this line was not here, there would be an unresolvable cyclic dependency.
		'lib/jquery-private': {'jquery': 'jquery'}
	}
});

// initialize wpwl by loading the api module
require([
	'jquery',
	'module/Static',
	'module/PciIframe',
    'module/InternalRequestCommunication'
], function($, Static, PciIframe, InternalRequestCommunication) {
	var static = new Static();
	var pciIframe = new PciIframe();

	// static on ready
	$(function(){
		static.onReady.call(static);
		pciIframe.onReady.call(pciIframe);

        InternalRequestCommunication.initListener();
	});
});
}());